
f103c8t6_i2c_oled_ds2787.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ab0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08001be0  08001be0  00011be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800213c  0800213c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800213c  0800213c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800213c  0800213c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800213c  0800213c  0001213c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000010  08002154  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  20000480  08002154  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4fe  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001db2  00000000  00000000  0002a537  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004e0  00000000  00000000  0002c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000234a  00000000  00000000  0002c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008362  00000000  00000000  0002eb1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0005a036  00000000  00000000  00036e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00090eb2  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000003f0  00000000  00000000  00090f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001060  00000000  00000000  00091320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08001bc8 	.word	0x08001bc8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08001bc8 	.word	0x08001bc8

08000170 <Blink_Loop>:

//-----------------------------------------------------------------------------
static volatile uint16_t BlinkReg = 0;
//-----------------------------------------------------------------------------
//Процесс для мигания светодиодами.
void Blink_Loop(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	
	static uint16_t blinkCount = 0;
  //--------------------
	++blinkCount;
 8000174:	4b3b      	ldr	r3, [pc, #236]	; (8000264 <Blink_Loop+0xf4>)
 8000176:	881b      	ldrh	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	b29a      	uxth	r2, r3
 800017c:	4b39      	ldr	r3, [pc, #228]	; (8000264 <Blink_Loop+0xf4>)
 800017e:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 50)   == 0) BlinkReg ^= (1 << INTERVAL_50_mS);
 8000180:	4b38      	ldr	r3, [pc, #224]	; (8000264 <Blink_Loop+0xf4>)
 8000182:	881b      	ldrh	r3, [r3, #0]
 8000184:	4a38      	ldr	r2, [pc, #224]	; (8000268 <Blink_Loop+0xf8>)
 8000186:	fba2 1203 	umull	r1, r2, r2, r3
 800018a:	0912      	lsrs	r2, r2, #4
 800018c:	2132      	movs	r1, #50	; 0x32
 800018e:	fb01 f202 	mul.w	r2, r1, r2
 8000192:	1a9b      	subs	r3, r3, r2
 8000194:	b29b      	uxth	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d107      	bne.n	80001aa <Blink_Loop+0x3a>
 800019a:	4b34      	ldr	r3, [pc, #208]	; (800026c <Blink_Loop+0xfc>)
 800019c:	881b      	ldrh	r3, [r3, #0]
 800019e:	b29b      	uxth	r3, r3
 80001a0:	f083 0301 	eor.w	r3, r3, #1
 80001a4:	b29a      	uxth	r2, r3
 80001a6:	4b31      	ldr	r3, [pc, #196]	; (800026c <Blink_Loop+0xfc>)
 80001a8:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 100)  == 0) BlinkReg ^= (1 << INTERVAL_100_mS);
 80001aa:	4b2e      	ldr	r3, [pc, #184]	; (8000264 <Blink_Loop+0xf4>)
 80001ac:	881b      	ldrh	r3, [r3, #0]
 80001ae:	4a2e      	ldr	r2, [pc, #184]	; (8000268 <Blink_Loop+0xf8>)
 80001b0:	fba2 1203 	umull	r1, r2, r2, r3
 80001b4:	0952      	lsrs	r2, r2, #5
 80001b6:	2164      	movs	r1, #100	; 0x64
 80001b8:	fb01 f202 	mul.w	r2, r1, r2
 80001bc:	1a9b      	subs	r3, r3, r2
 80001be:	b29b      	uxth	r3, r3
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d107      	bne.n	80001d4 <Blink_Loop+0x64>
 80001c4:	4b29      	ldr	r3, [pc, #164]	; (800026c <Blink_Loop+0xfc>)
 80001c6:	881b      	ldrh	r3, [r3, #0]
 80001c8:	b29b      	uxth	r3, r3
 80001ca:	f083 0302 	eor.w	r3, r3, #2
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	4b26      	ldr	r3, [pc, #152]	; (800026c <Blink_Loop+0xfc>)
 80001d2:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 250)  == 0) BlinkReg ^= (1 << INTERVAL_250_mS);	
 80001d4:	4b23      	ldr	r3, [pc, #140]	; (8000264 <Blink_Loop+0xf4>)
 80001d6:	881b      	ldrh	r3, [r3, #0]
 80001d8:	4a25      	ldr	r2, [pc, #148]	; (8000270 <Blink_Loop+0x100>)
 80001da:	fba2 1203 	umull	r1, r2, r2, r3
 80001de:	0912      	lsrs	r2, r2, #4
 80001e0:	21fa      	movs	r1, #250	; 0xfa
 80001e2:	fb01 f202 	mul.w	r2, r1, r2
 80001e6:	1a9b      	subs	r3, r3, r2
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d107      	bne.n	80001fe <Blink_Loop+0x8e>
 80001ee:	4b1f      	ldr	r3, [pc, #124]	; (800026c <Blink_Loop+0xfc>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	f083 0304 	eor.w	r3, r3, #4
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	4b1c      	ldr	r3, [pc, #112]	; (800026c <Blink_Loop+0xfc>)
 80001fc:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 500)  == 0) BlinkReg ^= (1 << INTERVAL_500_mS);
 80001fe:	4b19      	ldr	r3, [pc, #100]	; (8000264 <Blink_Loop+0xf4>)
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	4a1b      	ldr	r2, [pc, #108]	; (8000270 <Blink_Loop+0x100>)
 8000204:	fba2 1203 	umull	r1, r2, r2, r3
 8000208:	0952      	lsrs	r2, r2, #5
 800020a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800020e:	fb01 f202 	mul.w	r2, r1, r2
 8000212:	1a9b      	subs	r3, r3, r2
 8000214:	b29b      	uxth	r3, r3
 8000216:	2b00      	cmp	r3, #0
 8000218:	d107      	bne.n	800022a <Blink_Loop+0xba>
 800021a:	4b14      	ldr	r3, [pc, #80]	; (800026c <Blink_Loop+0xfc>)
 800021c:	881b      	ldrh	r3, [r3, #0]
 800021e:	b29b      	uxth	r3, r3
 8000220:	f083 0308 	eor.w	r3, r3, #8
 8000224:	b29a      	uxth	r2, r3
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <Blink_Loop+0xfc>)
 8000228:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 1000) == 0)
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <Blink_Loop+0xf4>)
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	4a10      	ldr	r2, [pc, #64]	; (8000270 <Blink_Loop+0x100>)
 8000230:	fba2 1203 	umull	r1, r2, r2, r3
 8000234:	0992      	lsrs	r2, r2, #6
 8000236:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800023a:	fb01 f202 	mul.w	r2, r1, r2
 800023e:	1a9b      	subs	r3, r3, r2
 8000240:	b29b      	uxth	r3, r3
 8000242:	2b00      	cmp	r3, #0
 8000244:	d10a      	bne.n	800025c <Blink_Loop+0xec>
		{
			BlinkReg  ^= (1 << INTERVAL_1000_mS);
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <Blink_Loop+0xfc>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	b29b      	uxth	r3, r3
 800024c:	f083 0310 	eor.w	r3, r3, #16
 8000250:	b29a      	uxth	r2, r3
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <Blink_Loop+0xfc>)
 8000254:	801a      	strh	r2, [r3, #0]
			blinkCount = 0;
 8000256:	4b03      	ldr	r3, [pc, #12]	; (8000264 <Blink_Loop+0xf4>)
 8000258:	2200      	movs	r2, #0
 800025a:	801a      	strh	r2, [r3, #0]
		}
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	2000002e 	.word	0x2000002e
 8000268:	51eb851f 	.word	0x51eb851f
 800026c:	2000002c 	.word	0x2000002c
 8000270:	10624dd3 	.word	0x10624dd3

08000274 <Blink>:
//-----------------------------------------------------------------------------
uint16_t Blink(BlinkIntervalEnum_t interval){
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	
	if(BlinkReg & (1 << interval)) return 0xFFFF;
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <Blink+0x34>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	b29b      	uxth	r3, r3
 8000284:	461a      	mov	r2, r3
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	fa42 f303 	asr.w	r3, r2, r3
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	2b00      	cmp	r3, #0
 8000292:	d002      	beq.n	800029a <Blink+0x26>
 8000294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000298:	e000      	b.n	800029c <Blink+0x28>
	else											     return 0;
 800029a:	2300      	movs	r3, #0
}
 800029c:	4618      	mov	r0, r3
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	2000002c 	.word	0x2000002c

080002ac <usDelay>:
static uint8_t  TemperatureSign	= 0;

//*******************************************************************************************
//*******************************************************************************************
//Функция задержки в микросекундах.
__STATIC_INLINE void usDelay(__IO uint32_t us){
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

	us *= 4;  //Эти цифры подобраны эмпирическим путем для Fclk=72MHz.
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	607b      	str	r3, [r7, #4]
	us += 4;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3304      	adds	r3, #4
 80002be:	607b      	str	r3, [r7, #4]
	while(us--);
 80002c0:	bf00      	nop
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	1e5a      	subs	r2, r3, #1
 80002c6:	607a      	str	r2, [r7, #4]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d1fa      	bne.n	80002c2 <usDelay+0x16>
}
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
	...

080002d8 <OneWire_Reset>:
//**********************************************************
static uint8_t OneWire_Reset(void){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  uint16_t status = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	80fb      	strh	r3, [r7, #6]
  //---------------------
  //низкий уровень
  DS18B20_PIN_LOW();		 //низкий уровень
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <OneWire_Reset+0x50>)
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	4a10      	ldr	r2, [pc, #64]	; (8000328 <OneWire_Reset+0x50>)
 80002e8:	f023 0308 	bic.w	r3, r3, #8
 80002ec:	60d3      	str	r3, [r2, #12]
  usDelay(DELAY_RESET_PULSE);//задержка как минимум на 480 микросекунд
 80002ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f2:	f7ff ffdb 	bl	80002ac <usDelay>
  //высокий уровень
  DS18B20_PIN_HIGH();		 //высокий уровень
 80002f6:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <OneWire_Reset+0x50>)
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <OneWire_Reset+0x50>)
 80002fc:	f043 0308 	orr.w	r3, r3, #8
 8000300:	60d3      	str	r3, [r2, #12]
  usDelay(DELAY_READ_PAUSE); //задержка как минимум на 60 микросекунд
 8000302:	2037      	movs	r0, #55	; 0x37
 8000304:	f7ff ffd2 	bl	80002ac <usDelay>
  //проверяем уровень
  status = DS18B20_PIN_READ();   //проверяем уровень
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <OneWire_Reset+0x50>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	b29b      	uxth	r3, r3
 800030e:	f003 0308 	and.w	r3, r3, #8
 8000312:	80fb      	strh	r3, [r7, #6]
  usDelay(DELAY_RESET_PULSE / 2);//на всякий случай подождём, так как могут быть неточности в задержке.
 8000314:	20fa      	movs	r0, #250	; 0xfa
 8000316:	f7ff ffc9 	bl	80002ac <usDelay>
  return status;
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	b2db      	uxtb	r3, r3
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010800 	.word	0x40010800

0800032c <OneWire_WriteBit>:
//**********************************************************
static void OneWire_WriteBit(uint8_t bit){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]

	//низкий уровень
	DS18B20_PIN_LOW();
 8000336:	4b12      	ldr	r3, [pc, #72]	; (8000380 <OneWire_WriteBit+0x54>)
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	4a11      	ldr	r2, [pc, #68]	; (8000380 <OneWire_WriteBit+0x54>)
 800033c:	f023 0308 	bic.w	r3, r3, #8
 8000340:	60d3      	str	r3, [r2, #12]
	if(bit) usDelay(DELAY_WRITE_1);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d003      	beq.n	8000350 <OneWire_WriteBit+0x24>
 8000348:	2005      	movs	r0, #5
 800034a:	f7ff ffaf 	bl	80002ac <usDelay>
 800034e:	e002      	b.n	8000356 <OneWire_WriteBit+0x2a>
	else    usDelay(DELAY_WRITE_0);
 8000350:	2041      	movs	r0, #65	; 0x41
 8000352:	f7ff ffab 	bl	80002ac <usDelay>
	//высокий уровень
	DS18B20_PIN_HIGH();
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <OneWire_WriteBit+0x54>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	4a09      	ldr	r2, [pc, #36]	; (8000380 <OneWire_WriteBit+0x54>)
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	60d3      	str	r3, [r2, #12]
	if(bit) usDelay(DELAY_WRITE_1_PAUSE);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d003      	beq.n	8000370 <OneWire_WriteBit+0x44>
 8000368:	203c      	movs	r0, #60	; 0x3c
 800036a:	f7ff ff9f 	bl	80002ac <usDelay>
	else    usDelay(DELAY_WRITE_0_PAUSE);
}
 800036e:	e002      	b.n	8000376 <OneWire_WriteBit+0x4a>
	else    usDelay(DELAY_WRITE_0_PAUSE);
 8000370:	2005      	movs	r0, #5
 8000372:	f7ff ff9b 	bl	80002ac <usDelay>
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40010800 	.word	0x40010800

08000384 <OneWire_WriteByte>:
//**********************************************************
static void OneWire_WriteByte(uint8_t data){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < 8; i++)
 800038e:	2300      	movs	r3, #0
 8000390:	73fb      	strb	r3, [r7, #15]
 8000392:	e00d      	b.n	80003b0 <OneWire_WriteByte+0x2c>
		{
			OneWire_WriteBit((data >> i) & 0x01);
 8000394:	79fa      	ldrb	r2, [r7, #7]
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	fa42 f303 	asr.w	r3, r2, r3
 800039c:	b2db      	uxtb	r3, r3
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ffc1 	bl	800032c <OneWire_WriteBit>
	for(uint8_t i = 0; i < 8; i++)
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	3301      	adds	r3, #1
 80003ae:	73fb      	strb	r3, [r7, #15]
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
 80003b2:	2b07      	cmp	r3, #7
 80003b4:	d9ee      	bls.n	8000394 <OneWire_WriteByte+0x10>
			//usDelay(DELAY_PROTECTION);
		}
}
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <OneWire_ReadBit>:
//**********************************************************
static uint8_t OneWire_ReadBit(void){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0

	uint8_t bit = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	71fb      	strb	r3, [r7, #7]
	//---------------------
	//шину к земле.
	DS18B20_PIN_LOW();
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <OneWire_ReadBit+0x50>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	4a10      	ldr	r2, [pc, #64]	; (8000410 <OneWire_ReadBit+0x50>)
 80003d0:	f023 0308 	bic.w	r3, r3, #8
 80003d4:	60d3      	str	r3, [r2, #12]
	usDelay(DELAY_READ_SLOT);
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff ff68 	bl	80002ac <usDelay>
	//отпустили шину.
	DS18B20_PIN_HIGH();
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <OneWire_ReadBit+0x50>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <OneWire_ReadBit+0x50>)
 80003e2:	f043 0308 	orr.w	r3, r3, #8
 80003e6:	60d3      	str	r3, [r2, #12]
	usDelay(DELAY_BUS_RELAX);
 80003e8:	200f      	movs	r0, #15
 80003ea:	f7ff ff5f 	bl	80002ac <usDelay>
	//Чтение состояния линии
	if(DS18B20_PIN_READ()) bit = 1;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <OneWire_ReadBit+0x50>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	f003 0308 	and.w	r3, r3, #8
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <OneWire_ReadBit+0x3e>
 80003fa:	2301      	movs	r3, #1
 80003fc:	71fb      	strb	r3, [r7, #7]
	usDelay(DELAY_READ_PAUSE);
 80003fe:	2037      	movs	r0, #55	; 0x37
 8000400:	f7ff ff54 	bl	80002ac <usDelay>

	return bit;
 8000404:	79fb      	ldrb	r3, [r7, #7]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40010800 	.word	0x40010800

08000414 <ds18b20_getDevider>:
//**********************************************************
static uint8_t ds18b20_getDevider(DS18B20_Resolution_Enum resolution){
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]

	switch (resolution){
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b3f      	cmp	r3, #63	; 0x3f
 8000422:	d005      	beq.n	8000430 <ds18b20_getDevider+0x1c>
 8000424:	2b5f      	cmp	r3, #95	; 0x5f
 8000426:	d005      	beq.n	8000434 <ds18b20_getDevider+0x20>
 8000428:	2b1f      	cmp	r3, #31
 800042a:	d105      	bne.n	8000438 <ds18b20_getDevider+0x24>
		case DS18B20_Resolution_9_bit:  return 8;
 800042c:	2308      	movs	r3, #8
 800042e:	e004      	b.n	800043a <ds18b20_getDevider+0x26>
		case DS18B20_Resolution_10_bit: return 4;
 8000430:	2304      	movs	r3, #4
 8000432:	e002      	b.n	800043a <ds18b20_getDevider+0x26>
		case DS18B20_Resolution_11_bit: return 2;
 8000434:	2302      	movs	r3, #2
 8000436:	e000      	b.n	800043a <ds18b20_getDevider+0x26>
		case DS18B20_Resolution_12_bit:
		default: 						return 1;
 8000438:	2301      	movs	r3, #1
	}
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <readTemperature>:
//**********************************************************
static uint16_t readTemperature(void){
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0

	uint32_t data = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	607b      	str	r3, [r7, #4]
	//---------------------
	for(uint8_t i = 0; i < 16; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	70fb      	strb	r3, [r7, #3]
 8000452:	e00d      	b.n	8000470 <readTemperature+0x2c>
		{
			data |= (uint32_t)(OneWire_ReadBit() << i);
 8000454:	f7ff ffb4 	bl	80003c0 <OneWire_ReadBit>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	78fb      	ldrb	r3, [r7, #3]
 800045e:	fa02 f303 	lsl.w	r3, r2, r3
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4313      	orrs	r3, r2
 8000468:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < 16; i++)
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	3301      	adds	r3, #1
 800046e:	70fb      	strb	r3, [r7, #3]
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2b0f      	cmp	r3, #15
 8000474:	d9ee      	bls.n	8000454 <readTemperature+0x10>
		}
	//Отрицательная температура.
	if(data & 0x0000F800)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 800047c:	2b00      	cmp	r3, #0
 800047e:	d00e      	beq.n	800049e <readTemperature+0x5a>
		{
			TemperatureSign = DS18B20_SIGN_NEGATIVE;
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <readTemperature+0x80>)
 8000482:	2201      	movs	r2, #1
 8000484:	701a      	strb	r2, [r3, #0]

			data  = (data ^ 0x0000ffff) + 1;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800048c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8000490:	3301      	adds	r3, #1
 8000492:	607b      	str	r3, [r7, #4]
			data &= 0x00000FFF;//Маска для выделения 12 бит.
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	e002      	b.n	80004a4 <readTemperature+0x60>

//			data  = ~data;
//			data += 1;
//			data &= 0x00000FFF;
		}
	else TemperatureSign = DS18B20_SIGN_POSITIVE;
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <readTemperature+0x80>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
	//Расчет температуры
	return (uint16_t)(((data * 625) + 500) / 1000);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f240 2271 	movw	r2, #625	; 0x271
 80004aa:	fb02 f303 	mul.w	r3, r2, r3
 80004ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80004b2:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <readTemperature+0x84>)
 80004b4:	fba2 2303 	umull	r2, r3, r2, r3
 80004b8:	099b      	lsrs	r3, r3, #6
 80004ba:	b29b      	uxth	r3, r3
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000030 	.word	0x20000030
 80004c8:	10624dd3 	.word	0x10624dd3

080004cc <DS18B20_Init>:
//*******************************************************************************************
//*******************************************************************************************
void DS18B20_Init(DS18B20_Resolution_Enum resolution){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <DS18B20_Init+0x4c>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <DS18B20_Init+0x4c>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	6193      	str	r3, [r2, #24]
	//PB1 - 50MHz output open-drain
	DS18B20_GPIO->CRL |=  GPIO_CRL_MODE3;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <DS18B20_Init+0x50>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a0d      	ldr	r2, [pc, #52]	; (800051c <DS18B20_Init+0x50>)
 80004e8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80004ec:	6013      	str	r3, [r2, #0]
	DS18B20_GPIO->CRL |=  GPIO_CRL_CNF3_0;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <DS18B20_Init+0x50>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a0a      	ldr	r2, [pc, #40]	; (800051c <DS18B20_Init+0x50>)
 80004f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f8:	6013      	str	r3, [r2, #0]
	DS18B20_GPIO->CRL &= ~GPIO_CRL_CNF3_1;
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <DS18B20_Init+0x50>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a07      	ldr	r2, [pc, #28]	; (800051c <DS18B20_Init+0x50>)
 8000500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000504:	6013      	str	r3, [r2, #0]

	DS18B20_SetResolution(resolution);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f809 	bl	8000520 <DS18B20_SetResolution>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40010800 	.word	0x40010800

08000520 <DS18B20_SetResolution>:
//**********************************************************
void DS18B20_SetResolution(DS18B20_Resolution_Enum resolution){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]

	OneWire_Reset();//reset();
 800052a:	f7ff fed5 	bl	80002d8 <OneWire_Reset>
	OneWire_WriteByte(SKIP_ROM);
 800052e:	20cc      	movs	r0, #204	; 0xcc
 8000530:	f7ff ff28 	bl	8000384 <OneWire_WriteByte>
	OneWire_WriteByte(WRITE_SCRATCHPAD);
 8000534:	204e      	movs	r0, #78	; 0x4e
 8000536:	f7ff ff25 	bl	8000384 <OneWire_WriteByte>
	OneWire_WriteByte(TH_REGISTER);
 800053a:	204b      	movs	r0, #75	; 0x4b
 800053c:	f7ff ff22 	bl	8000384 <OneWire_WriteByte>
	OneWire_WriteByte(TL_REGISTER);
 8000540:	2046      	movs	r0, #70	; 0x46
 8000542:	f7ff ff1f 	bl	8000384 <OneWire_WriteByte>
	OneWire_WriteByte(resolution);
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff1b 	bl	8000384 <OneWire_WriteByte>
	DELAY_WAIT_CONVERT = DELAY_T_CONVERT / ds18b20_getDevider(resolution);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff5f 	bl	8000414 <ds18b20_getDevider>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <DS18B20_SetResolution+0x50>)
 800055c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000560:	461a      	mov	r2, r3
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <DS18B20_SetResolution+0x54>)
 8000564:	601a      	str	r2, [r3, #0]
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	000b98c0 	.word	0x000b98c0
 8000574:	20000000 	.word	0x20000000

08000578 <DS18B20_StartConvertTemperature>:
//**********************************************************
void DS18B20_StartConvertTemperature(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	if(OneWire_Reset()) return;
 800057c:	f7ff feac 	bl	80002d8 <OneWire_Reset>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d106      	bne.n	8000594 <DS18B20_StartConvertTemperature+0x1c>
	OneWire_WriteByte(SKIP_ROM);
 8000586:	20cc      	movs	r0, #204	; 0xcc
 8000588:	f7ff fefc 	bl	8000384 <OneWire_WriteByte>
	OneWire_WriteByte(CONVERT_T);
 800058c:	2044      	movs	r0, #68	; 0x44
 800058e:	f7ff fef9 	bl	8000384 <OneWire_WriteByte>
 8000592:	e000      	b.n	8000596 <DS18B20_StartConvertTemperature+0x1e>
	if(OneWire_Reset()) return;
 8000594:	bf00      	nop
}
 8000596:	bd80      	pop	{r7, pc}

08000598 <DS18B20_ReadTemperature>:
//**********************************************************
uint16_t DS18B20_ReadTemperature(void){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

	if(OneWire_Reset()) return 0;//99;
 800059c:	f7ff fe9c 	bl	80002d8 <OneWire_Reset>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <DS18B20_ReadTemperature+0x12>
 80005a6:	2300      	movs	r3, #0
 80005a8:	e008      	b.n	80005bc <DS18B20_ReadTemperature+0x24>
	OneWire_WriteByte(SKIP_ROM);
 80005aa:	20cc      	movs	r0, #204	; 0xcc
 80005ac:	f7ff feea 	bl	8000384 <OneWire_WriteByte>
	OneWire_WriteByte(READ_SCRATCHPAD);
 80005b0:	20be      	movs	r0, #190	; 0xbe
 80005b2:	f7ff fee7 	bl	8000384 <OneWire_WriteByte>

	return readTemperature();
 80005b6:	f7ff ff45 	bl	8000444 <readTemperature>
 80005ba:	4603      	mov	r3, r0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	bd80      	pop	{r7, pc}

080005c0 <DS18B20_GetTemperatureSign>:
//**********************************************************
uint8_t DS18B20_GetTemperatureSign(void){
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

	return TemperatureSign;
 80005c4:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <DS18B20_GetTemperatureSign+0x10>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	20000030 	.word	0x20000030

080005d4 <msDelay_Loop>:

//*******************************************************************************************
static volatile uint32_t msCounter = 0;
//*******************************************************************************************
//*******************************************************************************************
void msDelay_Loop(void){
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

	msCounter++;
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <msDelay_Loop+0x18>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	4a03      	ldr	r2, [pc, #12]	; (80005ec <msDelay_Loop+0x18>)
 80005e0:	6013      	str	r3, [r2, #0]
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000034 	.word	0x20000034

080005f0 <msDelay>:
//**********************************************************
void msDelay(volatile uint32_t del){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

	msCounter = 0;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <msDelay+0x28>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
	while(msCounter < del){__NOP();};
 80005fe:	e000      	b.n	8000602 <msDelay+0x12>
 8000600:	bf00      	nop
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <msDelay+0x28>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	d3f9      	bcc.n	8000600 <msDelay+0x10>
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000034 	.word	0x20000034

0800061c <ClearTextBuf>:
extern const unsigned char Ascii_Tab_12864[];//Рабочая.
#define TabAscii	       Ascii_Tab_12864   //Рабочая.
//*********************************************************************************************
//*********************************************************************************************
//Очистка текстового буфера.
static void ClearTextBuf(void){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i<LCD_TEXT_BUFFER_SIZE; i++) lcdTextBuf[i] = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	e006      	b.n	8000636 <ClearTextBuf+0x1a>
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <ClearTextBuf+0x2c>)
 800062c:	2100      	movs	r1, #0
 800062e:	54d1      	strb	r1, [r2, r3]
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	3301      	adds	r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b15      	cmp	r3, #21
 800063a:	d9f5      	bls.n	8000628 <ClearTextBuf+0xc>
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000038 	.word	0x20000038

0800064c <Lcd_Update>:
	Lcd_Clear();
	Lcd_Update();
}
//*****************************************************************************
//Вывод буфера на дисплей.
void Lcd_Update(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

//	Lm6063LcdUpdate(LcdCache);
//	Lcd_TIC32_SendData(LcdCache);
	SSD1306_UpdateScreen(lcdVideoBuffer);
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <Lcd_Update+0x10>)
 8000652:	f001 fa45 	bl	8001ae0 <SSD1306_UpdateScreen>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000050 	.word	0x20000050

08000660 <Lcd_pVideoBuffer>:
//*****************************************************************************
uint8_t* Lcd_pVideoBuffer(void){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

	return lcdVideoBuffer;
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <Lcd_pVideoBuffer+0x10>)
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000050 	.word	0x20000050

08000674 <Lcd_Clear>:
//*********************************************************************************************
//*********************************************************************************************
//Clears the display
void Lcd_Clear(void){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
  
	//забиваем всю память 0
	for(uint16_t i = 0; i < LCD_VIDEO_BUFFER_SIZE; i++) lcdVideoBuffer[i] = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	80fb      	strh	r3, [r7, #6]
 800067e:	e006      	b.n	800068e <Lcd_Clear+0x1a>
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <Lcd_Clear+0x2c>)
 8000684:	2100      	movs	r1, #0
 8000686:	54d1      	strb	r1, [r2, r3]
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	3301      	adds	r3, #1
 800068c:	80fb      	strh	r3, [r7, #6]
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000694:	d3f4      	bcc.n	8000680 <Lcd_Clear+0xc>
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000050 	.word	0x20000050

080006a4 <Lcd_GotoXYFont>:
  horizon_line2 = (y2-y1-3);
  for(i=horizon_line2;i>horizon_line;i--) Lcd_Line(x1+2,y2-2-i,x2-2,y2-2-i,0);
}
//*****************************************************************************
//Установка курсора в положение Х,У. Диапазон значений Х,У: 1,1 .. 14,8.
void Lcd_GotoXYFont(uint8_t x, uint8_t y){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
  
  if((x > 24) || (y > 8)) return;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b18      	cmp	r3, #24
 80006b8:	d814      	bhi.n	80006e4 <Lcd_GotoXYFont+0x40>
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	2b08      	cmp	r3, #8
 80006be:	d811      	bhi.n	80006e4 <Lcd_GotoXYFont+0x40>
  LcdCacheIdx = (uint16_t)((y-1) * 128) + (uint16_t)((x-1) * 6);
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	01db      	lsls	r3, r3, #7
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	0049      	lsls	r1, r1, #1
 80006d4:	440b      	add	r3, r1
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4413      	add	r3, r2
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <Lcd_GotoXYFont+0x4c>)
 80006e0:	801a      	strh	r2, [r3, #0]
 80006e2:	e000      	b.n	80006e6 <Lcd_GotoXYFont+0x42>
  if((x > 24) || (y > 8)) return;
 80006e4:	bf00      	nop
}
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000450 	.word	0x20000450

080006f4 <Lcd_Chr>:
//*****************************************************************************
//Displays a character at current cursor location and increment cursor location
void Lcd_Chr(uint16_t ch){
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
  unsigned char i;
  //--------------------
  //Проверка на максимум.
  //if(ch > LCD_CACHE_SIZE) return;
  //--------------------
  for (i=0; i<5; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e013      	b.n	800072c <Lcd_Chr+0x38>
    {
      //выделяем байт-столбик из символа и грузим в массив - 5 раз
	  lcdVideoBuffer[LcdCacheIdx++] = TabAscii[ch*5+i];
 8000704:	88fa      	ldrh	r2, [r7, #6]
 8000706:	4613      	mov	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	441a      	add	r2, r3
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	441a      	add	r2, r3
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <Lcd_Chr+0x5c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	1c59      	adds	r1, r3, #1
 8000716:	b288      	uxth	r0, r1
 8000718:	490d      	ldr	r1, [pc, #52]	; (8000750 <Lcd_Chr+0x5c>)
 800071a:	8008      	strh	r0, [r1, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <Lcd_Chr+0x60>)
 8000720:	5c9a      	ldrb	r2, [r3, r2]
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <Lcd_Chr+0x64>)
 8000724:	545a      	strb	r2, [r3, r1]
  for (i=0; i<5; i++)
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	3301      	adds	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	2b04      	cmp	r3, #4
 8000730:	d9e8      	bls.n	8000704 <Lcd_Chr+0x10>
    }
  lcdVideoBuffer[LcdCacheIdx++] = 0x00;	//добавляем пробел между символами
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <Lcd_Chr+0x5c>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	b291      	uxth	r1, r2
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <Lcd_Chr+0x5c>)
 800073c:	8011      	strh	r1, [r2, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <Lcd_Chr+0x64>)
 8000742:	2100      	movs	r1, #0
 8000744:	5499      	strb	r1, [r3, r2]
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	20000450 	.word	0x20000450
 8000754:	08001c3c 	.word	0x08001c3c
 8000758:	20000050 	.word	0x20000050

0800075c <Lcd_String>:
//*****************************************************************************
//Печать строки.
void Lcd_String(uint8_t x, uint8_t y){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
  
	unsigned char i;
	//--------------------
	//if (x > 15 || y > 8) return;
	if(x > 22 || y > 8)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b16      	cmp	r3, #22
 8000770:	d802      	bhi.n	8000778 <Lcd_String+0x1c>
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	2b08      	cmp	r3, #8
 8000776:	d903      	bls.n	8000780 <Lcd_String+0x24>
		{
		  x = 22;
 8000778:	2316      	movs	r3, #22
 800077a:	71fb      	strb	r3, [r7, #7]
		  y = 8;
 800077c:	2308      	movs	r3, #8
 800077e:	71bb      	strb	r3, [r7, #6]
		}
	//--------------------
	Lcd_GotoXYFont (x, y);
 8000780:	79ba      	ldrb	r2, [r7, #6]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff8c 	bl	80006a4 <Lcd_GotoXYFont>

	for(i=0; i<(22-x); i++)
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e00e      	b.n	80007b0 <Lcd_String+0x54>
		{
		  if(lcdTextBuf[i]) Lcd_Chr(lcdTextBuf[i]);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <Lcd_String+0x68>)
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d006      	beq.n	80007aa <Lcd_String+0x4e>
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <Lcd_String+0x68>)
 80007a0:	5cd3      	ldrb	r3, [r2, r3]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffa5 	bl	80006f4 <Lcd_Chr>
	for(i=0; i<(22-x); i++)
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	3301      	adds	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f1c3 0316 	rsb	r3, r3, #22
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dbea      	blt.n	8000792 <Lcd_String+0x36>
		}
//	clean_lcd_buf();
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000038 	.word	0x20000038

080007c8 <Lcd_ChrBold>:
//*****************************************************************************
//Displays a bold character at current cursor location and increment cursor location
void Lcd_ChrBold(int ch){
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  
  unsigned char i;
  unsigned char a = 0, b = 0, c = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	73bb      	strb	r3, [r7, #14]
 80007d4:	2300      	movs	r3, #0
 80007d6:	737b      	strb	r3, [r7, #13]
 80007d8:	2300      	movs	r3, #0
 80007da:	733b      	strb	r3, [r7, #12]
  //--------------------    	
  for(i = 0; i < 5; i++)
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e096      	b.n	8000910 <Lcd_ChrBold+0x148>
    {
      c = TabAscii[(ch*5+i)];//выделяем столбец из символа
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	441a      	add	r2, r3
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a57      	ldr	r2, [pc, #348]	; (800094c <Lcd_ChrBold+0x184>)
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	733b      	strb	r3, [r7, #12]

      b  = (c & 0x01) * 3;   //"растягиваем" столбец на два байта
 80007f4:	7b3b      	ldrb	r3, [r7, #12]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	461a      	mov	r2, r3
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	4413      	add	r3, r2
 8000802:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x02) * 6;
 8000804:	7b3b      	ldrb	r3, [r7, #12]
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	b2db      	uxtb	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	4413      	add	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	b2db      	uxtb	r3, r3
 8000816:	b25a      	sxtb	r2, r3
 8000818:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800081c:	4313      	orrs	r3, r2
 800081e:	b25b      	sxtb	r3, r3
 8000820:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x04) * 12;
 8000822:	7b3b      	ldrb	r3, [r7, #12]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	0052      	lsls	r2, r2, #1
 800082e:	4413      	add	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	b2db      	uxtb	r3, r3
 8000834:	b25a      	sxtb	r2, r3
 8000836:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800083a:	4313      	orrs	r3, r2
 800083c:	b25b      	sxtb	r3, r3
 800083e:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x08) * 24;
 8000840:	7b3b      	ldrb	r3, [r7, #12]
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	b2db      	uxtb	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	0052      	lsls	r2, r2, #1
 800084c:	4413      	add	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	b25a      	sxtb	r2, r3
 8000854:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000858:	4313      	orrs	r3, r2
 800085a:	b25b      	sxtb	r3, r3
 800085c:	737b      	strb	r3, [r7, #13]

      c >>= 4;
 800085e:	7b3b      	ldrb	r3, [r7, #12]
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	733b      	strb	r3, [r7, #12]
      a  = (c & 0x01) * 3;
 8000864:	7b3b      	ldrb	r3, [r7, #12]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	4413      	add	r3, r2
 8000872:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x02) * 6;
 8000874:	7b3b      	ldrb	r3, [r7, #12]
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	4413      	add	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	b2db      	uxtb	r3, r3
 8000886:	b25a      	sxtb	r2, r3
 8000888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800088c:	4313      	orrs	r3, r2
 800088e:	b25b      	sxtb	r3, r3
 8000890:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x04) * 12;
 8000892:	7b3b      	ldrb	r3, [r7, #12]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	b2db      	uxtb	r3, r3
 800089a:	461a      	mov	r2, r3
 800089c:	0052      	lsls	r2, r2, #1
 800089e:	4413      	add	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x08) * 24;
 80008b0:	7b3b      	ldrb	r3, [r7, #12]
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	461a      	mov	r2, r3
 80008ba:	0052      	lsls	r2, r2, #1
 80008bc:	4413      	add	r3, r2
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	b25a      	sxtb	r2, r3
 80008c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	73bb      	strb	r3, [r7, #14]

      lcdVideoBuffer[LcdCacheIdx]     = b;//копируем байты в экранный буфер
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <Lcd_ChrBold+0x188>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	4619      	mov	r1, r3
 80008d4:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <Lcd_ChrBold+0x18c>)
 80008d6:	7b7b      	ldrb	r3, [r7, #13]
 80008d8:	5453      	strb	r3, [r2, r1]
      lcdVideoBuffer[LcdCacheIdx+1]   = b;//дублируем для получения жирного шрифта
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <Lcd_ChrBold+0x188>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	3301      	adds	r3, #1
 80008e0:	491c      	ldr	r1, [pc, #112]	; (8000954 <Lcd_ChrBold+0x18c>)
 80008e2:	7b7a      	ldrb	r2, [r7, #13]
 80008e4:	54ca      	strb	r2, [r1, r3]
      lcdVideoBuffer[LcdCacheIdx+128] = a;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <Lcd_ChrBold+0x188>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	3380      	adds	r3, #128	; 0x80
 80008ec:	4919      	ldr	r1, [pc, #100]	; (8000954 <Lcd_ChrBold+0x18c>)
 80008ee:	7bba      	ldrb	r2, [r7, #14]
 80008f0:	54ca      	strb	r2, [r1, r3]
      lcdVideoBuffer[LcdCacheIdx+129] = a;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <Lcd_ChrBold+0x188>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	3381      	adds	r3, #129	; 0x81
 80008f8:	4916      	ldr	r1, [pc, #88]	; (8000954 <Lcd_ChrBold+0x18c>)
 80008fa:	7bba      	ldrb	r2, [r7, #14]
 80008fc:	54ca      	strb	r2, [r1, r3]
      LcdCacheIdx = LcdCacheIdx+2;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <Lcd_ChrBold+0x188>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	3302      	adds	r3, #2
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <Lcd_ChrBold+0x188>)
 8000908:	801a      	strh	r2, [r3, #0]
  for(i = 0; i < 5; i++)
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	3301      	adds	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	2b04      	cmp	r3, #4
 8000914:	f67f af65 	bls.w	80007e2 <Lcd_ChrBold+0x1a>
    }

  lcdVideoBuffer[LcdCacheIdx++] = 0x00;	//для пробела между символами
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <Lcd_ChrBold+0x188>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	b291      	uxth	r1, r2
 8000920:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <Lcd_ChrBold+0x188>)
 8000922:	8011      	strh	r1, [r2, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <Lcd_ChrBold+0x18c>)
 8000928:	2100      	movs	r1, #0
 800092a:	5499      	strb	r1, [r3, r2]
  lcdVideoBuffer[LcdCacheIdx++] = 0x00;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <Lcd_ChrBold+0x188>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	b291      	uxth	r1, r2
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <Lcd_ChrBold+0x188>)
 8000936:	8011      	strh	r1, [r2, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <Lcd_ChrBold+0x18c>)
 800093c:	2100      	movs	r1, #0
 800093e:	5499      	strb	r1, [r3, r2]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	08001c3c 	.word	0x08001c3c
 8000950:	20000450 	.word	0x20000450
 8000954:	20000050 	.word	0x20000050

08000958 <Lcd_ChrBig>:
		}
	ClearTextBuf();
}
//*****************************************************************************	
//Displays a character at current cursor location and increment cursor location
void Lcd_ChrBig (int ch){
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  
  unsigned char i;
  unsigned char a = 0, b = 0, c = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	73bb      	strb	r3, [r7, #14]
 8000964:	2300      	movs	r3, #0
 8000966:	737b      	strb	r3, [r7, #13]
 8000968:	2300      	movs	r3, #0
 800096a:	733b      	strb	r3, [r7, #12]
  //-------------------- 
  for ( i = 0; i < 5; i++ )
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e08a      	b.n	8000a88 <Lcd_ChrBig+0x130>
    {
      c = TabAscii[(ch*5+i)];		//выделяем столбец из символа
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	4613      	mov	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	441a      	add	r2, r3
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	4413      	add	r3, r2
 800097e:	4a4c      	ldr	r2, [pc, #304]	; (8000ab0 <Lcd_ChrBig+0x158>)
 8000980:	5cd3      	ldrb	r3, [r2, r3]
 8000982:	733b      	strb	r3, [r7, #12]

      b  = (c & 0x01) * 3;            //"растягиваем" столбец на два байта 
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	0052      	lsls	r2, r2, #1
 8000990:	4413      	add	r3, r2
 8000992:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x02) * 6;
 8000994:	7b3b      	ldrb	r3, [r7, #12]
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	b2db      	uxtb	r3, r3
 800099c:	461a      	mov	r2, r3
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	b25a      	sxtb	r2, r3
 80009a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x04) * 12;
 80009b2:	7b3b      	ldrb	r3, [r7, #12]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	0052      	lsls	r2, r2, #1
 80009be:	4413      	add	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	b25a      	sxtb	r2, r3
 80009c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x08) * 24;
 80009d0:	7b3b      	ldrb	r3, [r7, #12]
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	0052      	lsls	r2, r2, #1
 80009dc:	4413      	add	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	b25a      	sxtb	r2, r3
 80009e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	737b      	strb	r3, [r7, #13]

      c >>= 4;
 80009ee:	7b3b      	ldrb	r3, [r7, #12]
 80009f0:	091b      	lsrs	r3, r3, #4
 80009f2:	733b      	strb	r3, [r7, #12]
      a  = (c & 0x01) * 3;
 80009f4:	7b3b      	ldrb	r3, [r7, #12]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	461a      	mov	r2, r3
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x02) * 6;
 8000a04:	7b3b      	ldrb	r3, [r7, #12]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	0052      	lsls	r2, r2, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	b25a      	sxtb	r2, r3
 8000a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x04) * 12;
 8000a22:	7b3b      	ldrb	r3, [r7, #12]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	0052      	lsls	r2, r2, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	b25a      	sxtb	r2, r3
 8000a36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x08) * 24;
 8000a40:	7b3b      	ldrb	r3, [r7, #12]
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	461a      	mov	r2, r3
 8000a4a:	0052      	lsls	r2, r2, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	b25a      	sxtb	r2, r3
 8000a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	73bb      	strb	r3, [r7, #14]
      lcdVideoBuffer[LcdCacheIdx] = b;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <Lcd_ChrBig+0x15c>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	4619      	mov	r1, r3
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <Lcd_ChrBig+0x160>)
 8000a66:	7b7b      	ldrb	r3, [r7, #13]
 8000a68:	5453      	strb	r3, [r2, r1]
      lcdVideoBuffer[LcdCacheIdx+128] = a;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <Lcd_ChrBig+0x15c>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	3380      	adds	r3, #128	; 0x80
 8000a70:	4911      	ldr	r1, [pc, #68]	; (8000ab8 <Lcd_ChrBig+0x160>)
 8000a72:	7bba      	ldrb	r2, [r7, #14]
 8000a74:	54ca      	strb	r2, [r1, r3]
      LcdCacheIdx = LcdCacheIdx+1;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <Lcd_ChrBig+0x15c>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <Lcd_ChrBig+0x15c>)
 8000a80:	801a      	strh	r2, [r3, #0]
  for ( i = 0; i < 5; i++ )
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	3301      	adds	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	f67f af71 	bls.w	8000972 <Lcd_ChrBig+0x1a>
    }
  lcdVideoBuffer[LcdCacheIdx++] = 0x00;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <Lcd_ChrBig+0x15c>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	b291      	uxth	r1, r2
 8000a98:	4a06      	ldr	r2, [pc, #24]	; (8000ab4 <Lcd_ChrBig+0x15c>)
 8000a9a:	8011      	strh	r1, [r2, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <Lcd_ChrBig+0x160>)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	5499      	strb	r1, [r3, r2]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	08001c3c 	.word	0x08001c3c
 8000ab4:	20000450 	.word	0x20000450
 8000ab8:	20000050 	.word	0x20000050

08000abc <Lcd_Print>:
			if(lcdTextBuf[i]) Lcd_ChrBig(lcdTextBuf[i]);
		}
	ClearTextBuf();
}
//*****************************************************************************
uint8_t Lcd_Print(char *txt){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  
  uint8_t i = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
  //-------------------- 
  ClearTextBuf();
 8000ac8:	f7ff fda8 	bl	800061c <ClearTextBuf>
  while(*txt)
 8000acc:	e00a      	b.n	8000ae4 <Lcd_Print+0x28>
    {
      Lcd_Chr(*txt++);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe0b 	bl	80006f4 <Lcd_Chr>
      i++;  
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
  while(*txt)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1f0      	bne.n	8000ace <Lcd_Print+0x12>
    } 
  return i;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <Lcd_BinToDec>:
	  lcdVideoBuffer[i] = imageData[1023 - i];	//грузим данные
	  //lcdVideoBuffer[i] = imageData[i];	//грузим данные
    }
}
//*****************************************************************************
uint8_t Lcd_BinToDec(uint16_t var, uint8_t num, uint8_t charSize){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	460b      	mov	r3, r1
 8000b04:	717b      	strb	r3, [r7, #5]
 8000b06:	4613      	mov	r3, r2
 8000b08:	713b      	strb	r3, [r7, #4]

	uint8_t DecArray[5];
	uint8_t	temp;
	//--------------------
	if((var <= 0xFFFF) && (num <= 5))
 8000b0a:	797b      	ldrb	r3, [r7, #5]
 8000b0c:	2b05      	cmp	r3, #5
 8000b0e:	d876      	bhi.n	8000bfe <Lcd_BinToDec+0x106>
		{
		  DecArray[4] = (uint8_t)(var / 10000);
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4a3e      	ldr	r2, [pc, #248]	; (8000c0c <Lcd_BinToDec+0x114>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	0b5b      	lsrs	r3, r3, #13
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	733b      	strb	r3, [r7, #12]
		  var %= 10000;
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	4a3a      	ldr	r2, [pc, #232]	; (8000c0c <Lcd_BinToDec+0x114>)
 8000b24:	fba2 1203 	umull	r1, r2, r2, r3
 8000b28:	0b52      	lsrs	r2, r2, #13
 8000b2a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b2e:	fb01 f202 	mul.w	r2, r1, r2
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	80fb      	strh	r3, [r7, #6]

		  DecArray[3] = (uint8_t)(var / 1000);
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <Lcd_BinToDec+0x118>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	099b      	lsrs	r3, r3, #6
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	72fb      	strb	r3, [r7, #11]
		  var %= 1000;
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	4a31      	ldr	r2, [pc, #196]	; (8000c10 <Lcd_BinToDec+0x118>)
 8000b4a:	fba2 1203 	umull	r1, r2, r2, r3
 8000b4e:	0992      	lsrs	r2, r2, #6
 8000b50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b54:	fb01 f202 	mul.w	r2, r1, r2
 8000b58:	1a9b      	subs	r3, r3, r2
 8000b5a:	80fb      	strh	r3, [r7, #6]

		  DecArray[2] = (uint8_t)(var / 100);
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	4a2d      	ldr	r2, [pc, #180]	; (8000c14 <Lcd_BinToDec+0x11c>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	095b      	lsrs	r3, r3, #5
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	72bb      	strb	r3, [r7, #10]
		  var %= 100;
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <Lcd_BinToDec+0x11c>)
 8000b70:	fba2 1203 	umull	r1, r2, r2, r3
 8000b74:	0952      	lsrs	r2, r2, #5
 8000b76:	2164      	movs	r1, #100	; 0x64
 8000b78:	fb01 f202 	mul.w	r2, r1, r2
 8000b7c:	1a9b      	subs	r3, r3, r2
 8000b7e:	80fb      	strh	r3, [r7, #6]

		  DecArray[1] = (uint8_t)(var / 10);
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <Lcd_BinToDec+0x120>)
 8000b84:	fba2 2303 	umull	r2, r3, r2, r3
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	727b      	strb	r3, [r7, #9]
		  DecArray[0] = (uint8_t)(var % 10);
 8000b90:	88fa      	ldrh	r2, [r7, #6]
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <Lcd_BinToDec+0x120>)
 8000b94:	fba3 1302 	umull	r1, r3, r3, r2
 8000b98:	08d9      	lsrs	r1, r3, #3
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	723b      	strb	r3, [r7, #8]
		  //--------------------
		  //Вывод на дисплей
		  for(uint8_t i=0; i < num; i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e022      	b.n	8000bf6 <Lcd_BinToDec+0xfe>
			{
			  temp = 0x30 + DecArray[(num - 1) - i];
 8000bb0:	797b      	ldrb	r3, [r7, #5]
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	f107 0210 	add.w	r2, r7, #16
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000bc2:	3330      	adds	r3, #48	; 0x30
 8000bc4:	73bb      	strb	r3, [r7, #14]

				   if(charSize == LCD_CHAR_SIZE_BIG) Lcd_ChrBig(temp);
 8000bc6:	793b      	ldrb	r3, [r7, #4]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d104      	bne.n	8000bd6 <Lcd_BinToDec+0xde>
 8000bcc:	7bbb      	ldrb	r3, [r7, #14]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fec2 	bl	8000958 <Lcd_ChrBig>
 8000bd4:	e00c      	b.n	8000bf0 <Lcd_BinToDec+0xf8>
			  else if(charSize == LCD_CHAR_SIZE_BOLD)Lcd_ChrBold(temp);
 8000bd6:	793b      	ldrb	r3, [r7, #4]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d104      	bne.n	8000be6 <Lcd_BinToDec+0xee>
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fdf2 	bl	80007c8 <Lcd_ChrBold>
 8000be4:	e004      	b.n	8000bf0 <Lcd_BinToDec+0xf8>
			  else					     			 Lcd_Chr(temp);
 8000be6:	7bbb      	ldrb	r3, [r7, #14]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fd82 	bl	80006f4 <Lcd_Chr>
		  for(uint8_t i=0; i < num; i++)
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	7bfa      	ldrb	r2, [r7, #15]
 8000bf8:	797b      	ldrb	r3, [r7, #5]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d3d8      	bcc.n	8000bb0 <Lcd_BinToDec+0xb8>
			}
		}
	return num+1;
 8000bfe:	797b      	ldrb	r3, [r7, #5]
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2db      	uxtb	r3, r3
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	d1b71759 	.word	0xd1b71759
 8000c10:	10624dd3 	.word	0x10624dd3
 8000c14:	51eb851f 	.word	0x51eb851f
 8000c18:	cccccccd 	.word	0xcccccccd

08000c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <SystemInit+0x5c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <SystemInit+0x5c>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <SystemInit+0x5c>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4911      	ldr	r1, [pc, #68]	; (8000c78 <SystemInit+0x5c>)
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <SystemInit+0x60>)
 8000c34:	4013      	ands	r3, r2
 8000c36:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <SystemInit+0x5c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <SystemInit+0x5c>)
 8000c3e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c46:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <SystemInit+0x5c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <SystemInit+0x5c>)
 8000c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c52:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <SystemInit+0x5c>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <SystemInit+0x5c>)
 8000c5a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c5e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <SystemInit+0x5c>)
 8000c62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c66:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SystemInit+0x64>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	f8ff0000 	.word	0xf8ff0000
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <Gpio_Init>:
static volatile uint16_t GpioAState = 0; //
static volatile uint16_t GpioBState = 0; //
static volatile uint16_t GpioCState = 0; //
//-----------------------------------------------------------------------------
//Инициализация переферии.
void Gpio_Init (void){
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  
  //Включаем тактирование порта A, B, C, D и модуля альтернативных функций.
  RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN |
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <Gpio_Init+0x54>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <Gpio_Init+0x54>)
 8000c8e:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 8000c92:	6193      	str	r3, [r2, #24]
                   RCC_APB2ENR_IOPBEN |
                   RCC_APB2ENR_IOPCEN |
                   RCC_APB2ENR_IOPDEN |
                   RCC_APB2ENR_AFIOEN);
  //Отключение JTAG-D от порта PA15, отладка через SWD активна.
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE; 
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <Gpio_Init+0x58>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <Gpio_Init+0x58>)
 8000c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9e:	6053      	str	r3, [r2, #4]
  //RCC->CFGR |= RCC_CFGR_MCO_HSI;   //Подключение к выводу PA8 частоту HSI.
  //RCC->CFGR |= RCC_CFGR_MCO_HSE;      //Подключение к выводу PA8 частоту HSE.
  //RCC->CFGR |= RCC_CFGR_MCO_PLL;   //Подключение к выводу PA8 частоту PLL/2. 
  //--------------------
  //PC13 - Led.
  GPIOC->CRH &= ~GPIO_CRH_CNF13;//выход, режим - push-pull.
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <Gpio_Init+0x5c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <Gpio_Init+0x5c>)
 8000ca6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000caa:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= GPIO_CRH_MODE13;//тактирование 50МГц.
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <Gpio_Init+0x5c>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <Gpio_Init+0x5c>)
 8000cb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000cb6:	6053      	str	r3, [r2, #4]

  //--------------------
  //PA6 - Led.
  //PA7 - Led.
  GPIOA->CRL &= ~(GPIO_CRL_CNF6  | GPIO_CRL_CNF7); //выход, режим - push-pull.
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <Gpio_Init+0x60>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <Gpio_Init+0x60>)
 8000cbe:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000cc2:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |=  (GPIO_CRL_MODE6 | GPIO_CRL_MODE7); //PA7(LC2_SOST_Red) - тактирование 50МГц.
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <Gpio_Init+0x60>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <Gpio_Init+0x60>)
 8000cca:	f043 534c 	orr.w	r3, r3, #855638016	; 0x33000000
 8000cce:	6013      	str	r3, [r2, #0]
                  GPIO_CRH_MODE12 );//тактирование 50МГц.
  GPIOD->CRL |= ( GPIO_CRL_MODE2  );
	//--------------------
	 *
	 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <I2C_Init>:
static uint8_t   I2C_Mode;

//static uint8_t  i2cState = I2C_STATE_IDLE;
//*******************************************************************************************
//*******************************************************************************************
void I2C_Init(I2C_TypeDef *i2c){
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;//Включаем тактирование GPIOB
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <I2C_Init+0xc0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a2c      	ldr	r2, [pc, #176]	; (8000da8 <I2C_Init+0xc0>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	6193      	str	r3, [r2, #24]
	//------------------------------
	//Тактирование I2C_1
	if(i2c == I2C1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a2b      	ldr	r2, [pc, #172]	; (8000dac <I2C_Init+0xc4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d10b      	bne.n	8000d1c <I2C_Init+0x34>
		{
			RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000d04:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <I2C_Init+0xc0>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	4a27      	ldr	r2, [pc, #156]	; (8000da8 <I2C_Init+0xc0>)
 8000d0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0e:	61d3      	str	r3, [r2, #28]
			//Инициализация портов.
			//I2C1_SCL - PB6
			//I2C1_SDA - PB7
			GPIOB->CRL |= GPIO_CRL_MODE6_1 | GPIO_CRL_MODE7_1 |
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <I2C_Init+0xc8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <I2C_Init+0xc8>)
 8000d16:	f043 436e 	orr.w	r3, r3, #3992977408	; 0xee000000
 8000d1a:	6013      	str	r3, [r2, #0]
					      GPIO_CRL_CNF6    | GPIO_CRL_CNF7;
		}
	//------------------------------
	//Тактирование I2C_2
	if(i2c == I2C2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a25      	ldr	r2, [pc, #148]	; (8000db4 <I2C_Init+0xcc>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d10b      	bne.n	8000d3c <I2C_Init+0x54>
		{
			RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000d24:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <I2C_Init+0xc0>)
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <I2C_Init+0xc0>)
 8000d2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d2e:	61d3      	str	r3, [r2, #28]
			//Инициализация портов.
			//I2C2_SCL - PB10
			//I2C2_SDA - PB11
			GPIOB->CRH |= GPIO_CRH_MODE10_1 | GPIO_CRH_MODE11_1 |
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <I2C_Init+0xc8>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <I2C_Init+0xc8>)
 8000d36:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
 8000d3a:	6053      	str	r3, [r2, #4]
						  GPIO_CRH_CNF10    | GPIO_CRH_CNF11;
		}
	//------------------------------
	//Инициализация I2C.
	i2c->CR2  &= ~I2C_CR2_FREQ;   //
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	605a      	str	r2, [r3, #4]
	i2c->CR2  |=  36;//I2C_CR2_VALUE;  //APB1 = 36MHz
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	605a      	str	r2, [r3, #4]
	i2c->CCR  &= ~I2C_CCR_CCR;    //
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d5c:	f023 030f 	bic.w	r3, r3, #15
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	61d3      	str	r3, [r2, #28]

	//i2c->CCR   =  120;//100кГц
	i2c->CCR   =  30; //400кГц  45;//I2C_CCR_VALUE;  //(36MHz/I2C_BAUD_RATE/2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	221e      	movs	r2, #30
 8000d68:	61da      	str	r2, [r3, #28]

	i2c->CCR  |=  I2C_CCR_FS;     //1 - режим FastMode(400kHz), 0 - режим STANDART(100kHz).
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	61da      	str	r2, [r3, #28]
	i2c->TRISE =  12;//37;//I2C_TRISE_VALUE;//(1mcs/(1/36MHz)+1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	220c      	movs	r2, #12
 8000d7a:	621a      	str	r2, [r3, #32]
	i2c->CR1  |=  I2C_CR1_PE;     //Включение модуля I2C1.
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f043 0201 	orr.w	r2, r3, #1
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 255; i++){__NOP();};
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e003      	b.n	8000d96 <I2C_Init+0xae>
 8000d8e:	bf00      	nop
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	3301      	adds	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2bff      	cmp	r3, #255	; 0xff
 8000d9a:	d1f8      	bne.n	8000d8e <I2C_Init+0xa6>
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40005400 	.word	0x40005400
 8000db0:	40010c00 	.word	0x40010c00
 8000db4:	40005800 	.word	0x40005800

08000db8 <I2C_Write>:
	while(!(i2c->SR1 & I2C_SR1_BTF));//Ждем окончания передачи
	i2c->CR1 |= I2C_CR1_STOP;		 //Формируем Stop
}
//*******************************************************************************************
//*******************************************************************************************
void I2C_Write(I2C_TypeDef *i2c, uint8_t deviceAddr, uint8_t regAddr, uint8_t *pBuf, uint16_t len){
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	72fb      	strb	r3, [r7, #11]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	72bb      	strb	r3, [r7, #10]

	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_SR1_SB)){};//Ожидание формирования Start condition.
 8000dd6:	bf00      	nop
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f9      	beq.n	8000dd8 <I2C_Write+0x20>
	(void)i2c->SR1;				      //Для сброса флага SB необходимо прочитать SR1
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес slave + Запись.
	i2c->DR = deviceAddr | I2C_MODE_WRITE;
 8000de8:	7afa      	ldrb	r2, [r7, #11]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_ADDR)){};//Ожидаем окончания передачи адреса и
 8000dee:	bf00      	nop
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f9      	beq.n	8000df0 <I2C_Write+0x38>
	(void)i2c->SR1;				        //сбрасываем бит ADDR (чтением SR1 и SR2):
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;				        //
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	699b      	ldr	r3, [r3, #24]
	//Передача адреса в который хотим записать.
	i2c->DR = regAddr;
 8000e04:	7aba      	ldrb	r2, [r7, #10]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_TXE)){};
 8000e0a:	bf00      	nop
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f9      	beq.n	8000e0c <I2C_Write+0x54>
	//передача данных на запись.
	for(uint16_t i = 0; i < len; i++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	82fb      	strh	r3, [r7, #22]
 8000e1c:	e010      	b.n	8000e40 <I2C_Write+0x88>
		{
			i2c->DR = *(pBuf + i);
 8000e1e:	8afb      	ldrh	r3, [r7, #22]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	4413      	add	r3, r2
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
			while(!(i2c->SR1 & I2C_SR1_TXE));//Ждем освобождения буфера
 8000e2c:	bf00      	nop
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f9      	beq.n	8000e2e <I2C_Write+0x76>
	for(uint16_t i = 0; i < len; i++)
 8000e3a:	8afb      	ldrh	r3, [r7, #22]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	82fb      	strh	r3, [r7, #22]
 8000e40:	8afa      	ldrh	r2, [r7, #22]
 8000e42:	8c3b      	ldrh	r3, [r7, #32]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d3ea      	bcc.n	8000e1e <I2C_Write+0x66>
		}

//	while(!(i2c->SR1 & I2C_SR1_BTF));//Ждем окончания передачи
	i2c->CR1 |= I2C_CR1_STOP;		 //Формируем Stop
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	601a      	str	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <I2C_Read>:
//**********************************************************
void I2C_Read(I2C_TypeDef *i2c, uint8_t deviceAddr, uint8_t regAddr, uint8_t *pBuf, uint16_t len){
 8000e5e:	b480      	push	{r7}
 8000e60:	b087      	sub	sp, #28
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	72fb      	strb	r3, [r7, #11]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	72bb      	strb	r3, [r7, #10]

	//---------------------------------
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_SR1_SB)){};//Ожидание формирования Start condition.
 8000e7c:	bf00      	nop
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f9      	beq.n	8000e7e <I2C_Read+0x20>
	(void)i2c->SR1;				      //Для сброса флага SB необходимо прочитать SR1
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес slave + Запись.
	i2c->DR = deviceAddr | I2C_MODE_WRITE;
 8000e8e:	7afa      	ldrb	r2, [r7, #11]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_ADDR)){};//Ожидаем окончания передачи адреса и
 8000e94:	bf00      	nop
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f9      	beq.n	8000e96 <I2C_Read+0x38>
	(void)i2c->SR1;				        //сбрасываем бит ADDR (чтением SR1 и SR2):
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;				        //
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	699b      	ldr	r3, [r3, #24]
	//Передача адреса с которого начинаем чтение.
	i2c->DR = regAddr;
 8000eaa:	7aba      	ldrb	r2, [r7, #10]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8000eb0:	bf00      	nop
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f9      	beq.n	8000eb2 <I2C_Read+0x54>
	//---------------------------------
	//Формирование reStart condition.
	i2c->CR1 |= I2C_CR1_STOP;		//Это команда нужня для работы с DS2782. Без нее не работает
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	601a      	str	r2, [r3, #0]
	i2c->CR1 |= I2C_CR1_START;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	601a      	str	r2, [r3, #0]

	while(!(i2c->SR1 & I2C_SR1_SB)){};//Ожидание формирования Start condition.
 8000ed6:	bf00      	nop
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f9      	beq.n	8000ed8 <I2C_Read+0x7a>
	(void)i2c->SR1;				      //Для сброса флага SB необходимо прочитать SR1
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес slave + Чтение.
	i2c->DR = deviceAddr | I2C_MODE_READ;
 8000ee8:	7afb      	ldrb	r3, [r7, #11]
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_ADDR)){};//Ожидаем окончания передачи адреса и
 8000ef6:	bf00      	nop
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f9      	beq.n	8000ef8 <I2C_Read+0x9a>
	(void)i2c->SR1;				        //сбрасываем бит ADDR (чтением SR1 и SR2):
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;				        //
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	699b      	ldr	r3, [r3, #24]
	//прием даннных
	if(len == 1)
 8000f0c:	8c3b      	ldrh	r3, [r7, #32]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d111      	bne.n	8000f36 <I2C_Read+0xd8>
		{
			i2c->CR1 &= ~I2C_CR1_ACK;           //Фомирование NACK после приема последнего байта.
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	601a      	str	r2, [r3, #0]
			//while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
			*(pBuf + 0) = i2c->DR;				//считали принятый байт.
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	701a      	strb	r2, [r3, #0]
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	601a      	str	r2, [r3, #0]
			while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
			*(pBuf + len - 1) = i2c->DR;		//считали принятый байт.
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
		}
	//---------------------------------
}
 8000f34:	e039      	b.n	8000faa <I2C_Read+0x14c>
			for(uint16_t i = 0; i < (len-1); i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	82fb      	strh	r3, [r7, #22]
 8000f3a:	e016      	b.n	8000f6a <I2C_Read+0x10c>
					i2c->CR1 |= I2C_CR1_ACK; 			//Фомирование ACK после приема байта
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	601a      	str	r2, [r3, #0]
					while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
 8000f48:	bf00      	nop
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f9      	beq.n	8000f4a <I2C_Read+0xec>
					*(pBuf + i) = i2c->DR;			    //считали принятый
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6919      	ldr	r1, [r3, #16]
 8000f5a:	8afb      	ldrh	r3, [r7, #22]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	b2ca      	uxtb	r2, r1
 8000f62:	701a      	strb	r2, [r3, #0]
			for(uint16_t i = 0; i < (len-1); i++)
 8000f64:	8afb      	ldrh	r3, [r7, #22]
 8000f66:	3301      	adds	r3, #1
 8000f68:	82fb      	strh	r3, [r7, #22]
 8000f6a:	8afa      	ldrh	r2, [r7, #22]
 8000f6c:	8c3b      	ldrh	r3, [r7, #32]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbe3      	blt.n	8000f3c <I2C_Read+0xde>
			i2c->CR1 &= ~I2C_CR1_ACK;           //Фомирование NACK после приема последнего байта.
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	601a      	str	r2, [r3, #0]
			while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
 8000f80:	bf00      	nop
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f9      	beq.n	8000f82 <I2C_Read+0x124>
			*(pBuf + len - 1) = i2c->DR;		//считали принятый байт.
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6919      	ldr	r1, [r3, #16]
 8000f92:	8c3b      	ldrh	r3, [r7, #32]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	601a      	str	r2, [r3, #0]
}
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <I2C_Int_Handler>:
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
}
//*******************************************************************************************
//*******************************************************************************************
static void I2C_Int_Handler(I2C_TypeDef *i2c, uint8_t slaveAddr){
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t sr1 = i2c->SR1;//Чтениех этих регистров сбрасывает флаги событий I2C.
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	60fb      	str	r3, [r7, #12]
	//volatile uint32_t sr2 = i2c->SR2;
	//---------------------
	//Start condition generated. Clear: read SR1, write to DR
	if(sr1 & I2C_SR1_SB)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d008      	beq.n	8000fe2 <I2C_Int_Handler+0x2e>
		{
		  i2c->DR = I2C_ADDRESS(slaveAddr, I2C_Mode);
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <I2C_Int_Handler+0xbc>)
 8000fd6:	7812      	ldrb	r2, [r2, #0]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	611a      	str	r2, [r3, #16]
		  return;
 8000fe0:	e042      	b.n	8001068 <I2C_Int_Handler+0xb4>
		}
	//Address sent. Clear: read SR1, read SR2
	else if(sr1 & I2C_SR1_ADDR)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d010      	beq.n	800100e <I2C_Int_Handler+0x5a>
	   {
	      if(I2C_Mode == I2C_MODE_WRITE)
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <I2C_Int_Handler+0xbc>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d136      	bne.n	8001062 <I2C_Int_Handler+0xae>
			  {
	    	  	  i2c->DR = I2C_pBuf[0];
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <I2C_Int_Handler+0xc0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	611a      	str	r2, [r3, #16]
	    	  	  I2C_TxCnt++;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <I2C_Int_Handler+0xc4>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <I2C_Int_Handler+0xc4>)
 800100a:	801a      	strh	r2, [r3, #0]
//						// не дописано! не использовать
//						I2C_NUMB->DR = (uint8_t)AddrReg;            // First byte
//						AddrReg>>=8;
//					 }
//			  }
	      return;
 800100c:	e029      	b.n	8001062 <I2C_Int_Handler+0xae>
//	else if(sr1 & I2C_SR1_AF)
//		{
//			I2C_TxCnt++;
//		}
	//Data Register Empty (transmitters).
	else if(sr1 & I2C_SR1_TXE)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01f      	beq.n	8001058 <I2C_Int_Handler+0xa4>
		{
			i2c->DR = I2C_pBuf[I2C_TxCnt];
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <I2C_Int_Handler+0xc0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a16      	ldr	r2, [pc, #88]	; (8001078 <I2C_Int_Handler+0xc4>)
 800101e:	8812      	ldrh	r2, [r2, #0]
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	611a      	str	r2, [r3, #16]
			I2C_TxCnt++;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <I2C_Int_Handler+0xc4>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	b29a      	uxth	r2, r3
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <I2C_Int_Handler+0xc4>)
 8001034:	801a      	strh	r2, [r3, #0]
			if(I2C_TxCnt >= I2C_TxSize)
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <I2C_Int_Handler+0xc8>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <I2C_Int_Handler+0xc4>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d810      	bhi.n	8001066 <I2C_Int_Handler+0xb2>
				{
					I2C_TxCnt = 0;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <I2C_Int_Handler+0xc4>)
 8001046:	2200      	movs	r2, #0
 8001048:	801a      	strh	r2, [r3, #0]
					i2c->CR1 |= I2C_CR1_STOP;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
				}
			return;
 8001056:	e006      	b.n	8001066 <I2C_Int_Handler+0xb2>
		}
	//Byte Transfer Finished.
	else if(sr1 & I2C_SR1_BTF)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	2b00      	cmp	r3, #0
 8001060:	e002      	b.n	8001068 <I2C_Int_Handler+0xb4>
	      return;
 8001062:	bf00      	nop
 8001064:	e000      	b.n	8001068 <I2C_Int_Handler+0xb4>
			return;
 8001066:	bf00      	nop
//	if(sr1 & I2C_SR1_TXE)
//		{
//			if(TxCounter < I2C_TxSize) i2c->DR   = I2C_pBuf[TxCounter++];
//			else		               i2c->CR1 |= I2C_CR1_STOP;
//		}
}
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	2000045d 	.word	0x2000045d
 8001074:	20000458 	.word	0x20000458
 8001078:	20000452 	.word	0x20000452
 800107c:	2000045c 	.word	0x2000045c

08001080 <I2C1_EV_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание I2C1.
void I2C1_EV_IRQHandler(void){
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

//	I2C_handler(I2C1, addr);
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <I2C2_EV_IRQHandler>:
//**********************************************************
//Прерывание I2C2.
void I2C2_EV_IRQHandler(void){
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

	I2C_Int_Handler(I2C2, I2C_SlaveAddr);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <I2C2_EV_IRQHandler+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <I2C2_EV_IRQHandler+0x24>)
 8001098:	f7ff ff8c 	bl	8000fb4 <I2C_Int_Handler>
	LedPA7_Toggel();
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <I2C2_EV_IRQHandler+0x28>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <I2C2_EV_IRQHandler+0x28>)
 80010a2:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000454 	.word	0x20000454
 80010b0:	40005800 	.word	0x40005800
 80010b4:	40010800 	.word	0x40010800

080010b8 <SPI2_IRQHandler>:
	//--------------------
	return (uint8_t)SPI2->DR;
} 
//-----------------------------------------------------------------------------
//Прерываени от SPI2.
void SPI2_IRQHandler(void){
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  
  //uint16_t tmp;
  //--------------------
  //причина прерывания - окончание передачи байта
  if(SPI2->SR & SPI_SR_TXE)
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <SPI2_IRQHandler+0x34>)
 80010be:	689b      	ldr	r3, [r3, #8]

      //LC2SostGreenLedToggel;//Мигаем для отладки          
    }
  //--------------------
  //причина прерывания - принят байт данных
  if(SPI2->SR &= SPI_SR_RXNE)
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <SPI2_IRQHandler+0x34>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a09      	ldr	r2, [pc, #36]	; (80010ec <SPI2_IRQHandler+0x34>)
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	6093      	str	r3, [r2, #8]
      //tmp = SPI1->DR;                //прочитать принятые данные
      //выполняем какие-то действия      
    }
  //--------------------
  //причина прерывания - ошибка режима ведущего
  if(SPI2->SR &= SPI_SR_MODF)
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <SPI2_IRQHandler+0x34>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <SPI2_IRQHandler+0x34>)
 80010d2:	f003 0320 	and.w	r3, r3, #32
 80010d6:	6093      	str	r3, [r2, #8]
    {
      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
    }
  //--------------------
  //причина прерывания - переполнение приемника данных
  if(SPI2->SR &= SPI_SR_OVR)
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SPI2_IRQHandler+0x34>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a03      	ldr	r2, [pc, #12]	; (80010ec <SPI2_IRQHandler+0x34>)
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	6093      	str	r3, [r2, #8]
//  if(SPI2->SR &= SSPI_SR_CRCERR)
//    {
//      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
//    }
  //--------------------
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	40003800 	.word	0x40003800

080010f0 <Init_RCC>:
#include "sys_ST.h"

//**********************************************************************************************
//**********************************************************************************************
//Настройка тактирования 72МГц. Внешний кварц 8 МГц.
static uint32_t Init_RCC(void){
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
	
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
	//--------------------
	//SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/        
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);//Enable HSE.
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <Init_RCC+0xf8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <Init_RCC+0xf8>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready and if Time out is reached exit */
	do{
			HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <Init_RCC+0xf8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	603b      	str	r3, [r7, #0]
			StartUpCounter++;  
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3301      	adds	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
	  }
	while((HSEStatus == 0) && (StartUpCounter != 0xFFFF));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d104      	bne.n	800112a <Init_RCC+0x3a>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001126:	4293      	cmp	r3, r2
 8001128:	d1ef      	bne.n	800110a <Init_RCC+0x1a>
	//--------------------
	if ((RCC->CR & RCC_CR_HSERDY) != 0) HSEStatus = (uint32_t)0x01;
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <Init_RCC+0xf8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <Init_RCC+0x4c>
 8001136:	2301      	movs	r3, #1
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	e001      	b.n	8001140 <Init_RCC+0x50>
	else                                HSEStatus = (uint32_t)0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	603b      	str	r3, [r7, #0]
	//--------------------
	if(HSEStatus == (uint32_t)0x01)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d149      	bne.n	80011da <Init_RCC+0xea>
		{
			/* Enable Prefetch Buffer */
			FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <Init_RCC+0xfc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a28      	ldr	r2, [pc, #160]	; (80011ec <Init_RCC+0xfc>)
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	6013      	str	r3, [r2, #0]
			/* Flash 2 wait state */
			FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <Init_RCC+0xfc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a25      	ldr	r2, [pc, #148]	; (80011ec <Init_RCC+0xfc>)
 8001158:	f023 0307 	bic.w	r3, r3, #7
 800115c:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;  
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <Init_RCC+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <Init_RCC+0xfc>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6013      	str	r3, [r2, #0]
			//--------------------
			//Настройка тактирования шин AHB, APB1 и APB2.
			RCC->CFGR |= (uint32_t)(RCC_CFGR_HPRE_DIV1  | // AHB prescaler. SYSCLK not divided
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <Init_RCC+0xf8>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <Init_RCC+0xf8>)
 8001170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001174:	6053      	str	r3, [r2, #4]
									RCC_CFGR_PPRE2_DIV1 | // APB2 = AHB. APB2 Fmax = 72MHz.
									RCC_CFGR_PPRE1_DIV2); // APB1 = (AHB / 2). APB1 Fmax = 36MHz.

			//--------------------
			//PLL configuration: = HSE * 9 = 72 MHz */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <Init_RCC+0xf8>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <Init_RCC+0xf8>)
 800117c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001180:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_Msk        |  // HSE oscillator clock selected as PLL input clock
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <Init_RCC+0xf8>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <Init_RCC+0xf8>)
 8001188:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800118c:	6053      	str	r3, [r2, #4]
															//RCC_CFGR_PLLXTPRE_HSE_Div2 |  // HSE clock divided by 2                                
															RCC_CFGR_PLLMULL9);
			/* Enable PLL */
			RCC->CR |= RCC_CR_PLLON;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <Init_RCC+0xf8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <Init_RCC+0xf8>)
 8001194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001198:	6013      	str	r3, [r2, #0]
			/* Wait till PLL is ready */
			while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 800119a:	bf00      	nop
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <Init_RCC+0xf8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f9      	beq.n	800119c <Init_RCC+0xac>
			/* Select PLL as system clock source */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <Init_RCC+0xf8>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <Init_RCC+0xf8>)
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <Init_RCC+0xf8>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <Init_RCC+0xf8>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	6053      	str	r3, [r2, #4]
			/* Wait till PLL is used as system clock source */
			while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)  {}        
 80011c0:	bf00      	nop
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <Init_RCC+0xf8>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d1f9      	bne.n	80011c2 <Init_RCC+0xd2>
			RCC->CR |= RCC_CR_CSSON; //Включаем защиту HSE от сбоев - CSS.
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <Init_RCC+0xf8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <Init_RCC+0xf8>)
 80011d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011d8:	6013      	str	r3, [r2, #0]
	else
		{
				/* If HSE fails to start-up, the application will have wrong clock 
				 configuration. User can add here some code to deal with this error */
		} 
	return HSEStatus;
 80011da:	683b      	ldr	r3, [r7, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40022000 	.word	0x40022000

080011f0 <Sys_Init>:
//*****************************************************************************
void Sys_Init(void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	
  //Reset the RCC clock configuration to the default reset state(for debug purpose).
  RCC->CR 	|= (uint32_t)0x00000001;	/* Set HSION bit */
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <Sys_Init+0x54>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <Sys_Init+0x54>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF0FF0000;	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <Sys_Init+0x54>)
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	490f      	ldr	r1, [pc, #60]	; (8001244 <Sys_Init+0x54>)
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <Sys_Init+0x58>)
 8001208:	4013      	ands	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
  RCC->CR 	&= (uint32_t)0xFEF6FFFF;  /* Reset HSEON, CSSON and PLLON bits */
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <Sys_Init+0x54>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <Sys_Init+0x54>)
 8001212:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121a:	6013      	str	r3, [r2, #0]
  RCC->CR 	&= (uint32_t)0xFFFBFFFF;  /* Reset HSEBYP bit */
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <Sys_Init+0x54>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a08      	ldr	r2, [pc, #32]	; (8001244 <Sys_Init+0x54>)
 8001222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001226:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <Sys_Init+0x54>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a05      	ldr	r2, [pc, #20]	; (8001244 <Sys_Init+0x54>)
 800122e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001232:	6053      	str	r3, [r2, #4]
  RCC->CIR 	 = 0x009F0000;  				  /* Disable all interrupts and clear pending bits  */
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <Sys_Init+0x54>)
 8001236:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800123a:	609a      	str	r2, [r3, #8]
  //RCC->CFGR2 = 0x00000000;      			/* Reset CFGR2 register */  
	
  Init_RCC();//Настройка тактирования микроконтроллера. Внешний кварц 8 МГц.
 800123c:	f7ff ff58 	bl	80010f0 <Init_RCC>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	f0ff0000 	.word	0xf0ff0000

0800124c <NMI_Handler>:
	return (*(__IO uint32_t*)address);
}
//**********************************************************************************************
//**********************************************************************************************
//Прерываени блока CSS. Возникает при сбое тактирования HSE.
void NMI_Handler( void){
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  //RCC->CIR |= RCC_CIR_CSSC;//Очищаем флаг прерывания CSS иначе прерывание будет генерироваться бесконечно.
	//NVIC_SystemReset();
  //LC1SostRedLedOn;
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <HardFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void HardFault_Handler( void){
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
//  if(SCB->HFSR & SCB_HFSR_FORCED)   LC1SostRedLedOn();
//  if(SCB->HFSR & SCB_HFSR_DEBUGEVT) LC2SostRedLedOn();
	
//	LC1SostRedLedOn();
//	LC2SostRedLedOn();
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <MemManage_Handler>:
//*****************************************************************************
//*****************************************************************************
void MemManage_Handler( void){
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

//  LC2SostRedLedOn();
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <BusFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void BusFault_Handler( void){
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

//  LC2SostGreenLedOn();
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <UsageFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void UsageFault_Handler( void){
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <SVC_Handler>:
//*****************************************************************************
//*****************************************************************************
void SVC_Handler( void){
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <SysTick_Init>:

#include "sys_tick_ST.h"

//-----------------------------------------------------------------------------
//Инициализация системного таймера SysTick.
void SysTick_Init(void){
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

	SysTick->LOAD = TimerTick;	//Загрузка значения.
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <SysTick_Init+0x20>)
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <SysTick_Init+0x24>)
 800129c:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = TimerTick;	//Обнуление таймера. 
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Init+0x20>)
 80012a0:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <SysTick_Init+0x24>)
 80012a2:	609a      	str	r2, [r3, #8]
                              //При записи любого значения этот регист обнуляется, с обнулением флага COUNTFLAG. 
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | //Тактирование частотой процессора (24МГц).
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <SysTick_Init+0x20>)
 80012a6:	2207      	movs	r2, #7
 80012a8:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk   | //Рразрешение прерывания.
					SysTick_CTRL_ENABLE_Msk;     //Резрешение таймеру считать.
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010
 80012b8:	0001193f 	.word	0x0001193f

080012bc <IncrementOnEachPass>:
//---------------------------
static uint32_t secCounter  = 0;
//static uint16_t Temperature = 0;
//*******************************************************************************************
//*******************************************************************************************
void IncrementOnEachPass(uint32_t *var, uint16_t event){
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]

		   uint16_t riseReg  = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	81fb      	strh	r3, [r7, #14]
	static uint16_t oldState = 0;
	//-------------------
	riseReg  = (oldState ^ event) & event;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <IncrementOnEachPass+0x40>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4013      	ands	r3, r2
 80012d8:	81fb      	strh	r3, [r7, #14]
	oldState = event;
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <IncrementOnEachPass+0x40>)
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	8013      	strh	r3, [r2, #0]
	if(riseReg) (*var)++;
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <IncrementOnEachPass+0x34>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000468 	.word	0x20000468

08001300 <Time_Calculation>:
//************************************************************
void Time_Calculation(uint32_t count){
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

	Time.hour =  count / 3600;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <Time_Calculation+0x60>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	0adb      	lsrs	r3, r3, #11
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <Time_Calculation+0x64>)
 8001316:	701a      	strb	r2, [r3, #0]
	Time.min  = (count % 3600) / 60;
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <Time_Calculation+0x60>)
 800131c:	fba3 1302 	umull	r1, r3, r3, r2
 8001320:	0adb      	lsrs	r3, r3, #11
 8001322:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <Time_Calculation+0x68>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <Time_Calculation+0x64>)
 8001338:	705a      	strb	r2, [r3, #1]
	Time.sec  =  count % 60;
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <Time_Calculation+0x68>)
 800133e:	fba3 2301 	umull	r2, r3, r3, r1
 8001342:	095a      	lsrs	r2, r3, #5
 8001344:	4613      	mov	r3, r2
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	1aca      	subs	r2, r1, r3
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <Time_Calculation+0x64>)
 8001352:	709a      	strb	r2, [r3, #2]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	91a2b3c5 	.word	0x91a2b3c5
 8001364:	20000460 	.word	0x20000460
 8001368:	88888889 	.word	0x88888889

0800136c <Led_Blink>:
//************************************************************
void Led_Blink(void){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

	if(Blink(INTERVAL_100_mS)) LedPC13On();
 8001370:	2001      	movs	r0, #1
 8001372:	f7fe ff7f 	bl	8000274 <Blink>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <Led_Blink+0x1a>
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <Led_Blink+0x28>)
 800137e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001382:	611a      	str	r2, [r3, #16]
	else					   LedPC13Off();

}
 8001384:	e003      	b.n	800138e <Led_Blink+0x22>
	else					   LedPC13Off();
 8001386:	4b03      	ldr	r3, [pc, #12]	; (8001394 <Led_Blink+0x28>)
 8001388:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800138c:	611a      	str	r2, [r3, #16]
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40011000 	.word	0x40011000

08001398 <Temperature_Get>:
//************************************************************
void Temperature_Get(uint16_t *pData){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

	if(FlagsStr.DS18B20 == 1)
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <Temperature_Get+0x38>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00c      	beq.n	80013c8 <Temperature_Get+0x30>
		{
			FlagsStr.DS18B20 = 0;
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <Temperature_Get+0x38>)
 80013b0:	7813      	ldrb	r3, [r2, #0]
 80013b2:	f36f 0300 	bfc	r3, #0, #1
 80013b6:	7013      	strb	r3, [r2, #0]
			*pData = DS18B20_ReadTemperature();
 80013b8:	f7ff f8ee 	bl	8000598 <DS18B20_ReadTemperature>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	801a      	strh	r2, [r3, #0]
			DS18B20_StartConvertTemperature();
 80013c4:	f7ff f8d8 	bl	8000578 <DS18B20_StartConvertTemperature>
		}
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000047c 	.word	0x2000047c

080013d4 <DS2782_ReadADC>:
static DS2782_t DS2782Str;
//---------------------------


//************************************************************
uint16_t DS2782_ReadADC(DS2782_Registers_t addrReg, uint8_t len){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af02      	add	r7, sp, #8
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]

	uint8_t rxBuf[2] = {0};
 80013e4:	2300      	movs	r3, #0
 80013e6:	81bb      	strh	r3, [r7, #12]
//	I2C_StartAndSendDeviceAddr(DS2782_I2C, DS2782_ADDR | I2C_MODE_WRITE);
//	I2C_SendData(DS2782_I2C, &regAddr, 1);
//	I2C_Stop(DS2782_I2C);

	//-------------------
	I2C_Read(DS2782_I2C, DS2782_ADDR, (uint8_t)addrReg, rxBuf, len);
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f107 010c 	add.w	r1, r7, #12
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	460b      	mov	r3, r1
 80013f6:	2168      	movs	r1, #104	; 0x68
 80013f8:	4807      	ldr	r0, [pc, #28]	; (8001418 <DS2782_ReadADC+0x44>)
 80013fa:	f7ff fd30 	bl	8000e5e <I2C_Read>

	return ((rxBuf[1] << 8) | rxBuf[0]);
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b21a      	sxth	r2, r3
 8001404:	7b3b      	ldrb	r3, [r7, #12]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21b      	sxth	r3, r3
 800140c:	b29b      	uxth	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40005400 	.word	0x40005400

0800141c <Coulomb_Calc>:
//************************************************************
void Coulomb_Calc(uint16_t current){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]


}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <main>:
//*******************************************************************************************
//*******************************************************************************************
int main(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0

	uint16_t dsRes = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	80bb      	strh	r3, [r7, #4]
//	uint16_t BmiT  = 0;
	//-----------------------------
	//Drivers.
	Sys_Init();
 800143a:	f7ff fed9 	bl	80011f0 <Sys_Init>
	Gpio_Init();
 800143e:	f7ff fc21 	bl	8000c84 <Gpio_Init>
	//***********************************************
	SysTick_Init();
 8001442:	f7ff ff27 	bl	8001294 <SysTick_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001446:	b662      	cpsie	i
	__enable_irq();


	I2C_Init(SSD1306_I2C);//I2C_Int_Init(SSD1306_I2C);
 8001448:	48bc      	ldr	r0, [pc, #752]	; (800173c <main+0x30c>)
 800144a:	f7ff fc4d 	bl	8000ce8 <I2C_Init>
	//***********************************************
//	__disable_irq();
	msDelay(500);
 800144e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001452:	f7ff f8cd 	bl	80005f0 <msDelay>
	//***********************************************
	//OLED SSD1306
	SSD1306_Init(SSD1306_I2C);
 8001456:	48b9      	ldr	r0, [pc, #740]	; (800173c <main+0x30c>)
 8001458:	f000 fade 	bl	8001a18 <SSD1306_Init>
	//***********************************************
	//DS18B20
	DS18B20_Init(DS18B20_Resolution_12_bit);
 800145c:	207f      	movs	r0, #127	; 0x7f
 800145e:	f7ff f835 	bl	80004cc <DS18B20_Init>
	DS18B20_StartConvertTemperature();
 8001462:	f7ff f889 	bl	8000578 <DS18B20_StartConvertTemperature>
	//***********************************************
	//DS2782.

	//***********************************************
	msDelay(500);
 8001466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146a:	f7ff f8c1 	bl	80005f0 <msDelay>
	//************************************************************************************
	while(1)
		{
			msDelay(10);
 800146e:	200a      	movs	r0, #10
 8001470:	f7ff f8be 	bl	80005f0 <msDelay>
			//***********************************************
			//Мигание светодиодами.
			Led_Blink();
 8001474:	f7ff ff7a 	bl	800136c <Led_Blink>
			//DS18B20.
			Temperature_Get(&dsRes);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff8c 	bl	8001398 <Temperature_Get>
			//Инкримент счетчика секунд.
			IncrementOnEachPass(&secCounter, Blink(INTERVAL_500_mS));
 8001480:	2003      	movs	r0, #3
 8001482:	f7fe fef7 	bl	8000274 <Blink>
 8001486:	4603      	mov	r3, r0
 8001488:	4619      	mov	r1, r3
 800148a:	48ad      	ldr	r0, [pc, #692]	; (8001740 <main+0x310>)
 800148c:	f7ff ff16 	bl	80012bc <IncrementOnEachPass>
			//Преобразование времени
			Time_Calculation(secCounter);
 8001490:	4bab      	ldr	r3, [pc, #684]	; (8001740 <main+0x310>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff33 	bl	8001300 <Time_Calculation>
			//***********************************************
			//LCD 128x64 - Работает.
			Lcd_String(1, 1);
 800149a:	2101      	movs	r1, #1
 800149c:	2001      	movs	r0, #1
 800149e:	f7ff f95d 	bl	800075c <Lcd_String>
			Lcd_Print("DS2782 Test");
 80014a2:	48a8      	ldr	r0, [pc, #672]	; (8001744 <main+0x314>)
 80014a4:	f7ff fb0a 	bl	8000abc <Lcd_Print>
			//Вывод времени.
			Lcd_String(1, 2);
 80014a8:	2102      	movs	r1, #2
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff f956 	bl	800075c <Lcd_String>
			Lcd_Print("Time:");
 80014b0:	48a5      	ldr	r0, [pc, #660]	; (8001748 <main+0x318>)
 80014b2:	f7ff fb03 	bl	8000abc <Lcd_Print>
			Lcd_BinToDec(Time.hour, 2, LCD_CHAR_SIZE_NORM);//часы
 80014b6:	4ba5      	ldr	r3, [pc, #660]	; (800174c <main+0x31c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2200      	movs	r2, #0
 80014be:	2102      	movs	r1, #2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fb19 	bl	8000af8 <Lcd_BinToDec>
			Lcd_Chr(':');
 80014c6:	203a      	movs	r0, #58	; 0x3a
 80014c8:	f7ff f914 	bl	80006f4 <Lcd_Chr>
			Lcd_BinToDec(Time.min, 2, LCD_CHAR_SIZE_NORM); //минуты
 80014cc:	4b9f      	ldr	r3, [pc, #636]	; (800174c <main+0x31c>)
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2200      	movs	r2, #0
 80014d4:	2102      	movs	r1, #2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fb0e 	bl	8000af8 <Lcd_BinToDec>
			Lcd_Chr(':');
 80014dc:	203a      	movs	r0, #58	; 0x3a
 80014de:	f7ff f909 	bl	80006f4 <Lcd_Chr>
			Lcd_BinToDec(Time.sec, 2, LCD_CHAR_SIZE_NORM); //секунды
 80014e2:	4b9a      	ldr	r3, [pc, #616]	; (800174c <main+0x31c>)
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	2200      	movs	r2, #0
 80014ea:	2102      	movs	r1, #2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fb03 	bl	8000af8 <Lcd_BinToDec>
			//Вывод темперетуры DS18B20.
			Lcd_String(1, 3);
 80014f2:	2103      	movs	r1, #3
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff f931 	bl	800075c <Lcd_String>
			Lcd_Print("DS18B20 =");
 80014fa:	4895      	ldr	r0, [pc, #596]	; (8001750 <main+0x320>)
 80014fc:	f7ff fade 	bl	8000abc <Lcd_Print>
			if(DS18B20_GetTemperatureSign() & DS18B20_SIGN_NEGATIVE)Lcd_Chr('-');
 8001500:	f7ff f85e 	bl	80005c0 <DS18B20_GetTemperatureSign>
 8001504:	4603      	mov	r3, r0
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <main+0xe6>
 800150e:	202d      	movs	r0, #45	; 0x2d
 8001510:	f7ff f8f0 	bl	80006f4 <Lcd_Chr>
 8001514:	e002      	b.n	800151c <main+0xec>
			else                    								Lcd_Chr('+');
 8001516:	202b      	movs	r0, #43	; 0x2b
 8001518:	f7ff f8ec 	bl	80006f4 <Lcd_Chr>
			Lcd_BinToDec(dsRes/10, 2, LCD_CHAR_SIZE_NORM);
 800151c:	88bb      	ldrh	r3, [r7, #4]
 800151e:	4a8d      	ldr	r2, [pc, #564]	; (8001754 <main+0x324>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	08db      	lsrs	r3, r3, #3
 8001526:	b29b      	uxth	r3, r3
 8001528:	2200      	movs	r2, #0
 800152a:	2102      	movs	r1, #2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fae3 	bl	8000af8 <Lcd_BinToDec>
			Lcd_Chr('.');
 8001532:	202e      	movs	r0, #46	; 0x2e
 8001534:	f7ff f8de 	bl	80006f4 <Lcd_Chr>
			Lcd_BinToDec(dsRes%10, 1, LCD_CHAR_SIZE_NORM);
 8001538:	88ba      	ldrh	r2, [r7, #4]
 800153a:	4b86      	ldr	r3, [pc, #536]	; (8001754 <main+0x324>)
 800153c:	fba3 1302 	umull	r1, r3, r3, r2
 8001540:	08d9      	lsrs	r1, r3, #3
 8001542:	460b      	mov	r3, r1
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	2200      	movs	r2, #0
 8001550:	2101      	movs	r1, #1
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fad0 	bl	8000af8 <Lcd_BinToDec>
			Lcd_Print(" C");
 8001558:	487f      	ldr	r0, [pc, #508]	; (8001758 <main+0x328>)
 800155a:	f7ff faaf 	bl	8000abc <Lcd_Print>

			Lcd_String(21, 1);
 800155e:	2101      	movs	r1, #1
 8001560:	2015      	movs	r0, #21
 8001562:	f7ff f8fb 	bl	800075c <Lcd_String>
			if(Blink(INTERVAL_50_mS))Lcd_Chr(':');
 8001566:	2000      	movs	r0, #0
 8001568:	f7fe fe84 	bl	8000274 <Blink>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <main+0x14a>
 8001572:	203a      	movs	r0, #58	; 0x3a
 8001574:	f7ff f8be 	bl	80006f4 <Lcd_Chr>
 8001578:	e002      	b.n	8001580 <main+0x150>
			else                     Lcd_Chr(' ');
 800157a:	2020      	movs	r0, #32
 800157c:	f7ff f8ba 	bl	80006f4 <Lcd_Chr>

			Lcd_Update();//вывод сделан для SSD1306
 8001580:	f7ff f864 	bl	800064c <Lcd_Update>
			Lcd_Clear();
 8001584:	f7ff f876 	bl	8000674 <Lcd_Clear>
//			Lcd_Print("DS2782_ADDR:");
//			Lcd_Print("0x");
//			Lcd_u8ToHex(DS2782_ReadADC(Register_Unique_ID, 1) >> 1);

			//получение температуры.
			uint16_t Temp   = DS2782_ReadADC(Register_TEMP, 2);
 8001588:	2102      	movs	r1, #2
 800158a:	200a      	movs	r0, #10
 800158c:	f7ff ff22 	bl	80013d4 <DS2782_ReadADC>
 8001590:	4603      	mov	r3, r0
 8001592:	837b      	strh	r3, [r7, #26]
			         Temp   = ( ((Temp << 8) & 0xFF00) | ((Temp >> 8) & 0x00FF) );
 8001594:	8b7b      	ldrh	r3, [r7, #26]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	8b7b      	ldrh	r3, [r7, #26]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	837b      	strh	r3, [r7, #26]
			         Temp >>= 5;
 80015a8:	8b7b      	ldrh	r3, [r7, #26]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	837b      	strh	r3, [r7, #26]

			uint32_t tTemp =  Temp * 125;
 80015ae:	8b7a      	ldrh	r2, [r7, #26]
 80015b0:	4613      	mov	r3, r2
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]
					 tTemp = (tTemp + 50) / 100;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3332      	adds	r3, #50	; 0x32
 80015c0:	4a66      	ldr	r2, [pc, #408]	; (800175c <main+0x32c>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	617b      	str	r3, [r7, #20]

			Lcd_String(1, 5);
 80015ca:	2105      	movs	r1, #5
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff f8c5 	bl	800075c <Lcd_String>
			Lcd_Print("Bat_T  =");
 80015d2:	4863      	ldr	r0, [pc, #396]	; (8001760 <main+0x330>)
 80015d4:	f7ff fa72 	bl	8000abc <Lcd_Print>
			Lcd_BinToDec(tTemp/10, 2, LCD_CHAR_SIZE_NORM);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	4a5e      	ldr	r2, [pc, #376]	; (8001754 <main+0x324>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	08db      	lsrs	r3, r3, #3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	2102      	movs	r1, #2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fa85 	bl	8000af8 <Lcd_BinToDec>
			Lcd_Chr('.');
 80015ee:	202e      	movs	r0, #46	; 0x2e
 80015f0:	f7ff f880 	bl	80006f4 <Lcd_Chr>
			Lcd_BinToDec(tTemp%10, 1, LCD_CHAR_SIZE_NORM);
 80015f4:	6979      	ldr	r1, [r7, #20]
 80015f6:	4b57      	ldr	r3, [pc, #348]	; (8001754 <main+0x324>)
 80015f8:	fba3 2301 	umull	r2, r3, r3, r1
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	1aca      	subs	r2, r1, r3
 8001608:	b293      	uxth	r3, r2
 800160a:	2200      	movs	r2, #0
 800160c:	2101      	movs	r1, #1
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fa72 	bl	8000af8 <Lcd_BinToDec>
			Lcd_Print(" C");
 8001614:	4850      	ldr	r0, [pc, #320]	; (8001758 <main+0x328>)
 8001616:	f7ff fa51 	bl	8000abc <Lcd_Print>

			//получение напряжения на АКБ.
			uint16_t voltTemp = DS2782_ReadADC(Register_VOLT, 2);
 800161a:	2102      	movs	r1, #2
 800161c:	200c      	movs	r0, #12
 800161e:	f7ff fed9 	bl	80013d4 <DS2782_ReadADC>
 8001622:	4603      	mov	r3, r0
 8001624:	827b      	strh	r3, [r7, #18]
			voltTemp = ( ((voltTemp << 8) & 0xFF00) | ((voltTemp >> 8) & 0x00FF) );
 8001626:	8a7b      	ldrh	r3, [r7, #18]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	8a7b      	ldrh	r3, [r7, #18]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b29b      	uxth	r3, r3
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21b      	sxth	r3, r3
 8001638:	827b      	strh	r3, [r7, #18]

			uint32_t adcTemp = voltTemp >> 5;   //
 800163a:	8a7b      	ldrh	r3, [r7, #18]
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	b29b      	uxth	r3, r3
 8001640:	60fb      	str	r3, [r7, #12]

			adcTemp  &= 0b0000001111111111;//Уберем знак
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001648:	60fb      	str	r3, [r7, #12]
			adcTemp  *= 488;               //это 4,88mV * 100. Это нужно чтобы избавится от запятой => получили микровольты
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	60fb      	str	r3, [r7, #12]
			//adcTemp = ((adcTemp + 50) / 100);
			adcTemp  *= 5500; //5475;              //это коэф-т деления резистивного делителя, умноженного на 1000.
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f241 527c 	movw	r2, #5500	; 0x157c
 800165c:	fb02 f303 	mul.w	r3, r2, r3
 8001660:	60fb      	str	r3, [r7, #12]
			adcTemp = ((adcTemp + 500000) / 1000000);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8001668:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800166c:	4a3d      	ldr	r2, [pc, #244]	; (8001764 <main+0x334>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	0c9b      	lsrs	r3, r3, #18
 8001674:	60fb      	str	r3, [r7, #12]

			Lcd_String(1, 6);
 8001676:	2106      	movs	r1, #6
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff f86f 	bl	800075c <Lcd_String>
			Lcd_Print("Bat_U  =");
 800167e:	483a      	ldr	r0, [pc, #232]	; (8001768 <main+0x338>)
 8001680:	f7ff fa1c 	bl	8000abc <Lcd_Print>
			Lcd_BinToDec(adcTemp / 100, 2, LCD_CHAR_SIZE_NORM);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4a35      	ldr	r2, [pc, #212]	; (800175c <main+0x32c>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	095b      	lsrs	r3, r3, #5
 800168e:	b29b      	uxth	r3, r3
 8001690:	2200      	movs	r2, #0
 8001692:	2102      	movs	r1, #2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fa2f 	bl	8000af8 <Lcd_BinToDec>
			Lcd_Chr(',');
 800169a:	202c      	movs	r0, #44	; 0x2c
 800169c:	f7ff f82a 	bl	80006f4 <Lcd_Chr>
			Lcd_BinToDec(adcTemp % 100, 2, LCD_CHAR_SIZE_NORM);
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <main+0x32c>)
 80016a4:	fba3 1302 	umull	r1, r3, r3, r2
 80016a8:	095b      	lsrs	r3, r3, #5
 80016aa:	2164      	movs	r1, #100	; 0x64
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	2102      	movs	r1, #2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fa1d 	bl	8000af8 <Lcd_BinToDec>
			Lcd_Chr('V');
 80016be:	2056      	movs	r0, #86	; 0x56
 80016c0:	f7ff f818 	bl	80006f4 <Lcd_Chr>

			//Получения тока потребления от АКБ.
			int16_t currentTemp = DS2782_ReadADC(Register_CURRENT, 2);
 80016c4:	2102      	movs	r1, #2
 80016c6:	200e      	movs	r0, #14
 80016c8:	f7ff fe84 	bl	80013d4 <DS2782_ReadADC>
 80016cc:	4603      	mov	r3, r0
 80016ce:	83fb      	strh	r3, [r7, #30]
			//int16_t currentTemp = DS2782_ReadADC(Register_IAVG, 2);
			uint8_t currentSign = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	777b      	strb	r3, [r7, #29]
			currentTemp = ( ((currentTemp << 8) & 0xFF00) | ((currentTemp >> 8) & 0x00FF) );
 80016d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	8bfb      	ldrh	r3, [r7, #30]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	83fb      	strh	r3, [r7, #30]

			if(currentTemp < 0)
 80016e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da05      	bge.n	80016fc <main+0x2cc>
				{
					currentTemp = (currentTemp ^ 0xffff) + 1;	//Уберем знак
 80016f0:	8bfb      	ldrh	r3, [r7, #30]
 80016f2:	425b      	negs	r3, r3
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	83fb      	strh	r3, [r7, #30]
					currentSign = 1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	777b      	strb	r3, [r7, #29]
				}

			uint32_t currentAdcTemp = currentTemp;
 80016fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001700:	60bb      	str	r3, [r7, #8]
			currentAdcTemp *= 1563; //
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f240 621b 	movw	r2, #1563	; 0x61b
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	60bb      	str	r3, [r7, #8]
			currentAdcTemp  = ((currentAdcTemp + 5000) / 10000);
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001714:	3308      	adds	r3, #8
 8001716:	4a15      	ldr	r2, [pc, #84]	; (800176c <main+0x33c>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	0b5b      	lsrs	r3, r3, #13
 800171e:	60bb      	str	r3, [r7, #8]

			Lcd_String(1, 7);
 8001720:	2107      	movs	r1, #7
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff f81a 	bl	800075c <Lcd_String>
			Lcd_Print("Bat_I  =");
 8001728:	4811      	ldr	r0, [pc, #68]	; (8001770 <main+0x340>)
 800172a:	f7ff f9c7 	bl	8000abc <Lcd_Print>
			if(currentSign)Lcd_Chr('-');
 800172e:	7f7b      	ldrb	r3, [r7, #29]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01f      	beq.n	8001774 <main+0x344>
 8001734:	202d      	movs	r0, #45	; 0x2d
 8001736:	f7fe ffdd 	bl	80006f4 <Lcd_Chr>
 800173a:	e01e      	b.n	800177a <main+0x34a>
 800173c:	40005400 	.word	0x40005400
 8001740:	20000464 	.word	0x20000464
 8001744:	08001be0 	.word	0x08001be0
 8001748:	08001bec 	.word	0x08001bec
 800174c:	20000460 	.word	0x20000460
 8001750:	08001bf4 	.word	0x08001bf4
 8001754:	cccccccd 	.word	0xcccccccd
 8001758:	08001c00 	.word	0x08001c00
 800175c:	51eb851f 	.word	0x51eb851f
 8001760:	08001c04 	.word	0x08001c04
 8001764:	431bde83 	.word	0x431bde83
 8001768:	08001c10 	.word	0x08001c10
 800176c:	d1b71759 	.word	0xd1b71759
 8001770:	08001c1c 	.word	0x08001c1c
			else           Lcd_Chr(' ');
 8001774:	2020      	movs	r0, #32
 8001776:	f7fe ffbd 	bl	80006f4 <Lcd_Chr>

			Lcd_BinToDec(currentAdcTemp, 4, LCD_CHAR_SIZE_NORM);
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	b29b      	uxth	r3, r3
 800177e:	2200      	movs	r2, #0
 8001780:	2104      	movs	r1, #4
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f9b8 	bl	8000af8 <Lcd_BinToDec>
			Lcd_Print("mA");
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <main+0x390>)
 800178a:	f7ff f997 	bl	8000abc <Lcd_Print>

			//Расчет кулонов.
			uint16_t coulombTemp = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	80fb      	strh	r3, [r7, #6]

			Coulomb_Calc(currentAdcTemp);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	b29b      	uxth	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fe40 	bl	800141c <Coulomb_Calc>

			Lcd_String(1, 8);
 800179c:	2108      	movs	r1, #8
 800179e:	2001      	movs	r0, #1
 80017a0:	f7fe ffdc 	bl	800075c <Lcd_String>
			Lcd_Print("Coulomb=");
 80017a4:	4807      	ldr	r0, [pc, #28]	; (80017c4 <main+0x394>)
 80017a6:	f7ff f989 	bl	8000abc <Lcd_Print>
			Lcd_BinToDec(coulombTemp, 4, LCD_CHAR_SIZE_NORM);
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	2200      	movs	r2, #0
 80017ae:	2104      	movs	r1, #4
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff f9a1 	bl	8000af8 <Lcd_BinToDec>
			Lcd_Print("q");
 80017b6:	4804      	ldr	r0, [pc, #16]	; (80017c8 <main+0x398>)
 80017b8:	f7ff f980 	bl	8000abc <Lcd_Print>
		{
 80017bc:	e657      	b.n	800146e <main+0x3e>
 80017be:	bf00      	nop
 80017c0:	08001c28 	.word	0x08001c28
 80017c4:	08001c2c 	.word	0x08001c2c
 80017c8:	08001c38 	.word	0x08001c38

080017cc <SysTick_Handler>:
	//************************************************************************************
}
//*******************************************************************************************
//*******************************************************************************************
//Прерывание каждую милисекунду.
void SysTick_Handler(void){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

	static uint16_t msCountForDS18B20 = 0;
	//-----------------------------
	//Отсчет таймаута для датчика температуры.
	if(++msCountForDS18B20 >= 1000)
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <SysTick_Handler+0x40>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <SysTick_Handler+0x40>)
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <SysTick_Handler+0x40>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e4:	d307      	bcc.n	80017f6 <SysTick_Handler+0x2a>
		{
			msCountForDS18B20 = 0;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <SysTick_Handler+0x40>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	801a      	strh	r2, [r3, #0]
			FlagsStr.DS18B20  = 1;
 80017ec:	4a08      	ldr	r2, [pc, #32]	; (8001810 <SysTick_Handler+0x44>)
 80017ee:	7813      	ldrb	r3, [r2, #0]
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	7013      	strb	r3, [r2, #0]
		}
	//-----------------------------
	msDelay_Loop();
 80017f6:	f7fe feed 	bl	80005d4 <msDelay_Loop>
	Blink_Loop();
 80017fa:	f7fe fcb9 	bl	8000170 <Blink_Loop>
	Encoder()->Loop();
 80017fe:	f000 f8d9 	bl	80019b4 <Encoder>
 8001802:	4603      	mov	r3, r0
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4798      	blx	r3
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000046a 	.word	0x2000046a
 8001810:	2000047c 	.word	0x2000047c

08001814 <Encoder_Turn>:
							   .Loop          = &Encoder_Loop,
							   .Rotation      = &Encoder_Turn};

static uint8_t EncoderStateReg = ENCODER_NO_TURN;//Регистр состияния энкодера.
//-----------------------------------------------------------------------------
static void Encoder_Turn(uint16_t *parameter, uint16_t min, uint16_t max){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	803b      	strh	r3, [r7, #0]

	//--------------------
	switch(EncoderStateReg){
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <Encoder_Turn+0x74>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d002      	beq.n	8001832 <Encoder_Turn+0x1e>
 800182c:	2b03      	cmp	r3, #3
 800182e:	d013      	beq.n	8001858 <Encoder_Turn+0x44>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
			EncoderStateReg = ENCODER_NO_TURN;
		break;
		//-----------
		default:
		break;	
 8001830:	e025      	b.n	800187e <Encoder_Turn+0x6a>
			if ((*parameter) < max)(*parameter)++;    //Проверка на  максимум.
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	883a      	ldrh	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d906      	bls.n	800184a <Encoder_Turn+0x36>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	801a      	strh	r2, [r3, #0]
 8001848:	e002      	b.n	8001850 <Encoder_Turn+0x3c>
			else                   (*parameter) = min;//Закольцовывание редактирования параметра.
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	887a      	ldrh	r2, [r7, #2]
 800184e:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <Encoder_Turn+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
		break;
 8001856:	e012      	b.n	800187e <Encoder_Turn+0x6a>
			if ((*parameter) > min)(*parameter)--;    //Проверка на минимум.
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	887a      	ldrh	r2, [r7, #2]
 800185e:	429a      	cmp	r2, r3
 8001860:	d206      	bcs.n	8001870 <Encoder_Turn+0x5c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	801a      	strh	r2, [r3, #0]
 800186e:	e002      	b.n	8001876 <Encoder_Turn+0x62>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <Encoder_Turn+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
		break;
 800187c:	bf00      	nop
		//-----------
	}
	//--------------------	
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	2000046c 	.word	0x2000046c

0800188c <Encoder_Loop>:
//-----------------------------------------------------------------------------
/*Когда энкодер не вращают на обоих его выводах(A и В) единицы(внутряння подтяжка МК).Это состояние 3 энкодера - начальное состояние энкодера.
*Так-же начальным состоянием может быть  состояние энкодера когда А и В ровны 0.
*Когда вращаю вправо, то после состояния 3 энкодер передет в состояние 1 (А=1, В=0).
*Когда вращают влево, то после состояния 3 энкодер прердет в состояние 2 (А=0, В=1). */
static void Encoder_Loop(void){
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	static uint8_t  cycle   = 0;
	static uint8_t  msCount = 0;
	static uint16_t but[3]  = {0, 0, 0};
	//--------------------
	//Обработка вращения энкодера.
	switch(EncoderStateReg){
 8001890:	4b42      	ldr	r3, [pc, #264]	; (800199c <Encoder_Loop+0x110>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <Encoder_Loop+0x12>
 8001898:	2b01      	cmp	r3, #1
 800189a:	d010      	beq.n	80018be <Encoder_Loop+0x32>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
				} 			
		break;
		//-----------
		default:
		break;	
 800189c:	e031      	b.n	8001902 <Encoder_Loop+0x76>
			if(!(EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 800189e:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <Encoder_Loop+0x114>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d128      	bne.n	80018fc <Encoder_Loop+0x70>
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <Encoder_Loop+0x114>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d122      	bne.n	80018fc <Encoder_Loop+0x70>
					EncoderStateReg = ENCODER_TURN;
 80018b6:	4b39      	ldr	r3, [pc, #228]	; (800199c <Encoder_Loop+0x110>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
		break;
 80018bc:	e01e      	b.n	80018fc <Encoder_Loop+0x70>
			if( !(EncoderPORT->IDR & EncoderPinA) && (EncoderPORT->IDR & EncoderPinB))
 80018be:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <Encoder_Loop+0x114>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <Encoder_Loop+0x50>
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <Encoder_Loop+0x114>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <Encoder_Loop+0x50>
					EncoderStateReg = ENCODER_TURN_RIGHT;//щелчок вправо.
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <Encoder_Loop+0x110>)
 80018d8:	2202      	movs	r2, #2
 80018da:	701a      	strb	r2, [r3, #0]
		  if( (EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <Encoder_Loop+0x114>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00b      	beq.n	8001900 <Encoder_Loop+0x74>
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <Encoder_Loop+0x114>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <Encoder_Loop+0x74>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <Encoder_Loop+0x110>)
 80018f6:	2203      	movs	r2, #3
 80018f8:	701a      	strb	r2, [r3, #0]
		break;
 80018fa:	e001      	b.n	8001900 <Encoder_Loop+0x74>
		break;
 80018fc:	bf00      	nop
 80018fe:	e000      	b.n	8001902 <Encoder_Loop+0x76>
		break;
 8001900:	bf00      	nop
		//-----------		
	}
	//--------------------
	//Опрос кнопки энкодера.
	if(++msCount >= ENCODER_BUTTON_TIMEOUT)
 8001902:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <Encoder_Loop+0x118>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <Encoder_Loop+0x118>)
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <Encoder_Loop+0x118>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b09      	cmp	r3, #9
 8001914:	d93d      	bls.n	8001992 <Encoder_Loop+0x106>
		{
		  msCount = 0;//сброс счетчика
 8001916:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <Encoder_Loop+0x118>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
		  //-----------
			if(cycle < 3)
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <Encoder_Loop+0x11c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d811      	bhi.n	8001948 <Encoder_Loop+0xbc>
				{
					but[cycle] = EncoderPORT->IDR & EncoderButtonPin;//Считывание состояние вывода.
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <Encoder_Loop+0x114>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	b29b      	uxth	r3, r3
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <Encoder_Loop+0x11c>)
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001932:	b299      	uxth	r1, r3
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <Encoder_Loop+0x120>)
 8001936:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					cycle++;
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <Encoder_Loop+0x11c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <Encoder_Loop+0x11c>)
 8001944:	701a      	strb	r2, [r3, #0]
					else EncoderStr.ButtonIsPress = 0;
				}
			//-----------
		}
	//--------------------
}
 8001946:	e024      	b.n	8001992 <Encoder_Loop+0x106>
					cycle = 0;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <Encoder_Loop+0x11c>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
					if(~((but[0] & but[1]) | (but[1] & but[2]) | (but[0] & but[2])) & EncoderButtonPin) 
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <Encoder_Loop+0x120>)
 8001950:	885a      	ldrh	r2, [r3, #2]
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <Encoder_Loop+0x120>)
 8001954:	8819      	ldrh	r1, [r3, #0]
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <Encoder_Loop+0x120>)
 8001958:	889b      	ldrh	r3, [r3, #4]
 800195a:	430b      	orrs	r3, r1
 800195c:	b29b      	uxth	r3, r3
 800195e:	4013      	ands	r3, r2
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <Encoder_Loop+0x120>)
 8001964:	8819      	ldrh	r1, [r3, #0]
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <Encoder_Loop+0x120>)
 8001968:	889b      	ldrh	r3, [r3, #4]
 800196a:	400b      	ands	r3, r1
 800196c:	b29b      	uxth	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b29b      	uxth	r3, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <Encoder_Loop+0xfc>
							 EncoderStr.ButtonIsPress = 1;
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <Encoder_Loop+0x124>)
 800197e:	7813      	ldrb	r3, [r2, #0]
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	7013      	strb	r3, [r2, #0]
}
 8001986:	e004      	b.n	8001992 <Encoder_Loop+0x106>
					else EncoderStr.ButtonIsPress = 0;
 8001988:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <Encoder_Loop+0x124>)
 800198a:	7813      	ldrb	r3, [r2, #0]
 800198c:	f36f 0300 	bfc	r3, #0, #1
 8001990:	7013      	strb	r3, [r2, #0]
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	2000046c 	.word	0x2000046c
 80019a0:	40011000 	.word	0x40011000
 80019a4:	2000046d 	.word	0x2000046d
 80019a8:	2000046e 	.word	0x2000046e
 80019ac:	20000470 	.word	0x20000470
 80019b0:	20000004 	.word	0x20000004

080019b4 <Encoder>:
	//Input pull-up
	GPIOB->CRH |= (GPIO_CRH_CNF12_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_CNF10_1);//
	GPIOB->ODR |= (GPIO_ODR_ODR12   | GPIO_ODR_ODR11   | GPIO_ODR_ODR10);	 //
}
//-----------------------------------------------------------------------------
Encoder_t* Encoder(void){
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

	return &EncoderStr;
 80019b8:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <Encoder+0x10>)
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000004 	.word	0x20000004

080019c8 <ssd1306_I2C_WriteDataBuf>:
 * @param  reg: register to write to
 * @param  *data: pointer to data array to write it to slave
 * @param  count: how many bytes will be written
 * @retval None
 */
static void ssd1306_I2C_WriteDataBuf(uint8_t *pData, uint16_t len){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
//			I2C_SendData(SSD1306_I2C, &tempBuff, 1);
//			I2C_SendData(SSD1306_I2C, pData, len);
//		}
//	I2C_Stop(SSD1306_I2C);

	I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0x40, pData, len);
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2240      	movs	r2, #64	; 0x40
 80019dc:	2178      	movs	r1, #120	; 0x78
 80019de:	4803      	ldr	r0, [pc, #12]	; (80019ec <ssd1306_I2C_WriteDataBuf+0x24>)
 80019e0:	f7ff f9ea 	bl	8000db8 <I2C_Write>
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40005400 	.word	0x40005400

080019f0 <ssd1306_I2C_WriteCMD>:
 * @param  address: 7 bit slave address, left aligned, bits 7:1 are used, LSB bit is not used
 * @param  reg: register to write to
 * @param  data: data to be written
 * @retval None
 */
static void ssd1306_I2C_WriteCMD(uint8_t cmd){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
//		{
//			I2C_SendData(SSD1306_I2C, data, 2);
//		}
//	I2C_Stop(SSD1306_I2C);

	I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0, &cmd, 1);
 80019fa:	1dfa      	adds	r2, r7, #7
 80019fc:	2301      	movs	r3, #1
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	2200      	movs	r2, #0
 8001a04:	2178      	movs	r1, #120	; 0x78
 8001a06:	4803      	ldr	r0, [pc, #12]	; (8001a14 <ssd1306_I2C_WriteCMD+0x24>)
 8001a08:	f7ff f9d6 	bl	8000db8 <I2C_Write>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40005400 	.word	0x40005400

08001a18 <SSD1306_Init>:
//*******************************************************************************************
//*******************************************************************************************
uint8_t SSD1306_Init(I2C_TypeDef *i2c) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
//	uint32_t p = 2500;
//	while(p>0)
//		p--;

	/* Init LCD */
	ssd1306_I2C_WriteCMD(0xAE); //display off
 8001a20:	20ae      	movs	r0, #174	; 0xae
 8001a22:	f7ff ffe5 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x20); //Set Memory Addressing Mode
 8001a26:	2020      	movs	r0, #32
 8001a28:	f7ff ffe2 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x01); //00,Horizontal Addressing Mode;
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff ffdf 	bl	80019f0 <ssd1306_I2C_WriteCMD>
							    //01,Vertical Addressing Mode;
							    //10,Page Addressing Mode (RESET);
							    //11,Invalid

	ssd1306_I2C_WriteCMD(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a32:	20b0      	movs	r0, #176	; 0xb0
 8001a34:	f7ff ffdc 	bl	80019f0 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xC8); //Set COM Output Scan Direction
 8001a38:	20c8      	movs	r0, #200	; 0xc8
 8001a3a:	f7ff ffd9 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x00); //---set low column address
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff ffd6 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x10); //---set high column address
 8001a44:	2010      	movs	r0, #16
 8001a46:	f7ff ffd3 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x40); //--set start line address
 8001a4a:	2040      	movs	r0, #64	; 0x40
 8001a4c:	f7ff ffd0 	bl	80019f0 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0x81); //--set contrast control register
 8001a50:	2081      	movs	r0, #129	; 0x81
 8001a52:	f7ff ffcd 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(50);
 8001a56:	2032      	movs	r0, #50	; 0x32
 8001a58:	f7ff ffca 	bl	80019f0 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xA1); //--set segment re-map 0 to 127
 8001a5c:	20a1      	movs	r0, #161	; 0xa1
 8001a5e:	f7ff ffc7 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xA6); //--set normal display
 8001a62:	20a6      	movs	r0, #166	; 0xa6
 8001a64:	f7ff ffc4 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xA8); //--set multiplex ratio(1 to 64)
 8001a68:	20a8      	movs	r0, #168	; 0xa8
 8001a6a:	f7ff ffc1 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x3F); //
 8001a6e:	203f      	movs	r0, #63	; 0x3f
 8001a70:	f7ff ffbe 	bl	80019f0 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a74:	20a4      	movs	r0, #164	; 0xa4
 8001a76:	f7ff ffbb 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xD3); //-set display offset
 8001a7a:	20d3      	movs	r0, #211	; 0xd3
 8001a7c:	f7ff ffb8 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x00); //-not offset
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff ffb5 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a86:	20d5      	movs	r0, #213	; 0xd5
 8001a88:	f7ff ffb2 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xF0); //--set divide ratio
 8001a8c:	20f0      	movs	r0, #240	; 0xf0
 8001a8e:	f7ff ffaf 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xD9); //--set pre-charge period
 8001a92:	20d9      	movs	r0, #217	; 0xd9
 8001a94:	f7ff ffac 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x22); //
 8001a98:	2022      	movs	r0, #34	; 0x22
 8001a9a:	f7ff ffa9 	bl	80019f0 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xDA); //--set com pins hardware configuration
 8001a9e:	20da      	movs	r0, #218	; 0xda
 8001aa0:	f7ff ffa6 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x12);
 8001aa4:	2012      	movs	r0, #18
 8001aa6:	f7ff ffa3 	bl	80019f0 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xDB); //--set vcomh
 8001aaa:	20db      	movs	r0, #219	; 0xdb
 8001aac:	f7ff ffa0 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x20); //0x20,0.77xVcc
 8001ab0:	2020      	movs	r0, #32
 8001ab2:	f7ff ff9d 	bl	80019f0 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0x8D); //--set DC-DC enable
 8001ab6:	208d      	movs	r0, #141	; 0x8d
 8001ab8:	f7ff ff9a 	bl	80019f0 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x14); //
 8001abc:	2014      	movs	r0, #20
 8001abe:	f7ff ff97 	bl	80019f0 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xAF); //--turn on SSD1306 panel
 8001ac2:	20af      	movs	r0, #175	; 0xaf
 8001ac4:	f7ff ff94 	bl	80019f0 <ssd1306_I2C_WriteCMD>
//		0xAF, //--turn on SSD1306 panel
//	};
//	//------------
//	I2C_Int_StartSendData(SSD1306_I2C, SSD1306_I2C_ADDR, InitBuf, 28);

	pVideoBuffer = Lcd_pVideoBuffer();
 8001ac8:	f7fe fdca 	bl	8000660 <Lcd_pVideoBuffer>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b03      	ldr	r3, [pc, #12]	; (8001adc <SSD1306_Init+0xc4>)
 8001ad0:	601a      	str	r2, [r3, #0]
//	SSD1306.CurrentX = 0;
//	SSD1306.CurrentY = 0;
	/* Initialized OK */
//	SSD1306.Initialized = 1;
	/* Return OK */
	return 1;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000478 	.word	0x20000478

08001ae0 <SSD1306_UpdateScreen>:
//***********************************************************************
void SSD1306_UpdateScreen(uint8_t *pBuf) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

	for(uint8_t m = 0; m < 8; m++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	e017      	b.n	8001b1e <SSD1306_UpdateScreen+0x3e>
		{
			ssd1306_I2C_WriteCMD(0xB0 + m);//Set Page Start Address for Page Addressing Mode,0-7
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	3b50      	subs	r3, #80	; 0x50
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff7b 	bl	80019f0 <ssd1306_I2C_WriteCMD>
			ssd1306_I2C_WriteCMD(0x02);    //Set low column address ,смещение вывода изображениея на 2 столбца.
 8001afa:	2002      	movs	r0, #2
 8001afc:	f7ff ff78 	bl	80019f0 <ssd1306_I2C_WriteCMD>
			ssd1306_I2C_WriteCMD(0x10);    //Set high column address
 8001b00:	2010      	movs	r0, #16
 8001b02:	f7ff ff75 	bl	80019f0 <ssd1306_I2C_WriteCMD>
			/* Write multi data */
			ssd1306_I2C_WriteDataBuf(&pBuf[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	01db      	lsls	r3, r3, #7
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff58 	bl	80019c8 <ssd1306_I2C_WriteDataBuf>
	for(uint8_t m = 0; m < 8; m++)
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b07      	cmp	r3, #7
 8001b22:	d9e4      	bls.n	8001aee <SSD1306_UpdateScreen+0xe>
		}
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b2c:	480d      	ldr	r0, [pc, #52]	; (8001b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b2e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b30:	f7ff f874 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b36:	490d      	ldr	r1, [pc, #52]	; (8001b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <LoopForever+0xe>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b4c:	4c0a      	ldr	r4, [pc, #40]	; (8001b78 <LoopForever+0x16>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b5a:	f000 f811 	bl	8001b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5e:	f7ff fc67 	bl	8001430 <main>

08001b62 <LoopForever>:

LoopForever:
    b LoopForever
 8001b62:	e7fe      	b.n	8001b62 <LoopForever>
  ldr   r0, =_estack
 8001b64:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b6c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b70:	08002144 	.word	0x08002144
  ldr r2, =_sbss
 8001b74:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b78:	20000480 	.word	0x20000480

08001b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC1_2_IRQHandler>
	...

08001b80 <__libc_init_array>:
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	2500      	movs	r5, #0
 8001b84:	4e0c      	ldr	r6, [pc, #48]	; (8001bb8 <__libc_init_array+0x38>)
 8001b86:	4c0d      	ldr	r4, [pc, #52]	; (8001bbc <__libc_init_array+0x3c>)
 8001b88:	1ba4      	subs	r4, r4, r6
 8001b8a:	10a4      	asrs	r4, r4, #2
 8001b8c:	42a5      	cmp	r5, r4
 8001b8e:	d109      	bne.n	8001ba4 <__libc_init_array+0x24>
 8001b90:	f000 f81a 	bl	8001bc8 <_init>
 8001b94:	2500      	movs	r5, #0
 8001b96:	4e0a      	ldr	r6, [pc, #40]	; (8001bc0 <__libc_init_array+0x40>)
 8001b98:	4c0a      	ldr	r4, [pc, #40]	; (8001bc4 <__libc_init_array+0x44>)
 8001b9a:	1ba4      	subs	r4, r4, r6
 8001b9c:	10a4      	asrs	r4, r4, #2
 8001b9e:	42a5      	cmp	r5, r4
 8001ba0:	d105      	bne.n	8001bae <__libc_init_array+0x2e>
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}
 8001ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ba8:	4798      	blx	r3
 8001baa:	3501      	adds	r5, #1
 8001bac:	e7ee      	b.n	8001b8c <__libc_init_array+0xc>
 8001bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bb2:	4798      	blx	r3
 8001bb4:	3501      	adds	r5, #1
 8001bb6:	e7f2      	b.n	8001b9e <__libc_init_array+0x1e>
 8001bb8:	0800213c 	.word	0x0800213c
 8001bbc:	0800213c 	.word	0x0800213c
 8001bc0:	0800213c 	.word	0x0800213c
 8001bc4:	08002140 	.word	0x08002140

08001bc8 <_init>:
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	bf00      	nop
 8001bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bce:	bc08      	pop	{r3}
 8001bd0:	469e      	mov	lr, r3
 8001bd2:	4770      	bx	lr

08001bd4 <_fini>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	bf00      	nop
 8001bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bda:	bc08      	pop	{r3}
 8001bdc:	469e      	mov	lr, r3
 8001bde:	4770      	bx	lr
