
f103c8t6_MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d1c  08000d1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d1c  08000d1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d1c  08000d1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d1c  08000d1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d1c  08000d1c  00010d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d20  08000d20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  2000000c  08000d30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  20000048  08000d30  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008319  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016ca  00000000  00000000  0002834e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000308  00000000  00000000  00029a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000250  00000000  00000000  00029d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001dab  00000000  00000000  00029f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000652a  00000000  00000000  0002bd1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059ca8  00000000  00000000  00032245  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008beed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008f8  00000000  00000000  0008bf68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d04 	.word	0x08000d04

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08000d04 	.word	0x08000d04

08000170 <Blink_Loop>:

//-----------------------------------------------------------------------------
static volatile uint16_t BlinkReg = 0;
//-----------------------------------------------------------------------------
//Процесс для мигания светодиодами.
void Blink_Loop(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	
	static uint16_t blinkCount = 0;
  //--------------------
	++blinkCount;
 8000174:	4b5c      	ldr	r3, [pc, #368]	; (80002e8 <Blink_Loop+0x178>)
 8000176:	881b      	ldrh	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	b29a      	uxth	r2, r3
 800017c:	4b5a      	ldr	r3, [pc, #360]	; (80002e8 <Blink_Loop+0x178>)
 800017e:	801a      	strh	r2, [r3, #0]
	BlinkReg ^= (1 << INTERVAL_1_mS);
 8000180:	4b5a      	ldr	r3, [pc, #360]	; (80002ec <Blink_Loop+0x17c>)
 8000182:	881b      	ldrh	r3, [r3, #0]
 8000184:	b29b      	uxth	r3, r3
 8000186:	f083 0301 	eor.w	r3, r3, #1
 800018a:	b29a      	uxth	r2, r3
 800018c:	4b57      	ldr	r3, [pc, #348]	; (80002ec <Blink_Loop+0x17c>)
 800018e:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 2)    == 0) BlinkReg ^= (1 << INTERVAL_2_mS);
 8000190:	4b55      	ldr	r3, [pc, #340]	; (80002e8 <Blink_Loop+0x178>)
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	f003 0301 	and.w	r3, r3, #1
 8000198:	b29b      	uxth	r3, r3
 800019a:	2b00      	cmp	r3, #0
 800019c:	d107      	bne.n	80001ae <Blink_Loop+0x3e>
 800019e:	4b53      	ldr	r3, [pc, #332]	; (80002ec <Blink_Loop+0x17c>)
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	f083 0302 	eor.w	r3, r3, #2
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	4b50      	ldr	r3, [pc, #320]	; (80002ec <Blink_Loop+0x17c>)
 80001ac:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 5)    == 0) BlinkReg ^= (1 << INTERVAL_5_mS);
 80001ae:	4b4e      	ldr	r3, [pc, #312]	; (80002e8 <Blink_Loop+0x178>)
 80001b0:	881a      	ldrh	r2, [r3, #0]
 80001b2:	4b4f      	ldr	r3, [pc, #316]	; (80002f0 <Blink_Loop+0x180>)
 80001b4:	fba3 1302 	umull	r1, r3, r3, r2
 80001b8:	0899      	lsrs	r1, r3, #2
 80001ba:	460b      	mov	r3, r1
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	440b      	add	r3, r1
 80001c0:	1ad3      	subs	r3, r2, r3
 80001c2:	b29b      	uxth	r3, r3
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d107      	bne.n	80001d8 <Blink_Loop+0x68>
 80001c8:	4b48      	ldr	r3, [pc, #288]	; (80002ec <Blink_Loop+0x17c>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	b29b      	uxth	r3, r3
 80001ce:	f083 0304 	eor.w	r3, r3, #4
 80001d2:	b29a      	uxth	r2, r3
 80001d4:	4b45      	ldr	r3, [pc, #276]	; (80002ec <Blink_Loop+0x17c>)
 80001d6:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 10)   == 0) BlinkReg ^= (1 << INTERVAL_10_mS);
 80001d8:	4b43      	ldr	r3, [pc, #268]	; (80002e8 <Blink_Loop+0x178>)
 80001da:	881a      	ldrh	r2, [r3, #0]
 80001dc:	4b44      	ldr	r3, [pc, #272]	; (80002f0 <Blink_Loop+0x180>)
 80001de:	fba3 1302 	umull	r1, r3, r3, r2
 80001e2:	08d9      	lsrs	r1, r3, #3
 80001e4:	460b      	mov	r3, r1
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	440b      	add	r3, r1
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	1ad3      	subs	r3, r2, r3
 80001ee:	b29b      	uxth	r3, r3
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d107      	bne.n	8000204 <Blink_Loop+0x94>
 80001f4:	4b3d      	ldr	r3, [pc, #244]	; (80002ec <Blink_Loop+0x17c>)
 80001f6:	881b      	ldrh	r3, [r3, #0]
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	f083 0308 	eor.w	r3, r3, #8
 80001fe:	b29a      	uxth	r2, r3
 8000200:	4b3a      	ldr	r3, [pc, #232]	; (80002ec <Blink_Loop+0x17c>)
 8000202:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 50)   == 0) BlinkReg ^= (1 << INTERVAL_50_mS);
 8000204:	4b38      	ldr	r3, [pc, #224]	; (80002e8 <Blink_Loop+0x178>)
 8000206:	881b      	ldrh	r3, [r3, #0]
 8000208:	4a3a      	ldr	r2, [pc, #232]	; (80002f4 <Blink_Loop+0x184>)
 800020a:	fba2 1203 	umull	r1, r2, r2, r3
 800020e:	0912      	lsrs	r2, r2, #4
 8000210:	2132      	movs	r1, #50	; 0x32
 8000212:	fb01 f202 	mul.w	r2, r1, r2
 8000216:	1a9b      	subs	r3, r3, r2
 8000218:	b29b      	uxth	r3, r3
 800021a:	2b00      	cmp	r3, #0
 800021c:	d107      	bne.n	800022e <Blink_Loop+0xbe>
 800021e:	4b33      	ldr	r3, [pc, #204]	; (80002ec <Blink_Loop+0x17c>)
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	b29b      	uxth	r3, r3
 8000224:	f083 0310 	eor.w	r3, r3, #16
 8000228:	b29a      	uxth	r2, r3
 800022a:	4b30      	ldr	r3, [pc, #192]	; (80002ec <Blink_Loop+0x17c>)
 800022c:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 100)  == 0) BlinkReg ^= (1 << INTERVAL_100_mS);
 800022e:	4b2e      	ldr	r3, [pc, #184]	; (80002e8 <Blink_Loop+0x178>)
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	4a30      	ldr	r2, [pc, #192]	; (80002f4 <Blink_Loop+0x184>)
 8000234:	fba2 1203 	umull	r1, r2, r2, r3
 8000238:	0952      	lsrs	r2, r2, #5
 800023a:	2164      	movs	r1, #100	; 0x64
 800023c:	fb01 f202 	mul.w	r2, r1, r2
 8000240:	1a9b      	subs	r3, r3, r2
 8000242:	b29b      	uxth	r3, r3
 8000244:	2b00      	cmp	r3, #0
 8000246:	d107      	bne.n	8000258 <Blink_Loop+0xe8>
 8000248:	4b28      	ldr	r3, [pc, #160]	; (80002ec <Blink_Loop+0x17c>)
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	f083 0320 	eor.w	r3, r3, #32
 8000252:	b29a      	uxth	r2, r3
 8000254:	4b25      	ldr	r3, [pc, #148]	; (80002ec <Blink_Loop+0x17c>)
 8000256:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 250)  == 0) BlinkReg ^= (1 << INTERVAL_250_mS);	
 8000258:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <Blink_Loop+0x178>)
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	4a26      	ldr	r2, [pc, #152]	; (80002f8 <Blink_Loop+0x188>)
 800025e:	fba2 1203 	umull	r1, r2, r2, r3
 8000262:	0912      	lsrs	r2, r2, #4
 8000264:	21fa      	movs	r1, #250	; 0xfa
 8000266:	fb01 f202 	mul.w	r2, r1, r2
 800026a:	1a9b      	subs	r3, r3, r2
 800026c:	b29b      	uxth	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d107      	bne.n	8000282 <Blink_Loop+0x112>
 8000272:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <Blink_Loop+0x17c>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	b29b      	uxth	r3, r3
 8000278:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800027c:	b29a      	uxth	r2, r3
 800027e:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <Blink_Loop+0x17c>)
 8000280:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 500)  == 0) BlinkReg ^= (1 << INTERVAL_500_mS);
 8000282:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <Blink_Loop+0x178>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <Blink_Loop+0x188>)
 8000288:	fba2 1203 	umull	r1, r2, r2, r3
 800028c:	0952      	lsrs	r2, r2, #5
 800028e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000292:	fb01 f202 	mul.w	r2, r1, r2
 8000296:	1a9b      	subs	r3, r3, r2
 8000298:	b29b      	uxth	r3, r3
 800029a:	2b00      	cmp	r3, #0
 800029c:	d107      	bne.n	80002ae <Blink_Loop+0x13e>
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <Blink_Loop+0x17c>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <Blink_Loop+0x17c>)
 80002ac:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 1000) == 0)
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <Blink_Loop+0x178>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <Blink_Loop+0x188>)
 80002b4:	fba2 1203 	umull	r1, r2, r2, r3
 80002b8:	0992      	lsrs	r2, r2, #6
 80002ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002be:	fb01 f202 	mul.w	r2, r1, r2
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d10a      	bne.n	80002e0 <Blink_Loop+0x170>
		{
			BlinkReg  ^= (1 << INTERVAL_1000_mS);
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <Blink_Loop+0x17c>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <Blink_Loop+0x17c>)
 80002d8:	801a      	strh	r2, [r3, #0]
			blinkCount = 0;
 80002da:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <Blink_Loop+0x178>)
 80002dc:	2200      	movs	r2, #0
 80002de:	801a      	strh	r2, [r3, #0]
		}
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	2000002a 	.word	0x2000002a
 80002ec:	20000028 	.word	0x20000028
 80002f0:	cccccccd 	.word	0xcccccccd
 80002f4:	51eb851f 	.word	0x51eb851f
 80002f8:	10624dd3 	.word	0x10624dd3

080002fc <Blink>:
//-----------------------------------------------------------------------------
uint16_t Blink(BlinkIntervalEnum_t interval){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	
	if(BlinkReg & (1 << interval)) return 0xFFFF;
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <Blink+0x34>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	b29b      	uxth	r3, r3
 800030c:	461a      	mov	r2, r3
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	fa42 f303 	asr.w	r3, r2, r3
 8000314:	f003 0301 	and.w	r3, r3, #1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d002      	beq.n	8000322 <Blink+0x26>
 800031c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000320:	e000      	b.n	8000324 <Blink+0x28>
	else											     return 0;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	20000028 	.word	0x20000028

08000334 <msDelay_Loop>:

//*******************************************************************************************
static volatile uint32_t msCounter = 0;
//*******************************************************************************************
//*******************************************************************************************
void msDelay_Loop(void){
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

	msCounter++;
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <msDelay_Loop+0x18>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	4a03      	ldr	r2, [pc, #12]	; (800034c <msDelay_Loop+0x18>)
 8000340:	6013      	str	r3, [r2, #0]
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	2000002c 	.word	0x2000002c

08000350 <msDelay>:
//**********************************************************
void msDelay(volatile uint32_t del){
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]

	if(del == 0) return;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d00a      	beq.n	8000374 <msDelay+0x24>
	msCounter = 0;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <msDelay+0x30>)
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
	while(msCounter < del){__NOP();};
 8000364:	e000      	b.n	8000368 <msDelay+0x18>
 8000366:	bf00      	nop
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <msDelay+0x30>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	429a      	cmp	r2, r3
 8000370:	d3f9      	bcc.n	8000366 <msDelay+0x16>
 8000372:	e000      	b.n	8000376 <msDelay+0x26>
	if(del == 0) return;
 8000374:	bf00      	nop
}
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	2000002c 	.word	0x2000002c

08000384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <SystemInit+0x5c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a14      	ldr	r2, [pc, #80]	; (80003e0 <SystemInit+0x5c>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <SystemInit+0x5c>)
 8000396:	685a      	ldr	r2, [r3, #4]
 8000398:	4911      	ldr	r1, [pc, #68]	; (80003e0 <SystemInit+0x5c>)
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <SystemInit+0x60>)
 800039c:	4013      	ands	r3, r2
 800039e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <SystemInit+0x5c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <SystemInit+0x5c>)
 80003a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003b0:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <SystemInit+0x5c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <SystemInit+0x5c>)
 80003b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <SystemInit+0x5c>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <SystemInit+0x5c>)
 80003c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SystemInit+0x5c>)
 80003ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SystemInit+0x64>)
 80003d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000
 80003e4:	f8ff0000 	.word	0xf8ff0000
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <Gpio_Init>:
static volatile uint16_t GpioAState = 0; //
static volatile uint16_t GpioBState = 0; //
static volatile uint16_t GpioCState = 0; //
//-----------------------------------------------------------------------------
//Инициализация переферии.
void Gpio_Init (void){
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  
  //Включаем тактирование порта A, B, C, D и модуля альтернативных функций.
  RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN |
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <Gpio_Init+0x5c>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a14      	ldr	r2, [pc, #80]	; (8000448 <Gpio_Init+0x5c>)
 80003f6:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 80003fa:	6193      	str	r3, [r2, #24]
                   RCC_APB2ENR_IOPBEN |
                   RCC_APB2ENR_IOPCEN |
                   RCC_APB2ENR_IOPDEN |
                   RCC_APB2ENR_AFIOEN);
  //Отключение JTAG-D от порта PA15, отладка через SWD активна.
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE; 
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <Gpio_Init+0x60>)
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	4a12      	ldr	r2, [pc, #72]	; (800044c <Gpio_Init+0x60>)
 8000402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000406:	6053      	str	r3, [r2, #4]
  //RCC->CFGR |= RCC_CFGR_MCO_HSI;   //Подключение к выводу PA8 частоту HSI.
  //RCC->CFGR |= RCC_CFGR_MCO_HSE;      //Подключение к выводу PA8 частоту HSE.
  //RCC->CFGR |= RCC_CFGR_MCO_PLL;   //Подключение к выводу PA8 частоту PLL/2. 
  //--------------------
  //PC13 - Led.
  GPIOC->CRH &= ~GPIO_CRH_CNF13;//выход, режим - push-pull.
 8000408:	4b11      	ldr	r3, [pc, #68]	; (8000450 <Gpio_Init+0x64>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	4a10      	ldr	r2, [pc, #64]	; (8000450 <Gpio_Init+0x64>)
 800040e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000412:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= GPIO_CRH_MODE13;//тактирование 50МГц.
 8000414:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <Gpio_Init+0x64>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <Gpio_Init+0x64>)
 800041a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800041e:	6053      	str	r3, [r2, #4]
  //--------------------
  //Управление двигателем.
  //IN1 - PA5
  //IN2 - PA4
  //IN3 - PA3
  GPIOA->CRL &= ~(GPIO_CRL_CNF5  |GPIO_CRL_CNF4   | GPIO_CRL_CNF3 |
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <Gpio_Init+0x68>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <Gpio_Init+0x68>)
 8000426:	f023 13cc 	bic.w	r3, r3, #13369548	; 0xcc00cc
 800042a:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 800042e:	6013      	str	r3, [r2, #0]
		  	  	  GPIO_CRL_CNF2  |GPIO_CRL_CNF1   | GPIO_CRL_CNF0); //выход, режим - push-pull.

  GPIOA->CRL |=  (GPIO_CRL_MODE5 | GPIO_CRL_MODE4 | GPIO_CRL_MODE3 |
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <Gpio_Init+0x68>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a07      	ldr	r2, [pc, #28]	; (8000454 <Gpio_Init+0x68>)
 8000436:	f043 1333 	orr.w	r3, r3, #3342387	; 0x330033
 800043a:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 800043e:	6013      	str	r3, [r2, #0]
                  GPIO_CRH_MODE12 );//тактирование 50МГц.
  GPIOD->CRL |= ( GPIO_CRL_MODE2  );
	//--------------------
	 *
	 */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000
 800044c:	40010000 	.word	0x40010000
 8000450:	40011000 	.word	0x40011000
 8000454:	40010800 	.word	0x40010800

08000458 <I2C_Int_Handler>:
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
}
//*******************************************************************************************
//*******************************************************************************************
static void I2C_Int_Handler(I2C_TypeDef *i2c, uint8_t slaveAddr){
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t sr1 = i2c->SR1;//Чтениех этих регистров сбрасывает флаги событий I2C.
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	60fb      	str	r3, [r7, #12]
	//volatile uint32_t sr2 = i2c->SR2;
	//---------------------
	//Start condition generated. Clear: read SR1, write to DR
	if(sr1 & I2C_SR1_SB)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	2b00      	cmp	r3, #0
 8000472:	d008      	beq.n	8000486 <I2C_Int_Handler+0x2e>
		{
		  i2c->DR = I2C_ADDRESS(slaveAddr, I2C_Mode);
 8000474:	78fb      	ldrb	r3, [r7, #3]
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	4a26      	ldr	r2, [pc, #152]	; (8000514 <I2C_Int_Handler+0xbc>)
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	4313      	orrs	r3, r2
 800047e:	461a      	mov	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	611a      	str	r2, [r3, #16]
		  return;
 8000484:	e042      	b.n	800050c <I2C_Int_Handler+0xb4>
		}
	//Address sent. Clear: read SR1, read SR2
	else if(sr1 & I2C_SR1_ADDR)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	f003 0302 	and.w	r3, r3, #2
 800048c:	2b00      	cmp	r3, #0
 800048e:	d010      	beq.n	80004b2 <I2C_Int_Handler+0x5a>
	   {
	      if(I2C_Mode == I2C_MODE_WRITE)
 8000490:	4b20      	ldr	r3, [pc, #128]	; (8000514 <I2C_Int_Handler+0xbc>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d136      	bne.n	8000506 <I2C_Int_Handler+0xae>
			  {
	    	  	  i2c->DR = I2C_pBuf[0];
 8000498:	4b1f      	ldr	r3, [pc, #124]	; (8000518 <I2C_Int_Handler+0xc0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	461a      	mov	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	611a      	str	r2, [r3, #16]
	    	  	  I2C_TxCnt++;
 80004a4:	4b1d      	ldr	r3, [pc, #116]	; (800051c <I2C_Int_Handler+0xc4>)
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <I2C_Int_Handler+0xc4>)
 80004ae:	801a      	strh	r2, [r3, #0]
//						// не дописано! не использовать
//						I2C_NUMB->DR = (uint8_t)AddrReg;            // First byte
//						AddrReg>>=8;
//					 }
//			  }
	      return;
 80004b0:	e029      	b.n	8000506 <I2C_Int_Handler+0xae>
//	else if(sr1 & I2C_SR1_AF)
//		{
//			I2C_TxCnt++;
//		}
	//Data Register Empty (transmitters).
	else if(sr1 & I2C_SR1_TXE)
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d01f      	beq.n	80004fc <I2C_Int_Handler+0xa4>
		{
			i2c->DR = I2C_pBuf[I2C_TxCnt];
 80004bc:	4b16      	ldr	r3, [pc, #88]	; (8000518 <I2C_Int_Handler+0xc0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a16      	ldr	r2, [pc, #88]	; (800051c <I2C_Int_Handler+0xc4>)
 80004c2:	8812      	ldrh	r2, [r2, #0]
 80004c4:	4413      	add	r3, r2
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	461a      	mov	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	611a      	str	r2, [r3, #16]
			I2C_TxCnt++;
 80004ce:	4b13      	ldr	r3, [pc, #76]	; (800051c <I2C_Int_Handler+0xc4>)
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	3301      	adds	r3, #1
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <I2C_Int_Handler+0xc4>)
 80004d8:	801a      	strh	r2, [r3, #0]
			if(I2C_TxCnt >= I2C_TxSize)
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <I2C_Int_Handler+0xc8>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	b29a      	uxth	r2, r3
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <I2C_Int_Handler+0xc4>)
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d810      	bhi.n	800050a <I2C_Int_Handler+0xb2>
				{
					I2C_TxCnt = 0;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <I2C_Int_Handler+0xc4>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	801a      	strh	r2, [r3, #0]
					i2c->CR1 |= I2C_CR1_STOP;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]
				}
			return;
 80004fa:	e006      	b.n	800050a <I2C_Int_Handler+0xb2>
		}
	//Byte Transfer Finished.
	else if(sr1 & I2C_SR1_BTF)
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	2b00      	cmp	r3, #0
 8000504:	e002      	b.n	800050c <I2C_Int_Handler+0xb4>
	      return;
 8000506:	bf00      	nop
 8000508:	e000      	b.n	800050c <I2C_Int_Handler+0xb4>
			return;
 800050a:	bf00      	nop
//	if(sr1 & I2C_SR1_TXE)
//		{
//			if(TxCounter < I2C_TxSize) i2c->DR   = I2C_pBuf[TxCounter++];
//			else		               i2c->CR1 |= I2C_CR1_STOP;
//		}
}
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000039 	.word	0x20000039
 8000518:	20000034 	.word	0x20000034
 800051c:	20000030 	.word	0x20000030
 8000520:	20000038 	.word	0x20000038

08000524 <I2C1_EV_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание I2C1.
void I2C1_EV_IRQHandler(void){
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

//	I2C_handler(I2C1, addr);
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <I2C2_EV_IRQHandler>:
//**********************************************************
//Прерывание I2C2.
void I2C2_EV_IRQHandler(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

	I2C_Int_Handler(I2C2, I2C_SlaveAddr);
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <I2C2_EV_IRQHandler+0x14>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	4803      	ldr	r0, [pc, #12]	; (8000548 <I2C2_EV_IRQHandler+0x18>)
 800053c:	f7ff ff8c 	bl	8000458 <I2C_Int_Handler>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000032 	.word	0x20000032
 8000548:	40005800 	.word	0x40005800

0800054c <SPI2_IRQHandler>:
	//--------------------
	return (uint8_t)SPI2->DR;
} 
//-----------------------------------------------------------------------------
//Прерываени от SPI2.
void SPI2_IRQHandler(void){
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  
  //uint16_t tmp;
  //--------------------
  //причина прерывания - окончание передачи байта
  if(SPI2->SR & SPI_SR_TXE)
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <SPI2_IRQHandler+0x34>)
 8000552:	689b      	ldr	r3, [r3, #8]

      //LC2SostGreenLedToggel;//Мигаем для отладки          
    }
  //--------------------
  //причина прерывания - принят байт данных
  if(SPI2->SR &= SPI_SR_RXNE)
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <SPI2_IRQHandler+0x34>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <SPI2_IRQHandler+0x34>)
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	6093      	str	r3, [r2, #8]
      //tmp = SPI1->DR;                //прочитать принятые данные
      //выполняем какие-то действия      
    }
  //--------------------
  //причина прерывания - ошибка режима ведущего
  if(SPI2->SR &= SPI_SR_MODF)
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <SPI2_IRQHandler+0x34>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <SPI2_IRQHandler+0x34>)
 8000566:	f003 0320 	and.w	r3, r3, #32
 800056a:	6093      	str	r3, [r2, #8]
    {
      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
    }
  //--------------------
  //причина прерывания - переполнение приемника данных
  if(SPI2->SR &= SPI_SR_OVR)
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <SPI2_IRQHandler+0x34>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <SPI2_IRQHandler+0x34>)
 8000572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000576:	6093      	str	r3, [r2, #8]
//  if(SPI2->SR &= SSPI_SR_CRCERR)
//    {
//      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
//    }
  //--------------------
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40003800 	.word	0x40003800

08000584 <Init_RCC>:
#include "sys_ST.h"

//**********************************************************************************************
//**********************************************************************************************
//Настройка тактирования 72МГц. Внешний кварц 8 МГц.
static uint32_t Init_RCC(void){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
	//--------------------
	//SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/        
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);//Enable HSE.
 8000592:	4b3a      	ldr	r3, [pc, #232]	; (800067c <Init_RCC+0xf8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a39      	ldr	r2, [pc, #228]	; (800067c <Init_RCC+0xf8>)
 8000598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800059c:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready and if Time out is reached exit */
	do{
			HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800059e:	4b37      	ldr	r3, [pc, #220]	; (800067c <Init_RCC+0xf8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a6:	603b      	str	r3, [r7, #0]
			StartUpCounter++;  
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3301      	adds	r3, #1
 80005ac:	607b      	str	r3, [r7, #4]
	  }
	while((HSEStatus == 0) && (StartUpCounter != 0xFFFF));
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d104      	bne.n	80005be <Init_RCC+0x3a>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d1ef      	bne.n	800059e <Init_RCC+0x1a>
	//--------------------
	if ((RCC->CR & RCC_CR_HSERDY) != 0) HSEStatus = (uint32_t)0x01;
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <Init_RCC+0xf8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <Init_RCC+0x4c>
 80005ca:	2301      	movs	r3, #1
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	e001      	b.n	80005d4 <Init_RCC+0x50>
	else                                HSEStatus = (uint32_t)0x00;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
	//--------------------
	if(HSEStatus == (uint32_t)0x01)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d149      	bne.n	800066e <Init_RCC+0xea>
		{
			/* Enable Prefetch Buffer */
			FLASH->ACR |= FLASH_ACR_PRFTBE;
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <Init_RCC+0xfc>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a28      	ldr	r2, [pc, #160]	; (8000680 <Init_RCC+0xfc>)
 80005e0:	f043 0310 	orr.w	r3, r3, #16
 80005e4:	6013      	str	r3, [r2, #0]
			/* Flash 2 wait state */
			FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80005e6:	4b26      	ldr	r3, [pc, #152]	; (8000680 <Init_RCC+0xfc>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a25      	ldr	r2, [pc, #148]	; (8000680 <Init_RCC+0xfc>)
 80005ec:	f023 0307 	bic.w	r3, r3, #7
 80005f0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;  
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <Init_RCC+0xfc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a22      	ldr	r2, [pc, #136]	; (8000680 <Init_RCC+0xfc>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6013      	str	r3, [r2, #0]
			//--------------------
			//Настройка тактирования шин AHB, APB1 и APB2.
			RCC->CFGR |= (uint32_t)(RCC_CFGR_HPRE_DIV1  | // AHB prescaler. SYSCLK not divided
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <Init_RCC+0xf8>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <Init_RCC+0xf8>)
 8000604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000608:	6053      	str	r3, [r2, #4]
									RCC_CFGR_PPRE2_DIV1 | // APB2 = AHB. APB2 Fmax = 72MHz.
									RCC_CFGR_PPRE1_DIV2); // APB1 = (AHB / 2). APB1 Fmax = 36MHz.

			//--------------------
			//PLL configuration: = HSE * 9 = 72 MHz */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <Init_RCC+0xf8>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4a1b      	ldr	r2, [pc, #108]	; (800067c <Init_RCC+0xf8>)
 8000610:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000614:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_Msk        |  // HSE oscillator clock selected as PLL input clock
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <Init_RCC+0xf8>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <Init_RCC+0xf8>)
 800061c:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000620:	6053      	str	r3, [r2, #4]
															//RCC_CFGR_PLLXTPRE_HSE_Div2 |  // HSE clock divided by 2                                
															RCC_CFGR_PLLMULL9);
			/* Enable PLL */
			RCC->CR |= RCC_CR_PLLON;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <Init_RCC+0xf8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <Init_RCC+0xf8>)
 8000628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800062c:	6013      	str	r3, [r2, #0]
			/* Wait till PLL is ready */
			while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 800062e:	bf00      	nop
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <Init_RCC+0xf8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0f9      	beq.n	8000630 <Init_RCC+0xac>
			/* Select PLL as system clock source */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <Init_RCC+0xf8>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <Init_RCC+0xf8>)
 8000642:	f023 0303 	bic.w	r3, r3, #3
 8000646:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <Init_RCC+0xf8>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <Init_RCC+0xf8>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	6053      	str	r3, [r2, #4]
			/* Wait till PLL is used as system clock source */
			while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)  {}        
 8000654:	bf00      	nop
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <Init_RCC+0xf8>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f003 030c 	and.w	r3, r3, #12
 800065e:	2b08      	cmp	r3, #8
 8000660:	d1f9      	bne.n	8000656 <Init_RCC+0xd2>
			RCC->CR |= RCC_CR_CSSON; //Включаем защиту HSE от сбоев - CSS.
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <Init_RCC+0xf8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <Init_RCC+0xf8>)
 8000668:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800066c:	6013      	str	r3, [r2, #0]
	else
		{
				/* If HSE fails to start-up, the application will have wrong clock 
				 configuration. User can add here some code to deal with this error */
		} 
	return HSEStatus;
 800066e:	683b      	ldr	r3, [r7, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000
 8000680:	40022000 	.word	0x40022000

08000684 <Sys_Init>:
//*****************************************************************************
void Sys_Init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	
  //Reset the RCC clock configuration to the default reset state(for debug purpose).
  RCC->CR 	|= (uint32_t)0x00000001;	/* Set HSION bit */
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <Sys_Init+0x54>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <Sys_Init+0x54>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF0FF0000;	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <Sys_Init+0x54>)
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	490f      	ldr	r1, [pc, #60]	; (80006d8 <Sys_Init+0x54>)
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <Sys_Init+0x58>)
 800069c:	4013      	ands	r3, r2
 800069e:	604b      	str	r3, [r1, #4]
  RCC->CR 	&= (uint32_t)0xFEF6FFFF;  /* Reset HSEON, CSSON and PLLON bits */
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <Sys_Init+0x54>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <Sys_Init+0x54>)
 80006a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006ae:	6013      	str	r3, [r2, #0]
  RCC->CR 	&= (uint32_t)0xFFFBFFFF;  /* Reset HSEBYP bit */
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <Sys_Init+0x54>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <Sys_Init+0x54>)
 80006b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ba:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <Sys_Init+0x54>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <Sys_Init+0x54>)
 80006c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006c6:	6053      	str	r3, [r2, #4]
  RCC->CIR 	 = 0x009F0000;  				  /* Disable all interrupts and clear pending bits  */
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <Sys_Init+0x54>)
 80006ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006ce:	609a      	str	r2, [r3, #8]
  //RCC->CFGR2 = 0x00000000;      			/* Reset CFGR2 register */  
	
  Init_RCC();//Настройка тактирования микроконтроллера. Внешний кварц 8 МГц.
 80006d0:	f7ff ff58 	bl	8000584 <Init_RCC>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	f0ff0000 	.word	0xf0ff0000

080006e0 <NMI_Handler>:
	return (*(__IO uint32_t*)address);
}
//**********************************************************************************************
//**********************************************************************************************
//Прерываени блока CSS. Возникает при сбое тактирования HSE.
void NMI_Handler( void){
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  //RCC->CIR |= RCC_CIR_CSSC;//Очищаем флаг прерывания CSS иначе прерывание будет генерироваться бесконечно.
	//NVIC_SystemReset();
  //LC1SostRedLedOn;
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <HardFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void HardFault_Handler( void){
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
//  if(SCB->HFSR & SCB_HFSR_FORCED)   LC1SostRedLedOn();
//  if(SCB->HFSR & SCB_HFSR_DEBUGEVT) LC2SostRedLedOn();
	
//	LC1SostRedLedOn();
//	LC2SostRedLedOn();
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <MemManage_Handler>:
//*****************************************************************************
//*****************************************************************************
void MemManage_Handler( void){
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

//  LC2SostRedLedOn();
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <BusFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void BusFault_Handler( void){
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

//  LC2SostGreenLedOn();
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <UsageFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void UsageFault_Handler( void){
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <SVC_Handler>:
//*****************************************************************************
//*****************************************************************************
void SVC_Handler( void){
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <SysTick_Init>:

#include "sys_tick_ST.h"

//-----------------------------------------------------------------------------
//Инициализация системного таймера SysTick.
void SysTick_Init(void){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

	SysTick->LOAD = TimerTick;	//Загрузка значения.
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <SysTick_Init+0x20>)
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <SysTick_Init+0x24>)
 8000730:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = TimerTick;	//Обнуление таймера. 
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Init+0x20>)
 8000734:	4a05      	ldr	r2, [pc, #20]	; (800074c <SysTick_Init+0x24>)
 8000736:	609a      	str	r2, [r3, #8]
                              //При записи любого значения этот регист обнуляется, с обнулением флага COUNTFLAG. 
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | //Тактирование частотой процессора (24МГц).
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <SysTick_Init+0x20>)
 800073a:	2207      	movs	r2, #7
 800073c:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk   | //Рразрешение прерывания.
					SysTick_CTRL_ENABLE_Msk;     //Резрешение таймеру считать.
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010
 800074c:	0001193f 	.word	0x0001193f

08000750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db0b      	blt.n	800077a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 021f 	and.w	r2, r3, #31
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <__NVIC_EnableIRQ+0x34>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	2001      	movs	r0, #1
 8000772:	fa00 f202 	lsl.w	r2, r0, r2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100

08000788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db0a      	blt.n	80007b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	490c      	ldr	r1, [pc, #48]	; (80007d4 <__NVIC_SetPriority+0x4c>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b0:	e00a      	b.n	80007c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4908      	ldr	r1, [pc, #32]	; (80007d8 <__NVIC_SetPriority+0x50>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	3b04      	subs	r3, #4
 80007c0:	0112      	lsls	r2, r2, #4
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	761a      	strb	r2, [r3, #24]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <TIM3_InitForPWM>:

#include "timers_ST.h"

//*******************************************************************************************
//*******************************************************************************************
void TIM3_InitForPWM(void){
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

	//Включение тактирования таймера.
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <TIM3_InitForPWM+0xd0>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	4a31      	ldr	r2, [pc, #196]	; (80008ac <TIM3_InitForPWM+0xd0>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	61d3      	str	r3, [r2, #28]
	//Выбор источника тактирования.

	//Прескаллер.
	//APB1_CLK = 36MHz, TIM3_CLK = APB1_CLK * 2 = 72MHz.
	TIM3->PSC = (3 - 1);//таймер будет тактироваться с частотой 72МГц/1000=72кГц.
 80007ec:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
	//Auto reload register. - это значение, до которого будет считать таймер.
	TIM3->ARR = (1000 - 1);
 80007f2:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 80007f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
	//Задаем режим работы - PWM mode on OC1
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | //OC1M: Output compare 1 mode - 110: PWM mode 1.
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a2c      	ldr	r2, [pc, #176]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 8000800:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000804:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC1PE;						 //OC1PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.

	//Задаем режим работы - PWM mode on OC2
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | //OC1M: Output compare 1 mode - 110: PWM mode 1.
 8000806:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a29      	ldr	r2, [pc, #164]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 800080c:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000810:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC2PE;						 //OC1PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.

	//Задаем режим работы - PWM mode on OC3
	TIM3->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | //OC1M: Output compare 1 mode - 110: PWM mode 1.
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 8000818:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 800081c:	61d3      	str	r3, [r2, #28]
				   TIM_CCMR2_OC3PE;						 //OC1PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.

	TIM3->CCER |= TIM_CCER_CC1E;//Enable CC1 - включение первого канала
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 8000820:	6a1b      	ldr	r3, [r3, #32]
 8000822:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC2E;//Enable CC2 - включение второго канала
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 800082c:	6a1b      	ldr	r3, [r3, #32]
 800082e:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC3E;//Enable CC3 - включение третьего канала.
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 8000838:	6a1b      	ldr	r3, [r3, #32]
 800083a:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 800083c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000840:	6213      	str	r3, [r2, #32]


	//Настройка ножки микроконтроллера.
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <TIM3_InitForPWM+0xd0>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a19      	ldr	r2, [pc, #100]	; (80008ac <TIM3_InitForPWM+0xd0>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6193      	str	r3, [r2, #24]

	GPIOA->CRL |= GPIO_CRL_CNF6_1;//PA6(TIM3_CH1) - выход, альтернативный режим push-pull.
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <TIM3_InitForPWM+0xd8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <TIM3_InitForPWM+0xd8>)
 8000854:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000858:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE6; //PA6(TIM3_CH1) - тактирование 50МГц.
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <TIM3_InitForPWM+0xd8>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <TIM3_InitForPWM+0xd8>)
 8000860:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000864:	6013      	str	r3, [r2, #0]

	GPIOA->CRL |= GPIO_CRL_CNF7_1;//PA7(TIM3_CH2) - выход, альтернативный режим push-pull.
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <TIM3_InitForPWM+0xd8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <TIM3_InitForPWM+0xd8>)
 800086c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000870:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE7; //PA7(TIM3_CH2) - тактирование 50МГц.
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <TIM3_InitForPWM+0xd8>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <TIM3_InitForPWM+0xd8>)
 8000878:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800087c:	6013      	str	r3, [r2, #0]

	GPIOB->CRL |= GPIO_CRL_CNF0_1;//PB0(TIM3_CH3) - выход, альтернативный режим push-pull.
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <TIM3_InitForPWM+0xdc>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <TIM3_InitForPWM+0xdc>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE0; //PB0(TIM3_CH3) - тактирование 50МГц.
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <TIM3_InitForPWM+0xdc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <TIM3_InitForPWM+0xdc>)
 8000890:	f043 0303 	orr.w	r3, r3, #3
 8000894:	6013      	str	r3, [r2, #0]

	//Включение DMA для работы с таймером.
//	TIM3->DIER |= TIM_DIER_CC1DE;
	//Включение таймера
	TIM3->CR1 |= TIM_CR1_CEN;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <TIM3_InitForPWM+0xd4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6013      	str	r3, [r2, #0]
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40000400 	.word	0x40000400
 80008b4:	40010800 	.word	0x40010800
 80008b8:	40010c00 	.word	0x40010c00

080008bc <TIM4_Init>:
//*******************************************************************************************
//*******************************************************************************************
void TIM4_Init(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

	//Включение тактирования таймера.
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <TIM4_Init+0x44>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <TIM4_Init+0x44>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	61d3      	str	r3, [r2, #28]

	//Прескаллер.
	//APB1_CLK = 36MHz, TIM4_CLK = APB1_CLK * 2 = 72MHz.
	TIM4->PSC = (3 - 1);//таймер будет тактироваться с частотой 72МГц/3 = 24МГц.
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <TIM4_Init+0x48>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
	//Auto reload register - это значение, до которого будет считать таймер.
	TIM4->ARR = (1000 - 1);
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <TIM4_Init+0x48>)
 80008d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d8:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->DIER |= TIM_DIER_UIE;//Update interrupt enable
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <TIM4_Init+0x48>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <TIM4_Init+0x48>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	60d3      	str	r3, [r2, #12]
	TIM4->CR1   = TIM_CR1_CEN |//Counter enable
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <TIM4_Init+0x48>)
 80008e8:	2281      	movs	r2, #129	; 0x81
 80008ea:	601a      	str	r2, [r3, #0]
				  TIM_CR1_ARPE;//Auto-reload preload enable


	NVIC_SetPriority(TIM4_IRQn, 15);
 80008ec:	210f      	movs	r1, #15
 80008ee:	201e      	movs	r0, #30
 80008f0:	f7ff ff4a 	bl	8000788 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 80008f4:	201e      	movs	r0, #30
 80008f6:	f7ff ff2b 	bl	8000750 <__NVIC_EnableIRQ>
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	40000800 	.word	0x40000800

08000908 <Led_Blink>:
	riseReg  = (oldState ^ event) & event;
	oldState = event;
	if(riseReg) (*var)--;
}
//************************************************************
void Led_Blink(void){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

	if(Blink(INTERVAL_50_mS)) Led_PC13_On();
 800090c:	2004      	movs	r0, #4
 800090e:	f7ff fcf5 	bl	80002fc <Blink>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d004      	beq.n	8000922 <Led_Blink+0x1a>
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <Led_Blink+0x28>)
 800091a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091e:	611a      	str	r2, [r3, #16]
	else					  Led_PC13_Off();
}
 8000920:	e003      	b.n	800092a <Led_Blink+0x22>
	else					  Led_PC13_Off();
 8000922:	4b03      	ldr	r3, [pc, #12]	; (8000930 <Led_Blink+0x28>)
 8000924:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000928:	611a      	str	r2, [r3, #16]
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40011000 	.word	0x40011000

08000934 <PWM_SetVal>:




//************************************************************
void PWM_SetVal(uint8_t output, uint32_t pwmVal){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]

	if(output == EN1) TIM3->CCR1 = pwmVal;
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d102      	bne.n	800094c <PWM_SetVal+0x18>
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <PWM_SetVal+0x3c>)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	6353      	str	r3, [r2, #52]	; 0x34
	if(output == EN2) TIM3->CCR2 = pwmVal;
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d102      	bne.n	8000958 <PWM_SetVal+0x24>
 8000952:	4a07      	ldr	r2, [pc, #28]	; (8000970 <PWM_SetVal+0x3c>)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	6393      	str	r3, [r2, #56]	; 0x38
	if(output == EN3) TIM3->CCR3 = pwmVal;
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b03      	cmp	r3, #3
 800095c:	d102      	bne.n	8000964 <PWM_SetVal+0x30>
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <PWM_SetVal+0x3c>)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40000400 	.word	0x40000400

08000974 <main>:
//*******************************************************************************************
//*******************************************************************************************
int main(void){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

	//-----------------------------
	//Drivers.
	Sys_Init();
 8000978:	f7ff fe84 	bl	8000684 <Sys_Init>
	Gpio_Init();
 800097c:	f7ff fd36 	bl	80003ec <Gpio_Init>
	SysTick_Init();
 8000980:	f7ff fed2 	bl	8000728 <SysTick_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000984:	b662      	cpsie	i
	__enable_irq();
	//***********************************************

	TIM3_InitForPWM();
 8000986:	f7ff ff29 	bl	80007dc <TIM3_InitForPWM>
//	TIM3->CCR1 = 100;
//	TIM3->CCR2 = 100;
//	TIM3->CCR3 = 100;

	TIM4_Init();
 800098a:	f7ff ff97 	bl	80008bc <TIM4_Init>



	//***********************************************
	//__disable_irq();
	msDelay(500);
 800098e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000992:	f7ff fcdd 	bl	8000350 <msDelay>
	while(1)
		{
			//msDelay(10);
			//***********************************************
			//Мигание светодиодами.
			Led_Blink();
 8000996:	f7ff ffb7 	bl	8000908 <Led_Blink>
//			if(Blink(INTERVAL_5_mS)) MOTOR_IN1_On();
//			else					 MOTOR_IN1_Off();


			//Фаза 1.
			MOTOR_IN1_On();
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <main+0xf4>)
 800099c:	2220      	movs	r2, #32
 800099e:	611a      	str	r2, [r3, #16]
			PWM_SetVal(EN1, EN_ON);
 80009a0:	f240 31b6 	movw	r1, #950	; 0x3b6
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ffc5 	bl	8000934 <PWM_SetVal>

			MOTOR_IN2_Off();
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <main+0xf4>)
 80009ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009b0:	611a      	str	r2, [r3, #16]
			PWM_SetVal(EN2, EN_ON);
 80009b2:	f240 31b6 	movw	r1, #950	; 0x3b6
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff ffbc 	bl	8000934 <PWM_SetVal>

			PWM_SetVal(EN3, EN_OFF);
 80009bc:	210a      	movs	r1, #10
 80009be:	2003      	movs	r0, #3
 80009c0:	f7ff ffb8 	bl	8000934 <PWM_SetVal>

			msDelay(MOTOR_DELAY);
 80009c4:	2006      	movs	r0, #6
 80009c6:	f7ff fcc3 	bl	8000350 <msDelay>

			//Фаза 2.
			PWM_SetVal(EN2, EN_OFF);
 80009ca:	210a      	movs	r1, #10
 80009cc:	2002      	movs	r0, #2
 80009ce:	f7ff ffb1 	bl	8000934 <PWM_SetVal>

			MOTOR_IN3_Off();
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <main+0xf4>)
 80009d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d8:	611a      	str	r2, [r3, #16]
			PWM_SetVal(EN3, EN_ON);
 80009da:	f240 31b6 	movw	r1, #950	; 0x3b6
 80009de:	2003      	movs	r0, #3
 80009e0:	f7ff ffa8 	bl	8000934 <PWM_SetVal>

			msDelay(MOTOR_DELAY);
 80009e4:	2006      	movs	r0, #6
 80009e6:	f7ff fcb3 	bl	8000350 <msDelay>

			//Фаза 3.
			PWM_SetVal(EN1, EN_OFF);
 80009ea:	210a      	movs	r1, #10
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff ffa1 	bl	8000934 <PWM_SetVal>

			MOTOR_IN2_On();
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <main+0xf4>)
 80009f4:	2208      	movs	r2, #8
 80009f6:	611a      	str	r2, [r3, #16]
			PWM_SetVal(EN2, EN_ON);
 80009f8:	f240 31b6 	movw	r1, #950	; 0x3b6
 80009fc:	2002      	movs	r0, #2
 80009fe:	f7ff ff99 	bl	8000934 <PWM_SetVal>

			msDelay(MOTOR_DELAY);
 8000a02:	2006      	movs	r0, #6
 8000a04:	f7ff fca4 	bl	8000350 <msDelay>

			//Фаза 4.
			MOTOR_IN1_Off();
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <main+0xf4>)
 8000a0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a0e:	611a      	str	r2, [r3, #16]
			PWM_SetVal(EN1, EN_ON);
 8000a10:	f240 31b6 	movw	r1, #950	; 0x3b6
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff ff8d 	bl	8000934 <PWM_SetVal>

			PWM_SetVal(EN3, EN_OFF);
 8000a1a:	210a      	movs	r1, #10
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f7ff ff89 	bl	8000934 <PWM_SetVal>

			msDelay(MOTOR_DELAY);
 8000a22:	2006      	movs	r0, #6
 8000a24:	f7ff fc94 	bl	8000350 <msDelay>

			//Фаза 5.
			PWM_SetVal(EN2, EN_OFF);
 8000a28:	210a      	movs	r1, #10
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f7ff ff82 	bl	8000934 <PWM_SetVal>

			MOTOR_IN3_On();
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <main+0xf4>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	611a      	str	r2, [r3, #16]
			PWM_SetVal(EN3, EN_ON);
 8000a36:	f240 31b6 	movw	r1, #950	; 0x3b6
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f7ff ff7a 	bl	8000934 <PWM_SetVal>

			msDelay(MOTOR_DELAY);
 8000a40:	2006      	movs	r0, #6
 8000a42:	f7ff fc85 	bl	8000350 <msDelay>

			//Фаза 6.
			PWM_SetVal(EN1, EN_OFF);
 8000a46:	210a      	movs	r1, #10
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ff73 	bl	8000934 <PWM_SetVal>

			MOTOR_IN2_Off();
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <main+0xf4>)
 8000a50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a54:	611a      	str	r2, [r3, #16]
			PWM_SetVal(EN2, EN_ON);
 8000a56:	f240 31b6 	movw	r1, #950	; 0x3b6
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f7ff ff6a 	bl	8000934 <PWM_SetVal>

			msDelay(MOTOR_DELAY);
 8000a60:	2006      	movs	r0, #6
 8000a62:	f7ff fc75 	bl	8000350 <msDelay>
			Led_Blink();
 8000a66:	e796      	b.n	8000996 <main+0x22>
 8000a68:	40010800 	.word	0x40010800

08000a6c <SysTick_Handler>:
	//************************************************************************************
}
//*******************************************************************************************
//*******************************************************************************************
//Прерывание каждую милисекунду.
void SysTick_Handler(void){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
//		{
//			msCountForDS18B20 = 0;
//			FlagsStr.DS18B20  = 1;
//		}
	//-----------------------------
	msDelay_Loop();
 8000a70:	f7ff fc60 	bl	8000334 <msDelay_Loop>
	Blink_Loop();
 8000a74:	f7ff fb7c 	bl	8000170 <Blink_Loop>
	Encoder()->Loop();
 8000a78:	f000 f8ec 	bl	8000c54 <Encoder>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	4798      	blx	r3
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <TIM4_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание каждую милисекунду.
void TIM4_IRQHandler(void){
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

	TIM4->SR &= ~TIM_SR_UIF;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <TIM4_IRQHandler+0x24>)
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <TIM4_IRQHandler+0x24>)
 8000a92:	f023 0301 	bic.w	r3, r3, #1
 8000a96:	6113      	str	r3, [r2, #16]

	Led_PC13_Toggel();
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <TIM4_IRQHandler+0x28>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <TIM4_IRQHandler+0x28>)
 8000a9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40000800 	.word	0x40000800
 8000ab0:	40011000 	.word	0x40011000

08000ab4 <Encoder_Turn>:
							   .Loop          = &Encoder_Loop,
							   .Rotation      = &Encoder_Turn};

static uint8_t EncoderStateReg = ENCODER_NO_TURN;//Регистр состияния энкодера.
//-----------------------------------------------------------------------------
static void Encoder_Turn(uint16_t *parameter, uint16_t min, uint16_t max){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	807b      	strh	r3, [r7, #2]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	803b      	strh	r3, [r7, #0]

	//--------------------
	switch(EncoderStateReg){
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <Encoder_Turn+0x74>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d002      	beq.n	8000ad2 <Encoder_Turn+0x1e>
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d013      	beq.n	8000af8 <Encoder_Turn+0x44>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
			EncoderStateReg = ENCODER_NO_TURN;
		break;
		//-----------
		default:
		break;	
 8000ad0:	e025      	b.n	8000b1e <Encoder_Turn+0x6a>
			if ((*parameter) < max)(*parameter)++;    //Проверка на  максимум.
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	883a      	ldrh	r2, [r7, #0]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d906      	bls.n	8000aea <Encoder_Turn+0x36>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	801a      	strh	r2, [r3, #0]
 8000ae8:	e002      	b.n	8000af0 <Encoder_Turn+0x3c>
			else                   (*parameter) = min;//Закольцовывание редактирования параметра.
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	887a      	ldrh	r2, [r7, #2]
 8000aee:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <Encoder_Turn+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
		break;
 8000af6:	e012      	b.n	8000b1e <Encoder_Turn+0x6a>
			if ((*parameter) > min)(*parameter)--;    //Проверка на минимум.
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	887a      	ldrh	r2, [r7, #2]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d206      	bcs.n	8000b10 <Encoder_Turn+0x5c>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	801a      	strh	r2, [r3, #0]
 8000b0e:	e002      	b.n	8000b16 <Encoder_Turn+0x62>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	883a      	ldrh	r2, [r7, #0]
 8000b14:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <Encoder_Turn+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		break;
 8000b1c:	bf00      	nop
		//-----------
	}
	//--------------------	
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	2000003a 	.word	0x2000003a

08000b2c <Encoder_Loop>:
//-----------------------------------------------------------------------------
/*Когда энкодер не вращают на обоих его выводах(A и В) единицы(внутряння подтяжка МК).Это состояние 3 энкодера - начальное состояние энкодера.
*Так-же начальным состоянием может быть  состояние энкодера когда А и В ровны 0.
*Когда вращаю вправо, то после состояния 3 энкодер передет в состояние 1 (А=1, В=0).
*Когда вращают влево, то после состояния 3 энкодер прердет в состояние 2 (А=0, В=1). */
static void Encoder_Loop(void){
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	static uint8_t  cycle   = 0;
	static uint8_t  msCount = 0;
	static uint16_t but[3]  = {0, 0, 0};
	//--------------------
	//Обработка вращения энкодера.
	switch(EncoderStateReg){
 8000b30:	4b42      	ldr	r3, [pc, #264]	; (8000c3c <Encoder_Loop+0x110>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d002      	beq.n	8000b3e <Encoder_Loop+0x12>
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d010      	beq.n	8000b5e <Encoder_Loop+0x32>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
				} 			
		break;
		//-----------
		default:
		break;	
 8000b3c:	e031      	b.n	8000ba2 <Encoder_Loop+0x76>
			if(!(EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 8000b3e:	4b40      	ldr	r3, [pc, #256]	; (8000c40 <Encoder_Loop+0x114>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d128      	bne.n	8000b9c <Encoder_Loop+0x70>
 8000b4a:	4b3d      	ldr	r3, [pc, #244]	; (8000c40 <Encoder_Loop+0x114>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d122      	bne.n	8000b9c <Encoder_Loop+0x70>
					EncoderStateReg = ENCODER_TURN;
 8000b56:	4b39      	ldr	r3, [pc, #228]	; (8000c3c <Encoder_Loop+0x110>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
		break;
 8000b5c:	e01e      	b.n	8000b9c <Encoder_Loop+0x70>
			if( !(EncoderPORT->IDR & EncoderPinA) && (EncoderPORT->IDR & EncoderPinB))
 8000b5e:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <Encoder_Loop+0x114>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d108      	bne.n	8000b7c <Encoder_Loop+0x50>
 8000b6a:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <Encoder_Loop+0x114>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <Encoder_Loop+0x50>
					EncoderStateReg = ENCODER_TURN_RIGHT;//щелчок вправо.
 8000b76:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <Encoder_Loop+0x110>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	701a      	strb	r2, [r3, #0]
		  if( (EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 8000b7c:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <Encoder_Loop+0x114>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00b      	beq.n	8000ba0 <Encoder_Loop+0x74>
 8000b88:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <Encoder_Loop+0x114>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d105      	bne.n	8000ba0 <Encoder_Loop+0x74>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <Encoder_Loop+0x110>)
 8000b96:	2203      	movs	r2, #3
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e001      	b.n	8000ba0 <Encoder_Loop+0x74>
		break;
 8000b9c:	bf00      	nop
 8000b9e:	e000      	b.n	8000ba2 <Encoder_Loop+0x76>
		break;
 8000ba0:	bf00      	nop
		//-----------		
	}
	//--------------------
	//Опрос кнопки энкодера.
	if(++msCount >= ENCODER_BUTTON_TIMEOUT)
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <Encoder_Loop+0x118>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <Encoder_Loop+0x118>)
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <Encoder_Loop+0x118>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b09      	cmp	r3, #9
 8000bb4:	d93d      	bls.n	8000c32 <Encoder_Loop+0x106>
		{
		  msCount = 0;//сброс счетчика
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <Encoder_Loop+0x118>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
		  //-----------
			if(cycle < 3)
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <Encoder_Loop+0x11c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d811      	bhi.n	8000be8 <Encoder_Loop+0xbc>
				{
					but[cycle] = EncoderPORT->IDR & EncoderButtonPin;//Считывание состояние вывода.
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <Encoder_Loop+0x114>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <Encoder_Loop+0x11c>)
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd2:	b299      	uxth	r1, r3
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <Encoder_Loop+0x120>)
 8000bd6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					cycle++;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <Encoder_Loop+0x11c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <Encoder_Loop+0x11c>)
 8000be4:	701a      	strb	r2, [r3, #0]
					else EncoderStr.ButtonIsPress = 0;
				}
			//-----------
		}
	//--------------------
}
 8000be6:	e024      	b.n	8000c32 <Encoder_Loop+0x106>
					cycle = 0;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <Encoder_Loop+0x11c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
					if(~((but[0] & but[1]) | (but[1] & but[2]) | (but[0] & but[2])) & EncoderButtonPin) 
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <Encoder_Loop+0x120>)
 8000bf0:	885a      	ldrh	r2, [r3, #2]
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <Encoder_Loop+0x120>)
 8000bf4:	8819      	ldrh	r1, [r3, #0]
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <Encoder_Loop+0x120>)
 8000bf8:	889b      	ldrh	r3, [r3, #4]
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4013      	ands	r3, r2
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <Encoder_Loop+0x120>)
 8000c04:	8819      	ldrh	r1, [r3, #0]
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <Encoder_Loop+0x120>)
 8000c08:	889b      	ldrh	r3, [r3, #4]
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d005      	beq.n	8000c28 <Encoder_Loop+0xfc>
							 EncoderStr.ButtonIsPress = 1;
 8000c1c:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <Encoder_Loop+0x124>)
 8000c1e:	7813      	ldrb	r3, [r2, #0]
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	7013      	strb	r3, [r2, #0]
}
 8000c26:	e004      	b.n	8000c32 <Encoder_Loop+0x106>
					else EncoderStr.ButtonIsPress = 0;
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <Encoder_Loop+0x124>)
 8000c2a:	7813      	ldrb	r3, [r2, #0]
 8000c2c:	f36f 0300 	bfc	r3, #0, #1
 8000c30:	7013      	strb	r3, [r2, #0]
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	2000003a 	.word	0x2000003a
 8000c40:	40011000 	.word	0x40011000
 8000c44:	2000003b 	.word	0x2000003b
 8000c48:	2000003c 	.word	0x2000003c
 8000c4c:	20000040 	.word	0x20000040
 8000c50:	20000000 	.word	0x20000000

08000c54 <Encoder>:
	//Input pull-up
	GPIOB->CRH |= (GPIO_CRH_CNF12_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_CNF10_1);//
	GPIOB->ODR |= (GPIO_ODR_ODR12   | GPIO_ODR_ODR11   | GPIO_ODR_ODR10);	 //
}
//-----------------------------------------------------------------------------
Encoder_t* Encoder(void){
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

	return &EncoderStr;
 8000c58:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <Encoder+0x10>)
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000000 	.word	0x20000000

08000c68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c6c:	f7ff fb8a 	bl	8000384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c96:	f000 f811 	bl	8000cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9a:	f7ff fe6b 	bl	8000974 <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
  ldr   r0, =_estack
 8000ca0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cac:	08000d24 	.word	0x08000d24
  ldr r2, =_sbss
 8000cb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cb4:	20000048 	.word	0x20000048

08000cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_2_IRQHandler>
	...

08000cbc <__libc_init_array>:
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	4e0c      	ldr	r6, [pc, #48]	; (8000cf4 <__libc_init_array+0x38>)
 8000cc2:	4c0d      	ldr	r4, [pc, #52]	; (8000cf8 <__libc_init_array+0x3c>)
 8000cc4:	1ba4      	subs	r4, r4, r6
 8000cc6:	10a4      	asrs	r4, r4, #2
 8000cc8:	42a5      	cmp	r5, r4
 8000cca:	d109      	bne.n	8000ce0 <__libc_init_array+0x24>
 8000ccc:	f000 f81a 	bl	8000d04 <_init>
 8000cd0:	2500      	movs	r5, #0
 8000cd2:	4e0a      	ldr	r6, [pc, #40]	; (8000cfc <__libc_init_array+0x40>)
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <__libc_init_array+0x44>)
 8000cd6:	1ba4      	subs	r4, r4, r6
 8000cd8:	10a4      	asrs	r4, r4, #2
 8000cda:	42a5      	cmp	r5, r4
 8000cdc:	d105      	bne.n	8000cea <__libc_init_array+0x2e>
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ce4:	4798      	blx	r3
 8000ce6:	3501      	adds	r5, #1
 8000ce8:	e7ee      	b.n	8000cc8 <__libc_init_array+0xc>
 8000cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cee:	4798      	blx	r3
 8000cf0:	3501      	adds	r5, #1
 8000cf2:	e7f2      	b.n	8000cda <__libc_init_array+0x1e>
 8000cf4:	08000d1c 	.word	0x08000d1c
 8000cf8:	08000d1c 	.word	0x08000d1c
 8000cfc:	08000d1c 	.word	0x08000d1c
 8000d00:	08000d20 	.word	0x08000d20

08000d04 <_init>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	bf00      	nop
 8000d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0a:	bc08      	pop	{r3}
 8000d0c:	469e      	mov	lr, r3
 8000d0e:	4770      	bx	lr

08000d10 <_fini>:
 8000d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d12:	bf00      	nop
 8000d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d16:	bc08      	pop	{r3}
 8000d18:	469e      	mov	lr, r3
 8000d1a:	4770      	bx	lr
