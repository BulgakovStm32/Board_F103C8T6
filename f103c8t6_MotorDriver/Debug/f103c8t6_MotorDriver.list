
f103c8t6_MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024b8  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080025e8  080025e8  000125e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c0  080027c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027c0  080027c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027c0  080027c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  080027d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  200001dc  080027d4  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008493  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001750  00000000  00000000  000284c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000330  00000000  00000000  00029c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000278  00000000  00000000  00029f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001df4  00000000  00000000  0002a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006549  00000000  00000000  0002bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059e6f  00000000  00000000  000324fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008c36c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d98  00000000  00000000  0008c3e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	080025d0 	.word	0x080025d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	080025d0 	.word	0x080025d0

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <Blink_Loop>:

//-----------------------------------------------------------------------------
static volatile uint16_t BlinkReg = 0;
//-----------------------------------------------------------------------------
//Процесс для мигания светодиодами.
void Blink_Loop(void){
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	
	static uint16_t blinkCount = 0;
  //--------------------
	++blinkCount;
 8000ab0:	4b5c      	ldr	r3, [pc, #368]	; (8000c24 <Blink_Loop+0x178>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b5a      	ldr	r3, [pc, #360]	; (8000c24 <Blink_Loop+0x178>)
 8000aba:	801a      	strh	r2, [r3, #0]
	BlinkReg ^= (1 << INTERVAL_1_mS);
 8000abc:	4b5a      	ldr	r3, [pc, #360]	; (8000c28 <Blink_Loop+0x17c>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f083 0301 	eor.w	r3, r3, #1
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b57      	ldr	r3, [pc, #348]	; (8000c28 <Blink_Loop+0x17c>)
 8000aca:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 2)    == 0) BlinkReg ^= (1 << INTERVAL_2_mS);
 8000acc:	4b55      	ldr	r3, [pc, #340]	; (8000c24 <Blink_Loop+0x178>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d107      	bne.n	8000aea <Blink_Loop+0x3e>
 8000ada:	4b53      	ldr	r3, [pc, #332]	; (8000c28 <Blink_Loop+0x17c>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	f083 0302 	eor.w	r3, r3, #2
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <Blink_Loop+0x17c>)
 8000ae8:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 5)    == 0) BlinkReg ^= (1 << INTERVAL_5_mS);
 8000aea:	4b4e      	ldr	r3, [pc, #312]	; (8000c24 <Blink_Loop+0x178>)
 8000aec:	881a      	ldrh	r2, [r3, #0]
 8000aee:	4b4f      	ldr	r3, [pc, #316]	; (8000c2c <Blink_Loop+0x180>)
 8000af0:	fba3 1302 	umull	r1, r3, r3, r2
 8000af4:	0899      	lsrs	r1, r3, #2
 8000af6:	460b      	mov	r3, r1
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	440b      	add	r3, r1
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d107      	bne.n	8000b14 <Blink_Loop+0x68>
 8000b04:	4b48      	ldr	r3, [pc, #288]	; (8000c28 <Blink_Loop+0x17c>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	f083 0304 	eor.w	r3, r3, #4
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b45      	ldr	r3, [pc, #276]	; (8000c28 <Blink_Loop+0x17c>)
 8000b12:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 10)   == 0) BlinkReg ^= (1 << INTERVAL_10_mS);
 8000b14:	4b43      	ldr	r3, [pc, #268]	; (8000c24 <Blink_Loop+0x178>)
 8000b16:	881a      	ldrh	r2, [r3, #0]
 8000b18:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <Blink_Loop+0x180>)
 8000b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b1e:	08d9      	lsrs	r1, r3, #3
 8000b20:	460b      	mov	r3, r1
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	440b      	add	r3, r1
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d107      	bne.n	8000b40 <Blink_Loop+0x94>
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <Blink_Loop+0x17c>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	f083 0308 	eor.w	r3, r3, #8
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <Blink_Loop+0x17c>)
 8000b3e:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 50)   == 0) BlinkReg ^= (1 << INTERVAL_50_mS);
 8000b40:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <Blink_Loop+0x178>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	4a3a      	ldr	r2, [pc, #232]	; (8000c30 <Blink_Loop+0x184>)
 8000b46:	fba2 1203 	umull	r1, r2, r2, r3
 8000b4a:	0912      	lsrs	r2, r2, #4
 8000b4c:	2132      	movs	r1, #50	; 0x32
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d107      	bne.n	8000b6a <Blink_Loop+0xbe>
 8000b5a:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <Blink_Loop+0x17c>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	f083 0310 	eor.w	r3, r3, #16
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <Blink_Loop+0x17c>)
 8000b68:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 100)  == 0) BlinkReg ^= (1 << INTERVAL_100_mS);
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <Blink_Loop+0x178>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	4a30      	ldr	r2, [pc, #192]	; (8000c30 <Blink_Loop+0x184>)
 8000b70:	fba2 1203 	umull	r1, r2, r2, r3
 8000b74:	0952      	lsrs	r2, r2, #5
 8000b76:	2164      	movs	r1, #100	; 0x64
 8000b78:	fb01 f202 	mul.w	r2, r1, r2
 8000b7c:	1a9b      	subs	r3, r3, r2
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d107      	bne.n	8000b94 <Blink_Loop+0xe8>
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <Blink_Loop+0x17c>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	f083 0320 	eor.w	r3, r3, #32
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <Blink_Loop+0x17c>)
 8000b92:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 250)  == 0) BlinkReg ^= (1 << INTERVAL_250_mS);	
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <Blink_Loop+0x178>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	4a26      	ldr	r2, [pc, #152]	; (8000c34 <Blink_Loop+0x188>)
 8000b9a:	fba2 1203 	umull	r1, r2, r2, r3
 8000b9e:	0912      	lsrs	r2, r2, #4
 8000ba0:	21fa      	movs	r1, #250	; 0xfa
 8000ba2:	fb01 f202 	mul.w	r2, r1, r2
 8000ba6:	1a9b      	subs	r3, r3, r2
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d107      	bne.n	8000bbe <Blink_Loop+0x112>
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <Blink_Loop+0x17c>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <Blink_Loop+0x17c>)
 8000bbc:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 500)  == 0) BlinkReg ^= (1 << INTERVAL_500_mS);
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <Blink_Loop+0x178>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <Blink_Loop+0x188>)
 8000bc4:	fba2 1203 	umull	r1, r2, r2, r3
 8000bc8:	0952      	lsrs	r2, r2, #5
 8000bca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bce:	fb01 f202 	mul.w	r2, r1, r2
 8000bd2:	1a9b      	subs	r3, r3, r2
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d107      	bne.n	8000bea <Blink_Loop+0x13e>
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <Blink_Loop+0x17c>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <Blink_Loop+0x17c>)
 8000be8:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 1000) == 0)
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <Blink_Loop+0x178>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <Blink_Loop+0x188>)
 8000bf0:	fba2 1203 	umull	r1, r2, r2, r3
 8000bf4:	0992      	lsrs	r2, r2, #6
 8000bf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bfa:	fb01 f202 	mul.w	r2, r1, r2
 8000bfe:	1a9b      	subs	r3, r3, r2
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10a      	bne.n	8000c1c <Blink_Loop+0x170>
		{
			BlinkReg  ^= (1 << INTERVAL_1000_mS);
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <Blink_Loop+0x17c>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <Blink_Loop+0x17c>)
 8000c14:	801a      	strh	r2, [r3, #0]
			blinkCount = 0;
 8000c16:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <Blink_Loop+0x178>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	801a      	strh	r2, [r3, #0]
		}
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	2000002a 	.word	0x2000002a
 8000c28:	20000028 	.word	0x20000028
 8000c2c:	cccccccd 	.word	0xcccccccd
 8000c30:	51eb851f 	.word	0x51eb851f
 8000c34:	10624dd3 	.word	0x10624dd3

08000c38 <Blink>:
//-----------------------------------------------------------------------------
uint16_t Blink(BlinkIntervalEnum_t interval){
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	
	if(BlinkReg & (1 << interval)) return 0xFFFF;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <Blink+0x34>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	fa42 f303 	asr.w	r3, r2, r3
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <Blink+0x26>
 8000c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5c:	e000      	b.n	8000c60 <Blink+0x28>
	else											     return 0;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000028 	.word	0x20000028

08000c70 <msDelay_Loop>:

//*******************************************************************************************
static volatile uint32_t msCounter = 0;
//*******************************************************************************************
//*******************************************************************************************
void msDelay_Loop(void){
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

	msCounter++;
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <msDelay_Loop+0x18>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <msDelay_Loop+0x18>)
 8000c7c:	6013      	str	r3, [r2, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	2000002c 	.word	0x2000002c

08000c8c <msDelay>:
//**********************************************************
void msDelay(volatile uint32_t del){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

	if(del == 0) return;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00a      	beq.n	8000cb0 <msDelay+0x24>
	msCounter = 0;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <msDelay+0x30>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
	while(msCounter < del){__NOP();};
 8000ca0:	e000      	b.n	8000ca4 <msDelay+0x18>
 8000ca2:	bf00      	nop
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <msDelay+0x30>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d3f9      	bcc.n	8000ca2 <msDelay+0x16>
 8000cae:	e000      	b.n	8000cb2 <msDelay+0x26>
	if(del == 0) return;
 8000cb0:	bf00      	nop
}
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	2000002c 	.word	0x2000002c

08000cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <SystemInit+0x5c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <SystemInit+0x5c>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <SystemInit+0x5c>)
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4911      	ldr	r1, [pc, #68]	; (8000d1c <SystemInit+0x5c>)
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <SystemInit+0x60>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <SystemInit+0x5c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <SystemInit+0x5c>)
 8000ce2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <SystemInit+0x5c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SystemInit+0x5c>)
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <SystemInit+0x5c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <SystemInit+0x5c>)
 8000cfe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SystemInit+0x5c>)
 8000d06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SystemInit+0x64>)
 8000d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d12:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	f8ff0000 	.word	0xf8ff0000
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Gpio_Init>:
static volatile uint16_t GpioAState = 0; //
static volatile uint16_t GpioBState = 0; //
static volatile uint16_t GpioCState = 0; //
//-----------------------------------------------------------------------------
//Инициализация переферии.
void Gpio_Init (void){
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  
  //Включаем тактирование порта A, B, C, D и модуля альтернативных функций.
  RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN |
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <Gpio_Init+0x5c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <Gpio_Init+0x5c>)
 8000d32:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 8000d36:	6193      	str	r3, [r2, #24]
                   RCC_APB2ENR_IOPBEN |
                   RCC_APB2ENR_IOPCEN |
                   RCC_APB2ENR_IOPDEN |
                   RCC_APB2ENR_AFIOEN);
  //Отключение JTAG-D от порта PA15, отладка через SWD активна.
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE; 
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <Gpio_Init+0x60>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <Gpio_Init+0x60>)
 8000d3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d42:	6053      	str	r3, [r2, #4]
  //RCC->CFGR |= RCC_CFGR_MCO_HSI;   //Подключение к выводу PA8 частоту HSI.
  //RCC->CFGR |= RCC_CFGR_MCO_HSE;      //Подключение к выводу PA8 частоту HSE.
  //RCC->CFGR |= RCC_CFGR_MCO_PLL;   //Подключение к выводу PA8 частоту PLL/2. 
  //--------------------
  //PC13 - Led.
  GPIOC->CRH &= ~GPIO_CRH_CNF13;//выход, режим - push-pull.
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <Gpio_Init+0x64>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <Gpio_Init+0x64>)
 8000d4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000d4e:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= GPIO_CRH_MODE13;//тактирование 50МГц.
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <Gpio_Init+0x64>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <Gpio_Init+0x64>)
 8000d56:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000d5a:	6053      	str	r3, [r2, #4]
  //--------------------
  //Управление двигателем.
  //IN1 - PA5
  //IN2 - PA4
  //IN3 - PA3
  GPIOA->CRL &= ~(GPIO_CRL_CNF5  |GPIO_CRL_CNF4   | GPIO_CRL_CNF3 |
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <Gpio_Init+0x68>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <Gpio_Init+0x68>)
 8000d62:	f023 13cc 	bic.w	r3, r3, #13369548	; 0xcc00cc
 8000d66:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 8000d6a:	6013      	str	r3, [r2, #0]
		  	  	  GPIO_CRL_CNF2  |GPIO_CRL_CNF1   | GPIO_CRL_CNF0); //выход, режим - push-pull.

  GPIOA->CRL |=  (GPIO_CRL_MODE5 | GPIO_CRL_MODE4 | GPIO_CRL_MODE3 |
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <Gpio_Init+0x68>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <Gpio_Init+0x68>)
 8000d72:	f043 1333 	orr.w	r3, r3, #3342387	; 0x330033
 8000d76:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8000d7a:	6013      	str	r3, [r2, #0]
                  GPIO_CRH_MODE12 );//тактирование 50МГц.
  GPIOD->CRL |= ( GPIO_CRL_MODE2  );
	//--------------------
	 *
	 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40011000 	.word	0x40011000
 8000d90:	40010800 	.word	0x40010800

08000d94 <I2C_Int_Handler>:
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
}
//*******************************************************************************************
//*******************************************************************************************
static void I2C_Int_Handler(I2C_TypeDef *i2c, uint8_t slaveAddr){
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t sr1 = i2c->SR1;//Чтениех этих регистров сбрасывает флаги событий I2C.
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	60fb      	str	r3, [r7, #12]
	//volatile uint32_t sr2 = i2c->SR2;
	//---------------------
	//Start condition generated. Clear: read SR1, write to DR
	if(sr1 & I2C_SR1_SB)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d008      	beq.n	8000dc2 <I2C_Int_Handler+0x2e>
		{
		  i2c->DR = I2C_ADDRESS(slaveAddr, I2C_Mode);
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <I2C_Int_Handler+0xbc>)
 8000db6:	7812      	ldrb	r2, [r2, #0]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	461a      	mov	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	611a      	str	r2, [r3, #16]
		  return;
 8000dc0:	e042      	b.n	8000e48 <I2C_Int_Handler+0xb4>
		}
	//Address sent. Clear: read SR1, read SR2
	else if(sr1 & I2C_SR1_ADDR)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d010      	beq.n	8000dee <I2C_Int_Handler+0x5a>
	   {
	      if(I2C_Mode == I2C_MODE_WRITE)
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <I2C_Int_Handler+0xbc>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d136      	bne.n	8000e42 <I2C_Int_Handler+0xae>
			  {
	    	  	  i2c->DR = I2C_pBuf[0];
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <I2C_Int_Handler+0xc0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	611a      	str	r2, [r3, #16]
	    	  	  I2C_TxCnt++;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <I2C_Int_Handler+0xc4>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <I2C_Int_Handler+0xc4>)
 8000dea:	801a      	strh	r2, [r3, #0]
//						// не дописано! не использовать
//						I2C_NUMB->DR = (uint8_t)AddrReg;            // First byte
//						AddrReg>>=8;
//					 }
//			  }
	      return;
 8000dec:	e029      	b.n	8000e42 <I2C_Int_Handler+0xae>
//	else if(sr1 & I2C_SR1_AF)
//		{
//			I2C_TxCnt++;
//		}
	//Data Register Empty (transmitters).
	else if(sr1 & I2C_SR1_TXE)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d01f      	beq.n	8000e38 <I2C_Int_Handler+0xa4>
		{
			i2c->DR = I2C_pBuf[I2C_TxCnt];
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <I2C_Int_Handler+0xc0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <I2C_Int_Handler+0xc4>)
 8000dfe:	8812      	ldrh	r2, [r2, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	611a      	str	r2, [r3, #16]
			I2C_TxCnt++;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <I2C_Int_Handler+0xc4>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <I2C_Int_Handler+0xc4>)
 8000e14:	801a      	strh	r2, [r3, #0]
			if(I2C_TxCnt >= I2C_TxSize)
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <I2C_Int_Handler+0xc8>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <I2C_Int_Handler+0xc4>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d810      	bhi.n	8000e46 <I2C_Int_Handler+0xb2>
				{
					I2C_TxCnt = 0;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <I2C_Int_Handler+0xc4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	801a      	strh	r2, [r3, #0]
					i2c->CR1 |= I2C_CR1_STOP;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
				}
			return;
 8000e36:	e006      	b.n	8000e46 <I2C_Int_Handler+0xb2>
		}
	//Byte Transfer Finished.
	else if(sr1 & I2C_SR1_BTF)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	e002      	b.n	8000e48 <I2C_Int_Handler+0xb4>
	      return;
 8000e42:	bf00      	nop
 8000e44:	e000      	b.n	8000e48 <I2C_Int_Handler+0xb4>
			return;
 8000e46:	bf00      	nop
//	if(sr1 & I2C_SR1_TXE)
//		{
//			if(TxCounter < I2C_TxSize) i2c->DR   = I2C_pBuf[TxCounter++];
//			else		               i2c->CR1 |= I2C_CR1_STOP;
//		}
}
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000039 	.word	0x20000039
 8000e54:	20000034 	.word	0x20000034
 8000e58:	20000030 	.word	0x20000030
 8000e5c:	20000038 	.word	0x20000038

08000e60 <I2C1_EV_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание I2C1.
void I2C1_EV_IRQHandler(void){
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

//	I2C_handler(I2C1, addr);
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <I2C2_EV_IRQHandler>:
//**********************************************************
//Прерывание I2C2.
void I2C2_EV_IRQHandler(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

	I2C_Int_Handler(I2C2, I2C_SlaveAddr);
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <I2C2_EV_IRQHandler+0x14>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <I2C2_EV_IRQHandler+0x18>)
 8000e78:	f7ff ff8c 	bl	8000d94 <I2C_Int_Handler>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000032 	.word	0x20000032
 8000e84:	40005800 	.word	0x40005800

08000e88 <SPI2_IRQHandler>:
	//--------------------
	return (uint8_t)SPI2->DR;
} 
//-----------------------------------------------------------------------------
//Прерываени от SPI2.
void SPI2_IRQHandler(void){
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  
  //uint16_t tmp;
  //--------------------
  //причина прерывания - окончание передачи байта
  if(SPI2->SR & SPI_SR_TXE)
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <SPI2_IRQHandler+0x34>)
 8000e8e:	689b      	ldr	r3, [r3, #8]

      //LC2SostGreenLedToggel;//Мигаем для отладки          
    }
  //--------------------
  //причина прерывания - принят байт данных
  if(SPI2->SR &= SPI_SR_RXNE)
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <SPI2_IRQHandler+0x34>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <SPI2_IRQHandler+0x34>)
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	6093      	str	r3, [r2, #8]
      //tmp = SPI1->DR;                //прочитать принятые данные
      //выполняем какие-то действия      
    }
  //--------------------
  //причина прерывания - ошибка режима ведущего
  if(SPI2->SR &= SPI_SR_MODF)
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <SPI2_IRQHandler+0x34>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <SPI2_IRQHandler+0x34>)
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	6093      	str	r3, [r2, #8]
    {
      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
    }
  //--------------------
  //причина прерывания - переполнение приемника данных
  if(SPI2->SR &= SPI_SR_OVR)
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SPI2_IRQHandler+0x34>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <SPI2_IRQHandler+0x34>)
 8000eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb2:	6093      	str	r3, [r2, #8]
//  if(SPI2->SR &= SSPI_SR_CRCERR)
//    {
//      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
//    }
  //--------------------
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40003800 	.word	0x40003800

08000ec0 <Init_RCC>:
#include "sys_ST.h"

//**********************************************************************************************
//**********************************************************************************************
//Настройка тактирования 72МГц. Внешний кварц 8 МГц.
static uint32_t Init_RCC(void){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
	
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
	//--------------------
	//SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/        
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);//Enable HSE.
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <Init_RCC+0xf8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a39      	ldr	r2, [pc, #228]	; (8000fb8 <Init_RCC+0xf8>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready and if Time out is reached exit */
	do{
			HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000eda:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <Init_RCC+0xf8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	603b      	str	r3, [r7, #0]
			StartUpCounter++;  
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
	  }
	while((HSEStatus == 0) && (StartUpCounter != 0xFFFF));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d104      	bne.n	8000efa <Init_RCC+0x3a>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d1ef      	bne.n	8000eda <Init_RCC+0x1a>
	//--------------------
	if ((RCC->CR & RCC_CR_HSERDY) != 0) HSEStatus = (uint32_t)0x01;
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <Init_RCC+0xf8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <Init_RCC+0x4c>
 8000f06:	2301      	movs	r3, #1
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	e001      	b.n	8000f10 <Init_RCC+0x50>
	else                                HSEStatus = (uint32_t)0x00;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	603b      	str	r3, [r7, #0]
	//--------------------
	if(HSEStatus == (uint32_t)0x01)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d149      	bne.n	8000faa <Init_RCC+0xea>
		{
			/* Enable Prefetch Buffer */
			FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000f16:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <Init_RCC+0xfc>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a28      	ldr	r2, [pc, #160]	; (8000fbc <Init_RCC+0xfc>)
 8000f1c:	f043 0310 	orr.w	r3, r3, #16
 8000f20:	6013      	str	r3, [r2, #0]
			/* Flash 2 wait state */
			FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <Init_RCC+0xfc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a25      	ldr	r2, [pc, #148]	; (8000fbc <Init_RCC+0xfc>)
 8000f28:	f023 0307 	bic.w	r3, r3, #7
 8000f2c:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;  
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <Init_RCC+0xfc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a22      	ldr	r2, [pc, #136]	; (8000fbc <Init_RCC+0xfc>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6013      	str	r3, [r2, #0]
			//--------------------
			//Настройка тактирования шин AHB, APB1 и APB2.
			RCC->CFGR |= (uint32_t)(RCC_CFGR_HPRE_DIV1  | // AHB prescaler. SYSCLK not divided
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <Init_RCC+0xf8>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	4a1e      	ldr	r2, [pc, #120]	; (8000fb8 <Init_RCC+0xf8>)
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f44:	6053      	str	r3, [r2, #4]
									RCC_CFGR_PPRE2_DIV1 | // APB2 = AHB. APB2 Fmax = 72MHz.
									RCC_CFGR_PPRE1_DIV2); // APB1 = (AHB / 2). APB1 Fmax = 36MHz.
			//--------------------
			//PLL configuration: = HSE * 9 = 72 MHz */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <Init_RCC+0xf8>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <Init_RCC+0xf8>)
 8000f4c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000f50:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_Msk        |  // HSE oscillator clock selected as PLL input clock
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <Init_RCC+0xf8>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <Init_RCC+0xf8>)
 8000f58:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000f5c:	6053      	str	r3, [r2, #4]
															//RCC_CFGR_PLLXTPRE_HSE_Div2 |  // HSE clock divided by 2                                
															RCC_CFGR_PLLMULL9);
			/* Enable PLL */
			RCC->CR |= RCC_CR_PLLON;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <Init_RCC+0xf8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <Init_RCC+0xf8>)
 8000f64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f68:	6013      	str	r3, [r2, #0]
			/* Wait till PLL is ready */
			while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 8000f6a:	bf00      	nop
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <Init_RCC+0xf8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f9      	beq.n	8000f6c <Init_RCC+0xac>
			/* Select PLL as system clock source */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <Init_RCC+0xf8>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <Init_RCC+0xf8>)
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <Init_RCC+0xf8>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <Init_RCC+0xf8>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	6053      	str	r3, [r2, #4]
			/* Wait till PLL is used as system clock source */
			while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)  {}        
 8000f90:	bf00      	nop
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <Init_RCC+0xf8>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d1f9      	bne.n	8000f92 <Init_RCC+0xd2>
			RCC->CR |= RCC_CR_CSSON; //Включаем защиту HSE от сбоев - CSS.
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <Init_RCC+0xf8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <Init_RCC+0xf8>)
 8000fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fa8:	6013      	str	r3, [r2, #0]
	else
		{
				/* If HSE fails to start-up, the application will have wrong clock 
				 configuration. User can add here some code to deal with this error */
		} 
	return HSEStatus;
 8000faa:	683b      	ldr	r3, [r7, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40022000 	.word	0x40022000

08000fc0 <Sys_Init>:
//*****************************************************************************
void Sys_Init(void){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	
  //Reset the RCC clock configuration to the default reset state(for debug purpose).
  RCC->CR 	|= (uint32_t)0x00000001;	/* Set HSION bit */
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <Sys_Init+0x54>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <Sys_Init+0x54>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF0FF0000;	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <Sys_Init+0x54>)
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	490f      	ldr	r1, [pc, #60]	; (8001014 <Sys_Init+0x54>)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <Sys_Init+0x58>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]
  RCC->CR 	&= (uint32_t)0xFEF6FFFF;  /* Reset HSEON, CSSON and PLLON bits */
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <Sys_Init+0x54>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <Sys_Init+0x54>)
 8000fe2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
  RCC->CR 	&= (uint32_t)0xFFFBFFFF;  /* Reset HSEBYP bit */
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <Sys_Init+0x54>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <Sys_Init+0x54>)
 8000ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff6:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <Sys_Init+0x54>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a05      	ldr	r2, [pc, #20]	; (8001014 <Sys_Init+0x54>)
 8000ffe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001002:	6053      	str	r3, [r2, #4]
  RCC->CIR 	 = 0x009F0000;  				  /* Disable all interrupts and clear pending bits  */
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <Sys_Init+0x54>)
 8001006:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800100a:	609a      	str	r2, [r3, #8]
  //RCC->CFGR2 = 0x00000000;      			/* Reset CFGR2 register */  
	
  Init_RCC();//Настройка тактирования микроконтроллера. Внешний кварц 8 МГц.
 800100c:	f7ff ff58 	bl	8000ec0 <Init_RCC>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40021000 	.word	0x40021000
 8001018:	f0ff0000 	.word	0xf0ff0000

0800101c <NMI_Handler>:
	return (*(__IO uint32_t*)address);
}
//**********************************************************************************************
//**********************************************************************************************
//Прерываени блока CSS. Возникает при сбое тактирования HSE.
void NMI_Handler( void){
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  //RCC->CIR |= RCC_CIR_CSSC;//Очищаем флаг прерывания CSS иначе прерывание будет генерироваться бесконечно.
	//NVIC_SystemReset();
  //LC1SostRedLedOn;
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HardFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void HardFault_Handler( void){
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
//  if(SCB->HFSR & SCB_HFSR_FORCED)   LC1SostRedLedOn();
//  if(SCB->HFSR & SCB_HFSR_DEBUGEVT) LC2SostRedLedOn();
	
//	LC1SostRedLedOn();
//	LC2SostRedLedOn();
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <MemManage_Handler>:
//*****************************************************************************
//*****************************************************************************
void MemManage_Handler( void){
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

//  LC2SostRedLedOn();
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <BusFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void BusFault_Handler( void){
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

//  LC2SostGreenLedOn();
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <UsageFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void UsageFault_Handler( void){
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <SVC_Handler>:
//*****************************************************************************
//*****************************************************************************
void SVC_Handler( void){
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <SysTick_Init>:

#include "sys_tick_ST.h"

//-----------------------------------------------------------------------------
//Инициализация системного таймера SysTick.
void SysTick_Init(void){
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

	SysTick->LOAD = TimerTick;	//Загрузка значения.
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SysTick_Init+0x20>)
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <SysTick_Init+0x24>)
 800106c:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = TimerTick;	//Обнуление таймера. 
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Init+0x20>)
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <SysTick_Init+0x24>)
 8001072:	609a      	str	r2, [r3, #8]
                              //При записи любого значения этот регист обнуляется, с обнулением флага COUNTFLAG. 
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | //Тактирование частотой процессора (24МГц).
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <SysTick_Init+0x20>)
 8001076:	2207      	movs	r2, #7
 8001078:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk   | //Рразрешение прерывания.
					SysTick_CTRL_ENABLE_Msk;     //Резрешение таймеру считать.
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010
 8001088:	0001193f 	.word	0x0001193f

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4906      	ldr	r1, [pc, #24]	; (80010c0 <__NVIC_EnableIRQ+0x34>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <TIM4_Init>:
	//Включение таймера
	TIM3->CR1 |= TIM_CR1_CEN;
}
//*******************************************************************************************
//*******************************************************************************************
void TIM4_Init(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

	//Включение тактирования таймера.
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <TIM4_Init+0x44>)
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <TIM4_Init+0x44>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	61d3      	str	r3, [r2, #28]

	//Прескаллер.
	//APB1_CLK = 36MHz, TIM4_CLK = APB1_CLK * 2 = 72MHz.
	TIM4->PSC = (72 - 1);  //таймер будет тактироваться с частотой 72МГц/72 = 1МГц.
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <TIM4_Init+0x48>)
 800112a:	2247      	movs	r2, #71	; 0x47
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = (10000 - 1);//Auto reload register - это значение, до которого будет считать таймер.
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <TIM4_Init+0x48>)
 8001130:	f242 720f 	movw	r2, #9999	; 0x270f
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->DIER |= TIM_DIER_UIE; //Update interrupt enable
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <TIM4_Init+0x48>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	4a09      	ldr	r2, [pc, #36]	; (8001160 <TIM4_Init+0x48>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	60d3      	str	r3, [r2, #12]
	TIM4->CR1   = TIM_CR1_ARPE |//Auto-reload preload enable
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <TIM4_Init+0x48>)
 8001144:	2281      	movs	r2, #129	; 0x81
 8001146:	601a      	str	r2, [r3, #0]
				  TIM_CR1_CEN;  //Counter enable

	//Разрешение прерывания от TIM4.
	NVIC_SetPriority(TIM4_IRQn, 15);
 8001148:	210f      	movs	r1, #15
 800114a:	201e      	movs	r0, #30
 800114c:	f7ff ffba 	bl	80010c4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 8001150:	201e      	movs	r0, #30
 8001152:	f7ff ff9b 	bl	800108c <__NVIC_EnableIRQ>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000
 8001160:	40000800 	.word	0x40000800

08001164 <TIM1_InitForPWM>:
//*******************************************************************************************
//*******************************************************************************************
void TIM1_InitForPWM(void){
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

	//Включение тактирования таймера.
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001168:	4b35      	ldr	r3, [pc, #212]	; (8001240 <TIM1_InitForPWM+0xdc>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a34      	ldr	r2, [pc, #208]	; (8001240 <TIM1_InitForPWM+0xdc>)
 800116e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001172:	6193      	str	r3, [r2, #24]
	//Прескаллер.
	//APB2_CLK = 72MHz, TIM1_CLK = APB2_CLK * 1 = 72MHz.
	TIM1->PSC = 0;   //таймер будет тактироваться с частотой 72МГц/1 = 72MГц.
 8001174:	4b33      	ldr	r3, [pc, #204]	; (8001244 <TIM1_InitForPWM+0xe0>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = (1000 - 1);//Auto reload register. - это значение, до которого будет считать таймер.
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <TIM1_InitForPWM+0xe0>)
 800117c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c

	//Задаем режим работы - PWM mode on OC1
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | //OC1M: Output compare 1 mode - 110: PWM mode 1.
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <TIM1_InitForPWM+0xe0>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a2f      	ldr	r2, [pc, #188]	; (8001244 <TIM1_InitForPWM+0xe0>)
 8001188:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 800118c:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC1PE;						 //OC1PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.

	//Задаем режим работы - PWM mode on OC2
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | //OC2M: Output compare 1 mode - 110: PWM mode 1.
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <TIM1_InitForPWM+0xe0>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a2c      	ldr	r2, [pc, #176]	; (8001244 <TIM1_InitForPWM+0xe0>)
 8001194:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8001198:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC2PE;						 //OC2PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.

	//Задаем режим работы - PWM mode on OC3
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | //OC3M: Output compare 1 mode - 110: PWM mode 1.
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <TIM1_InitForPWM+0xe0>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a29      	ldr	r2, [pc, #164]	; (8001244 <TIM1_InitForPWM+0xe0>)
 80011a0:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 80011a4:	61d3      	str	r3, [r2, #28]

	//TIM1->CR1 |= TIM_CR1_ARPE;//Включен режим предварительной записи регистра автоперезагрузки
	//TIM1->CR1  |= TIM_CR1_CMS_0 | TIM_CR1_CMS_1;// Режим 3 - выравнивания по центру.
	//TIM1->BDTR |= 75;      				// Мертвое время. Константа расчитана из задержек конкретного железа.

	TIM1->CCER |= TIM_CCER_CC1E;//Enable CC1 - включение первого канала
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <TIM1_InitForPWM+0xe0>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a26      	ldr	r2, [pc, #152]	; (8001244 <TIM1_InitForPWM+0xe0>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC2E;//Enable CC2 - включение второго канала
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <TIM1_InitForPWM+0xe0>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a23      	ldr	r2, [pc, #140]	; (8001244 <TIM1_InitForPWM+0xe0>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= TIM_CCER_CC3E;//Enable CC3 - включение третьего канала.
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <TIM1_InitForPWM+0xe0>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4a20      	ldr	r2, [pc, #128]	; (8001244 <TIM1_InitForPWM+0xe0>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6213      	str	r3, [r2, #32]

	TIM1->BDTR |= TIM_BDTR_MOE;// Разрешаем вывод сигнала на выводы
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <TIM1_InitForPWM+0xe0>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <TIM1_InitForPWM+0xe0>)
 80011d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44

	//Настройка ножки микроконтроллера.
	//Используется PORTA
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <TIM1_InitForPWM+0xdc>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a19      	ldr	r2, [pc, #100]	; (8001240 <TIM1_InitForPWM+0xdc>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6193      	str	r3, [r2, #24]

	GPIOA->CRH |= GPIO_CRH_CNF8_1;//PA8(TIM1_CH1) - выход, альтернативный режим push-pull.
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <TIM1_InitForPWM+0xe4>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4a18      	ldr	r2, [pc, #96]	; (8001248 <TIM1_InitForPWM+0xe4>)
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE8; //PA8(TIM1_CH1) - тактирование 50МГц.
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <TIM1_InitForPWM+0xe4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <TIM1_InitForPWM+0xe4>)
 80011f4:	f043 0303 	orr.w	r3, r3, #3
 80011f8:	6053      	str	r3, [r2, #4]

	GPIOA->CRH |= GPIO_CRH_CNF9_1;//PA9(TIM1_CH2) - выход, альтернативный режим push-pull.
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <TIM1_InitForPWM+0xe4>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <TIM1_InitForPWM+0xe4>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE9; //PA9(TIM1_CH2) - тактирование 50МГц.
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <TIM1_InitForPWM+0xe4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <TIM1_InitForPWM+0xe4>)
 800120c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001210:	6053      	str	r3, [r2, #4]

	GPIOA->CRH |= GPIO_CRH_CNF10_1;//PA10(TIM1_CH3) - выход, альтернативный режим push-pull.
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <TIM1_InitForPWM+0xe4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <TIM1_InitForPWM+0xe4>)
 8001218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800121c:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE10; //PA10(TIM1_CH3) - тактирование 50МГц.
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <TIM1_InitForPWM+0xe4>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <TIM1_InitForPWM+0xe4>)
 8001224:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001228:	6053      	str	r3, [r2, #4]

	//Включение таймера
	TIM1->CR1 |= TIM_CR1_CEN;//CEN: Counter enable
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <TIM1_InitForPWM+0xe0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <TIM1_InitForPWM+0xe0>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6013      	str	r3, [r2, #0]
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	40012c00 	.word	0x40012c00
 8001248:	40010800 	.word	0x40010800

0800124c <Led_Blink>:
	riseReg  = (oldState ^ event) & event;
	oldState = event;
	if(riseReg) (*var)--;
}
//************************************************************
void Led_Blink(void){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

	if(Blink(INTERVAL_50_mS)) Led_PC13_On();
 8001250:	2004      	movs	r0, #4
 8001252:	f7ff fcf1 	bl	8000c38 <Blink>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <Led_Blink+0x1a>
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <Led_Blink+0x28>)
 800125e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001262:	611a      	str	r2, [r3, #16]
	else					  Led_PC13_Off();
}
 8001264:	e003      	b.n	800126e <Led_Blink+0x22>
	else					  Led_PC13_Off();
 8001266:	4b03      	ldr	r3, [pc, #12]	; (8001274 <Led_Blink+0x28>)
 8001268:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800126c:	611a      	str	r2, [r3, #16]
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40011000 	.word	0x40011000

08001278 <FillSinTable>:
//************************************************************

static uint16_t sin_arr[STEPS];
//************************************************************
//************************************************************
void FillSinTable(void){
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

	for(int i = 0; i < STEPS; i++)
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	e02f      	b.n	80012e4 <FillSinTable+0x6c>
		{
			sin_arr[i] = (uint16_t)(fabs(PRECISION * sin((i + 2) * PI/STEPS)));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3302      	adds	r3, #2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f8c3 	bl	8000414 <__aeabi_i2d>
 800128e:	a31a      	add	r3, pc, #104	; (adr r3, 80012f8 <FillSinTable+0x80>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f928 	bl	80004e8 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <FillSinTable+0x88>)
 80012a6:	f7ff fa49 	bl	800073c <__aeabi_ddiv>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f000 f9a1 	bl	80015f8 <sin>
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <FillSinTable+0x8c>)
 80012bc:	f7ff f914 	bl	80004e8 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4614      	mov	r4, r2
 80012c6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80012ca:	4620      	mov	r0, r4
 80012cc:	4629      	mov	r1, r5
 80012ce:	f7ff fbcd 	bl	8000a6c <__aeabi_d2uiz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b299      	uxth	r1, r3
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <FillSinTable+0x90>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < STEPS; i++)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3301      	adds	r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2bc7      	cmp	r3, #199	; 0xc7
 80012e8:	ddcc      	ble.n	8001284 <FillSinTable+0xc>
		}
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bdb0      	pop	{r4, r5, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	f3af 8000 	nop.w
 80012f8:	54411744 	.word	0x54411744
 80012fc:	400921fb 	.word	0x400921fb
 8001300:	40690000 	.word	0x40690000
 8001304:	409c2000 	.word	0x409c2000
 8001308:	2000003c 	.word	0x2000003c

0800130c <main>:
//*******************************************************************************************
//*******************************************************************************************

int main(void){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0


	//--------------------------
	//Drivers.
	Sys_Init();
 8001310:	f7ff fe56 	bl	8000fc0 <Sys_Init>
	Gpio_Init();
 8001314:	f7ff fd08 	bl	8000d28 <Gpio_Init>
	SysTick_Init();
 8001318:	f7ff fea4 	bl	8001064 <SysTick_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800131c:	b662      	cpsie	i
	__enable_irq();
	//***********************************************
	TIM1_InitForPWM();
 800131e:	f7ff ff21 	bl	8001164 <TIM1_InitForPWM>
	//TIM3_InitForPWM();//TIM3 генерирует ШИМ для трех каналов.
	TIM4_Init();      //TIM4 настривается для периодической генерации прерывания.
 8001322:	f7ff fef9 	bl	8001118 <TIM4_Init>

	//Заполнение таблицы сиинуса.
	FillSinTable();
 8001326:	f7ff ffa7 	bl	8001278 <FillSinTable>

	//__disable_irq();
	msDelay(500);
 800132a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800132e:	f7ff fcad 	bl	8000c8c <msDelay>
	while(1)
		{
			//msDelay(10);
			//***********************************************
			//Мигание светодиодами.
			Led_Blink();
 8001332:	f7ff ff8b 	bl	800124c <Led_Blink>
 8001336:	e7fc      	b.n	8001332 <main+0x26>

08001338 <SysTick_Handler>:
	//************************************************************************************
}
//*******************************************************************************************
//*******************************************************************************************
//Прерывание каждую милисекунду.
void SysTick_Handler(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
//		{
//			msCountForDS18B20 = 0;
//			FlagsStr.DS18B20  = 1;
//		}
	//--------------------------
	msDelay_Loop();
 800133c:	f7ff fc98 	bl	8000c70 <msDelay_Loop>
	Blink_Loop();
 8001340:	f7ff fbb4 	bl	8000aac <Blink_Loop>
	Encoder()->Loop();
 8001344:	f000 f900 	bl	8001548 <Encoder>
 8001348:	4603      	mov	r3, r0
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4798      	blx	r3
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <TIM4_IRQHandler>:
#define PMSM_PWM 650 //Коэфф-т заполнения от 0 до 1000



//Прерывание TIM4.
void TIM4_IRQHandler(void){
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

	uint16_t pwm1, pwm2, pwm3;
	//--------------------------
	TIM4->SR &= ~TIM_SR_UIF;//Сброс флага прерывания.
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <TIM4_IRQHandler+0x44>)
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <TIM4_IRQHandler+0x44>)
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	6113      	str	r3, [r2, #16]
	//--------------------------
	//Генерация синуса
	static uint16_t sinIndex = 0;

	TIM1->CCR1 = sin_arr[sinIndex];
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <TIM4_IRQHandler+0x48>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <TIM4_IRQHandler+0x4c>)
 800136c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <TIM4_IRQHandler+0x50>)
 8001372:	635a      	str	r2, [r3, #52]	; 0x34

	// Increment position in sine table
	sinIndex++;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <TIM4_IRQHandler+0x48>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <TIM4_IRQHandler+0x48>)
 800137e:	801a      	strh	r2, [r3, #0]
	if(sinIndex > STEPS-1) sinIndex = 0;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <TIM4_IRQHandler+0x48>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	2bc7      	cmp	r3, #199	; 0xc7
 8001386:	d902      	bls.n	800138e <TIM4_IRQHandler+0x3a>
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <TIM4_IRQHandler+0x48>)
 800138a:	2200      	movs	r2, #0
 800138c:	801a      	strh	r2, [r3, #0]
//	TIM1->CCR3 = pwm3;
//	// Increment position in sine table
//	sinTableIndex++;
//	if(sinTableIndex > PMSM_SINTABLESIZE-1) sinTableIndex = 0;
	//--------------------------
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40000800 	.word	0x40000800
 800139c:	200001cc 	.word	0x200001cc
 80013a0:	2000003c 	.word	0x2000003c
 80013a4:	40012c00 	.word	0x40012c00

080013a8 <Encoder_Turn>:
							   .Loop          = &Encoder_Loop,
							   .Rotation      = &Encoder_Turn};

static uint8_t EncoderStateReg = ENCODER_NO_TURN;//Регистр состияния энкодера.
//-----------------------------------------------------------------------------
static void Encoder_Turn(uint16_t *parameter, uint16_t min, uint16_t max){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
 80013b4:	4613      	mov	r3, r2
 80013b6:	803b      	strh	r3, [r7, #0]

	//--------------------
	switch(EncoderStateReg){
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <Encoder_Turn+0x74>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d002      	beq.n	80013c6 <Encoder_Turn+0x1e>
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d013      	beq.n	80013ec <Encoder_Turn+0x44>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
			EncoderStateReg = ENCODER_NO_TURN;
		break;
		//-----------
		default:
		break;	
 80013c4:	e025      	b.n	8001412 <Encoder_Turn+0x6a>
			if ((*parameter) < max)(*parameter)++;    //Проверка на  максимум.
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	883a      	ldrh	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d906      	bls.n	80013de <Encoder_Turn+0x36>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	801a      	strh	r2, [r3, #0]
 80013dc:	e002      	b.n	80013e4 <Encoder_Turn+0x3c>
			else                   (*parameter) = min;//Закольцовывание редактирования параметра.
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	887a      	ldrh	r2, [r7, #2]
 80013e2:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <Encoder_Turn+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
		break;
 80013ea:	e012      	b.n	8001412 <Encoder_Turn+0x6a>
			if ((*parameter) > min)(*parameter)--;    //Проверка на минимум.
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	887a      	ldrh	r2, [r7, #2]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d206      	bcs.n	8001404 <Encoder_Turn+0x5c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	801a      	strh	r2, [r3, #0]
 8001402:	e002      	b.n	800140a <Encoder_Turn+0x62>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	883a      	ldrh	r2, [r7, #0]
 8001408:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <Encoder_Turn+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		break;
 8001410:	bf00      	nop
		//-----------
	}
	//--------------------	
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	200001ce 	.word	0x200001ce

08001420 <Encoder_Loop>:
//-----------------------------------------------------------------------------
/*Когда энкодер не вращают на обоих его выводах(A и В) единицы(внутряння подтяжка МК).Это состояние 3 энкодера - начальное состояние энкодера.
*Так-же начальным состоянием может быть  состояние энкодера когда А и В ровны 0.
*Когда вращаю вправо, то после состояния 3 энкодер передет в состояние 1 (А=1, В=0).
*Когда вращают влево, то после состояния 3 энкодер прердет в состояние 2 (А=0, В=1). */
static void Encoder_Loop(void){
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	static uint8_t  cycle   = 0;
	static uint8_t  msCount = 0;
	static uint16_t but[3]  = {0, 0, 0};
	//--------------------
	//Обработка вращения энкодера.
	switch(EncoderStateReg){
 8001424:	4b42      	ldr	r3, [pc, #264]	; (8001530 <Encoder_Loop+0x110>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <Encoder_Loop+0x12>
 800142c:	2b01      	cmp	r3, #1
 800142e:	d010      	beq.n	8001452 <Encoder_Loop+0x32>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
				} 			
		break;
		//-----------
		default:
		break;	
 8001430:	e031      	b.n	8001496 <Encoder_Loop+0x76>
			if(!(EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 8001432:	4b40      	ldr	r3, [pc, #256]	; (8001534 <Encoder_Loop+0x114>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d128      	bne.n	8001490 <Encoder_Loop+0x70>
 800143e:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <Encoder_Loop+0x114>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001446:	2b00      	cmp	r3, #0
 8001448:	d122      	bne.n	8001490 <Encoder_Loop+0x70>
					EncoderStateReg = ENCODER_TURN;
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <Encoder_Loop+0x110>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
		break;
 8001450:	e01e      	b.n	8001490 <Encoder_Loop+0x70>
			if( !(EncoderPORT->IDR & EncoderPinA) && (EncoderPORT->IDR & EncoderPinB))
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <Encoder_Loop+0x114>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d108      	bne.n	8001470 <Encoder_Loop+0x50>
 800145e:	4b35      	ldr	r3, [pc, #212]	; (8001534 <Encoder_Loop+0x114>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <Encoder_Loop+0x50>
					EncoderStateReg = ENCODER_TURN_RIGHT;//щелчок вправо.
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <Encoder_Loop+0x110>)
 800146c:	2202      	movs	r2, #2
 800146e:	701a      	strb	r2, [r3, #0]
		  if( (EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 8001470:	4b30      	ldr	r3, [pc, #192]	; (8001534 <Encoder_Loop+0x114>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <Encoder_Loop+0x74>
 800147c:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <Encoder_Loop+0x114>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001484:	2b00      	cmp	r3, #0
 8001486:	d105      	bne.n	8001494 <Encoder_Loop+0x74>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <Encoder_Loop+0x110>)
 800148a:	2203      	movs	r2, #3
 800148c:	701a      	strb	r2, [r3, #0]
		break;
 800148e:	e001      	b.n	8001494 <Encoder_Loop+0x74>
		break;
 8001490:	bf00      	nop
 8001492:	e000      	b.n	8001496 <Encoder_Loop+0x76>
		break;
 8001494:	bf00      	nop
		//-----------		
	}
	//--------------------
	//Опрос кнопки энкодера.
	if(++msCount >= ENCODER_BUTTON_TIMEOUT)
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <Encoder_Loop+0x118>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <Encoder_Loop+0x118>)
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <Encoder_Loop+0x118>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b09      	cmp	r3, #9
 80014a8:	d93d      	bls.n	8001526 <Encoder_Loop+0x106>
		{
		  msCount = 0;//сброс счетчика
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <Encoder_Loop+0x118>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
		  //-----------
			if(cycle < 3)
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <Encoder_Loop+0x11c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d811      	bhi.n	80014dc <Encoder_Loop+0xbc>
				{
					but[cycle] = EncoderPORT->IDR & EncoderButtonPin;//Считывание состояние вывода.
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <Encoder_Loop+0x114>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <Encoder_Loop+0x11c>)
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c6:	b299      	uxth	r1, r3
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <Encoder_Loop+0x120>)
 80014ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					cycle++;
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <Encoder_Loop+0x11c>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <Encoder_Loop+0x11c>)
 80014d8:	701a      	strb	r2, [r3, #0]
					else EncoderStr.ButtonIsPress = 0;
				}
			//-----------
		}
	//--------------------
}
 80014da:	e024      	b.n	8001526 <Encoder_Loop+0x106>
					cycle = 0;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <Encoder_Loop+0x11c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
					if(~((but[0] & but[1]) | (but[1] & but[2]) | (but[0] & but[2])) & EncoderButtonPin) 
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <Encoder_Loop+0x120>)
 80014e4:	885a      	ldrh	r2, [r3, #2]
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <Encoder_Loop+0x120>)
 80014e8:	8819      	ldrh	r1, [r3, #0]
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <Encoder_Loop+0x120>)
 80014ec:	889b      	ldrh	r3, [r3, #4]
 80014ee:	430b      	orrs	r3, r1
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4013      	ands	r3, r2
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <Encoder_Loop+0x120>)
 80014f8:	8819      	ldrh	r1, [r3, #0]
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <Encoder_Loop+0x120>)
 80014fc:	889b      	ldrh	r3, [r3, #4]
 80014fe:	400b      	ands	r3, r1
 8001500:	b29b      	uxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <Encoder_Loop+0xfc>
							 EncoderStr.ButtonIsPress = 1;
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <Encoder_Loop+0x124>)
 8001512:	7813      	ldrb	r3, [r2, #0]
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	7013      	strb	r3, [r2, #0]
}
 800151a:	e004      	b.n	8001526 <Encoder_Loop+0x106>
					else EncoderStr.ButtonIsPress = 0;
 800151c:	4a09      	ldr	r2, [pc, #36]	; (8001544 <Encoder_Loop+0x124>)
 800151e:	7813      	ldrb	r3, [r2, #0]
 8001520:	f36f 0300 	bfc	r3, #0, #1
 8001524:	7013      	strb	r3, [r2, #0]
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200001ce 	.word	0x200001ce
 8001534:	40011000 	.word	0x40011000
 8001538:	200001cf 	.word	0x200001cf
 800153c:	200001d0 	.word	0x200001d0
 8001540:	200001d4 	.word	0x200001d4
 8001544:	20000000 	.word	0x20000000

08001548 <Encoder>:
	//Input pull-up
	GPIOB->CRH |= (GPIO_CRH_CNF12_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_CNF10_1);//
	GPIOB->ODR |= (GPIO_ODR_ODR12   | GPIO_ODR_ODR11   | GPIO_ODR_ODR10);	 //
}
//-----------------------------------------------------------------------------
Encoder_t* Encoder(void){
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

	return &EncoderStr;
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <Encoder+0x10>)
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000000 	.word	0x20000000

0800155c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800155c:	480d      	ldr	r0, [pc, #52]	; (8001594 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800155e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001560:	f7ff fbae 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <LoopForever+0x6>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	; (800159c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <LoopForever+0xe>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	; (80015a8 <LoopForever+0x16>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800158a:	f000 f811 	bl	80015b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158e:	f7ff febd 	bl	800130c <main>

08001592 <LoopForever>:

LoopForever:
    b LoopForever
 8001592:	e7fe      	b.n	8001592 <LoopForever>
  ldr   r0, =_estack
 8001594:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015a0:	080027c8 	.word	0x080027c8
  ldr r2, =_sbss
 80015a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015a8:	200001dc 	.word	0x200001dc

080015ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC1_2_IRQHandler>
	...

080015b0 <__libc_init_array>:
 80015b0:	b570      	push	{r4, r5, r6, lr}
 80015b2:	2500      	movs	r5, #0
 80015b4:	4e0c      	ldr	r6, [pc, #48]	; (80015e8 <__libc_init_array+0x38>)
 80015b6:	4c0d      	ldr	r4, [pc, #52]	; (80015ec <__libc_init_array+0x3c>)
 80015b8:	1ba4      	subs	r4, r4, r6
 80015ba:	10a4      	asrs	r4, r4, #2
 80015bc:	42a5      	cmp	r5, r4
 80015be:	d109      	bne.n	80015d4 <__libc_init_array+0x24>
 80015c0:	f001 f806 	bl	80025d0 <_init>
 80015c4:	2500      	movs	r5, #0
 80015c6:	4e0a      	ldr	r6, [pc, #40]	; (80015f0 <__libc_init_array+0x40>)
 80015c8:	4c0a      	ldr	r4, [pc, #40]	; (80015f4 <__libc_init_array+0x44>)
 80015ca:	1ba4      	subs	r4, r4, r6
 80015cc:	10a4      	asrs	r4, r4, #2
 80015ce:	42a5      	cmp	r5, r4
 80015d0:	d105      	bne.n	80015de <__libc_init_array+0x2e>
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
 80015d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015d8:	4798      	blx	r3
 80015da:	3501      	adds	r5, #1
 80015dc:	e7ee      	b.n	80015bc <__libc_init_array+0xc>
 80015de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015e2:	4798      	blx	r3
 80015e4:	3501      	adds	r5, #1
 80015e6:	e7f2      	b.n	80015ce <__libc_init_array+0x1e>
 80015e8:	080027c0 	.word	0x080027c0
 80015ec:	080027c0 	.word	0x080027c0
 80015f0:	080027c0 	.word	0x080027c0
 80015f4:	080027c4 	.word	0x080027c4

080015f8 <sin>:
 80015f8:	b530      	push	{r4, r5, lr}
 80015fa:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <sin+0x6c>)
 80015fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001600:	4293      	cmp	r3, r2
 8001602:	b087      	sub	sp, #28
 8001604:	dc06      	bgt.n	8001614 <sin+0x1c>
 8001606:	2300      	movs	r3, #0
 8001608:	2200      	movs	r2, #0
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	f000 fe27 	bl	8002260 <__kernel_sin>
 8001612:	e006      	b.n	8001622 <sin+0x2a>
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <sin+0x70>)
 8001616:	4293      	cmp	r3, r2
 8001618:	dd05      	ble.n	8001626 <sin+0x2e>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	f7fe fdab 	bl	8000178 <__aeabi_dsub>
 8001622:	b007      	add	sp, #28
 8001624:	bd30      	pop	{r4, r5, pc}
 8001626:	aa02      	add	r2, sp, #8
 8001628:	f000 f822 	bl	8001670 <__ieee754_rem_pio2>
 800162c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001630:	f000 0403 	and.w	r4, r0, #3
 8001634:	2c01      	cmp	r4, #1
 8001636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800163a:	d005      	beq.n	8001648 <sin+0x50>
 800163c:	2c02      	cmp	r4, #2
 800163e:	d006      	beq.n	800164e <sin+0x56>
 8001640:	b964      	cbnz	r4, 800165c <sin+0x64>
 8001642:	2401      	movs	r4, #1
 8001644:	9400      	str	r4, [sp, #0]
 8001646:	e7e2      	b.n	800160e <sin+0x16>
 8001648:	f000 fa02 	bl	8001a50 <__kernel_cos>
 800164c:	e7e9      	b.n	8001622 <sin+0x2a>
 800164e:	2401      	movs	r4, #1
 8001650:	9400      	str	r4, [sp, #0]
 8001652:	f000 fe05 	bl	8002260 <__kernel_sin>
 8001656:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800165a:	e7e2      	b.n	8001622 <sin+0x2a>
 800165c:	f000 f9f8 	bl	8001a50 <__kernel_cos>
 8001660:	e7f9      	b.n	8001656 <sin+0x5e>
 8001662:	bf00      	nop
 8001664:	3fe921fb 	.word	0x3fe921fb
 8001668:	7fefffff 	.word	0x7fefffff
 800166c:	00000000 	.word	0x00000000

08001670 <__ieee754_rem_pio2>:
 8001670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001674:	4614      	mov	r4, r2
 8001676:	4ac2      	ldr	r2, [pc, #776]	; (8001980 <__ieee754_rem_pio2+0x310>)
 8001678:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800167c:	4592      	cmp	sl, r2
 800167e:	b08d      	sub	sp, #52	; 0x34
 8001680:	468b      	mov	fp, r1
 8001682:	dc07      	bgt.n	8001694 <__ieee754_rem_pio2+0x24>
 8001684:	2200      	movs	r2, #0
 8001686:	2300      	movs	r3, #0
 8001688:	e9c4 0100 	strd	r0, r1, [r4]
 800168c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8001690:	2500      	movs	r5, #0
 8001692:	e023      	b.n	80016dc <__ieee754_rem_pio2+0x6c>
 8001694:	4abb      	ldr	r2, [pc, #748]	; (8001984 <__ieee754_rem_pio2+0x314>)
 8001696:	4592      	cmp	sl, r2
 8001698:	dc71      	bgt.n	800177e <__ieee754_rem_pio2+0x10e>
 800169a:	a3ab      	add	r3, pc, #684	; (adr r3, 8001948 <__ieee754_rem_pio2+0x2d8>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	2900      	cmp	r1, #0
 80016a2:	4db9      	ldr	r5, [pc, #740]	; (8001988 <__ieee754_rem_pio2+0x318>)
 80016a4:	dd36      	ble.n	8001714 <__ieee754_rem_pio2+0xa4>
 80016a6:	f7fe fd67 	bl	8000178 <__aeabi_dsub>
 80016aa:	45aa      	cmp	sl, r5
 80016ac:	4606      	mov	r6, r0
 80016ae:	460f      	mov	r7, r1
 80016b0:	d018      	beq.n	80016e4 <__ieee754_rem_pio2+0x74>
 80016b2:	a3a7      	add	r3, pc, #668	; (adr r3, 8001950 <__ieee754_rem_pio2+0x2e0>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe fd5e 	bl	8000178 <__aeabi_dsub>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4630      	mov	r0, r6
 80016c2:	e9c4 2300 	strd	r2, r3, [r4]
 80016c6:	4639      	mov	r1, r7
 80016c8:	f7fe fd56 	bl	8000178 <__aeabi_dsub>
 80016cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8001950 <__ieee754_rem_pio2+0x2e0>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe fd51 	bl	8000178 <__aeabi_dsub>
 80016d6:	2501      	movs	r5, #1
 80016d8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80016dc:	4628      	mov	r0, r5
 80016de:	b00d      	add	sp, #52	; 0x34
 80016e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016e4:	a39c      	add	r3, pc, #624	; (adr r3, 8001958 <__ieee754_rem_pio2+0x2e8>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fd45 	bl	8000178 <__aeabi_dsub>
 80016ee:	a39c      	add	r3, pc, #624	; (adr r3, 8001960 <__ieee754_rem_pio2+0x2f0>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	4606      	mov	r6, r0
 80016f6:	460f      	mov	r7, r1
 80016f8:	f7fe fd3e 	bl	8000178 <__aeabi_dsub>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4630      	mov	r0, r6
 8001702:	e9c4 2300 	strd	r2, r3, [r4]
 8001706:	4639      	mov	r1, r7
 8001708:	f7fe fd36 	bl	8000178 <__aeabi_dsub>
 800170c:	a394      	add	r3, pc, #592	; (adr r3, 8001960 <__ieee754_rem_pio2+0x2f0>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	e7de      	b.n	80016d2 <__ieee754_rem_pio2+0x62>
 8001714:	f7fe fd32 	bl	800017c <__adddf3>
 8001718:	45aa      	cmp	sl, r5
 800171a:	4606      	mov	r6, r0
 800171c:	460f      	mov	r7, r1
 800171e:	d016      	beq.n	800174e <__ieee754_rem_pio2+0xde>
 8001720:	a38b      	add	r3, pc, #556	; (adr r3, 8001950 <__ieee754_rem_pio2+0x2e0>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe fd29 	bl	800017c <__adddf3>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4630      	mov	r0, r6
 8001730:	e9c4 2300 	strd	r2, r3, [r4]
 8001734:	4639      	mov	r1, r7
 8001736:	f7fe fd1f 	bl	8000178 <__aeabi_dsub>
 800173a:	a385      	add	r3, pc, #532	; (adr r3, 8001950 <__ieee754_rem_pio2+0x2e0>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7fe fd1c 	bl	800017c <__adddf3>
 8001744:	f04f 35ff 	mov.w	r5, #4294967295
 8001748:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800174c:	e7c6      	b.n	80016dc <__ieee754_rem_pio2+0x6c>
 800174e:	a382      	add	r3, pc, #520	; (adr r3, 8001958 <__ieee754_rem_pio2+0x2e8>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe fd12 	bl	800017c <__adddf3>
 8001758:	a381      	add	r3, pc, #516	; (adr r3, 8001960 <__ieee754_rem_pio2+0x2f0>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	4606      	mov	r6, r0
 8001760:	460f      	mov	r7, r1
 8001762:	f7fe fd0b 	bl	800017c <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4630      	mov	r0, r6
 800176c:	e9c4 2300 	strd	r2, r3, [r4]
 8001770:	4639      	mov	r1, r7
 8001772:	f7fe fd01 	bl	8000178 <__aeabi_dsub>
 8001776:	a37a      	add	r3, pc, #488	; (adr r3, 8001960 <__ieee754_rem_pio2+0x2f0>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	e7e0      	b.n	8001740 <__ieee754_rem_pio2+0xd0>
 800177e:	4a83      	ldr	r2, [pc, #524]	; (800198c <__ieee754_rem_pio2+0x31c>)
 8001780:	4592      	cmp	sl, r2
 8001782:	f300 80d2 	bgt.w	800192a <__ieee754_rem_pio2+0x2ba>
 8001786:	f000 fe21 	bl	80023cc <fabs>
 800178a:	a377      	add	r3, pc, #476	; (adr r3, 8001968 <__ieee754_rem_pio2+0x2f8>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	4606      	mov	r6, r0
 8001792:	460f      	mov	r7, r1
 8001794:	f7fe fea8 	bl	80004e8 <__aeabi_dmul>
 8001798:	2200      	movs	r2, #0
 800179a:	4b7d      	ldr	r3, [pc, #500]	; (8001990 <__ieee754_rem_pio2+0x320>)
 800179c:	f7fe fcee 	bl	800017c <__adddf3>
 80017a0:	f7ff f93c 	bl	8000a1c <__aeabi_d2iz>
 80017a4:	4605      	mov	r5, r0
 80017a6:	f7fe fe35 	bl	8000414 <__aeabi_i2d>
 80017aa:	a367      	add	r3, pc, #412	; (adr r3, 8001948 <__ieee754_rem_pio2+0x2d8>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80017b4:	f7fe fe98 	bl	80004e8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4630      	mov	r0, r6
 80017be:	4639      	mov	r1, r7
 80017c0:	f7fe fcda 	bl	8000178 <__aeabi_dsub>
 80017c4:	a362      	add	r3, pc, #392	; (adr r3, 8001950 <__ieee754_rem_pio2+0x2e0>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	4606      	mov	r6, r0
 80017cc:	460f      	mov	r7, r1
 80017ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80017d2:	f7fe fe89 	bl	80004e8 <__aeabi_dmul>
 80017d6:	2d1f      	cmp	r5, #31
 80017d8:	4680      	mov	r8, r0
 80017da:	4689      	mov	r9, r1
 80017dc:	dc0e      	bgt.n	80017fc <__ieee754_rem_pio2+0x18c>
 80017de:	4b6d      	ldr	r3, [pc, #436]	; (8001994 <__ieee754_rem_pio2+0x324>)
 80017e0:	1e6a      	subs	r2, r5, #1
 80017e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e6:	4553      	cmp	r3, sl
 80017e8:	d008      	beq.n	80017fc <__ieee754_rem_pio2+0x18c>
 80017ea:	4642      	mov	r2, r8
 80017ec:	464b      	mov	r3, r9
 80017ee:	4630      	mov	r0, r6
 80017f0:	4639      	mov	r1, r7
 80017f2:	f7fe fcc1 	bl	8000178 <__aeabi_dsub>
 80017f6:	e9c4 0100 	strd	r0, r1, [r4]
 80017fa:	e011      	b.n	8001820 <__ieee754_rem_pio2+0x1b0>
 80017fc:	464b      	mov	r3, r9
 80017fe:	4642      	mov	r2, r8
 8001800:	4630      	mov	r0, r6
 8001802:	4639      	mov	r1, r7
 8001804:	f7fe fcb8 	bl	8000178 <__aeabi_dsub>
 8001808:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800180c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8001810:	ebaa 0303 	sub.w	r3, sl, r3
 8001814:	2b10      	cmp	r3, #16
 8001816:	dc1f      	bgt.n	8001858 <__ieee754_rem_pio2+0x1e8>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	e9c4 2300 	strd	r2, r3, [r4]
 8001820:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8001824:	4630      	mov	r0, r6
 8001826:	4653      	mov	r3, sl
 8001828:	4639      	mov	r1, r7
 800182a:	f7fe fca5 	bl	8000178 <__aeabi_dsub>
 800182e:	4642      	mov	r2, r8
 8001830:	464b      	mov	r3, r9
 8001832:	f7fe fca1 	bl	8000178 <__aeabi_dsub>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	f1bb 0f00 	cmp.w	fp, #0
 800183e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8001842:	f6bf af4b 	bge.w	80016dc <__ieee754_rem_pio2+0x6c>
 8001846:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800184a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800184e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8001852:	60e1      	str	r1, [r4, #12]
 8001854:	426d      	negs	r5, r5
 8001856:	e741      	b.n	80016dc <__ieee754_rem_pio2+0x6c>
 8001858:	a33f      	add	r3, pc, #252	; (adr r3, 8001958 <__ieee754_rem_pio2+0x2e8>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001862:	f7fe fe41 	bl	80004e8 <__aeabi_dmul>
 8001866:	4680      	mov	r8, r0
 8001868:	4689      	mov	r9, r1
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4630      	mov	r0, r6
 8001870:	4639      	mov	r1, r7
 8001872:	f7fe fc81 	bl	8000178 <__aeabi_dsub>
 8001876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4630      	mov	r0, r6
 8001880:	4639      	mov	r1, r7
 8001882:	f7fe fc79 	bl	8000178 <__aeabi_dsub>
 8001886:	4642      	mov	r2, r8
 8001888:	464b      	mov	r3, r9
 800188a:	f7fe fc75 	bl	8000178 <__aeabi_dsub>
 800188e:	a334      	add	r3, pc, #208	; (adr r3, 8001960 <__ieee754_rem_pio2+0x2f0>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	4606      	mov	r6, r0
 8001896:	460f      	mov	r7, r1
 8001898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800189c:	f7fe fe24 	bl	80004e8 <__aeabi_dmul>
 80018a0:	4632      	mov	r2, r6
 80018a2:	463b      	mov	r3, r7
 80018a4:	f7fe fc68 	bl	8000178 <__aeabi_dsub>
 80018a8:	460b      	mov	r3, r1
 80018aa:	4602      	mov	r2, r0
 80018ac:	4680      	mov	r8, r0
 80018ae:	4689      	mov	r9, r1
 80018b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80018b4:	f7fe fc60 	bl	8000178 <__aeabi_dsub>
 80018b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80018bc:	ebaa 0a03 	sub.w	sl, sl, r3
 80018c0:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 80018c4:	dc06      	bgt.n	80018d4 <__ieee754_rem_pio2+0x264>
 80018c6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	e9c4 2300 	strd	r2, r3, [r4]
 80018d2:	e7a5      	b.n	8001820 <__ieee754_rem_pio2+0x1b0>
 80018d4:	a326      	add	r3, pc, #152	; (adr r3, 8001970 <__ieee754_rem_pio2+0x300>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80018de:	f7fe fe03 	bl	80004e8 <__aeabi_dmul>
 80018e2:	4680      	mov	r8, r0
 80018e4:	4689      	mov	r9, r1
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80018ee:	f7fe fc43 	bl	8000178 <__aeabi_dsub>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4606      	mov	r6, r0
 80018f8:	460f      	mov	r7, r1
 80018fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80018fe:	f7fe fc3b 	bl	8000178 <__aeabi_dsub>
 8001902:	4642      	mov	r2, r8
 8001904:	464b      	mov	r3, r9
 8001906:	f7fe fc37 	bl	8000178 <__aeabi_dsub>
 800190a:	a31b      	add	r3, pc, #108	; (adr r3, 8001978 <__ieee754_rem_pio2+0x308>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	4680      	mov	r8, r0
 8001912:	4689      	mov	r9, r1
 8001914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001918:	f7fe fde6 	bl	80004e8 <__aeabi_dmul>
 800191c:	4642      	mov	r2, r8
 800191e:	464b      	mov	r3, r9
 8001920:	f7fe fc2a 	bl	8000178 <__aeabi_dsub>
 8001924:	4680      	mov	r8, r0
 8001926:	4689      	mov	r9, r1
 8001928:	e75f      	b.n	80017ea <__ieee754_rem_pio2+0x17a>
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <__ieee754_rem_pio2+0x328>)
 800192c:	4592      	cmp	sl, r2
 800192e:	dd35      	ble.n	800199c <__ieee754_rem_pio2+0x32c>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	f7fe fc20 	bl	8000178 <__aeabi_dsub>
 8001938:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800193c:	e9c4 0100 	strd	r0, r1, [r4]
 8001940:	e6a6      	b.n	8001690 <__ieee754_rem_pio2+0x20>
 8001942:	bf00      	nop
 8001944:	f3af 8000 	nop.w
 8001948:	54400000 	.word	0x54400000
 800194c:	3ff921fb 	.word	0x3ff921fb
 8001950:	1a626331 	.word	0x1a626331
 8001954:	3dd0b461 	.word	0x3dd0b461
 8001958:	1a600000 	.word	0x1a600000
 800195c:	3dd0b461 	.word	0x3dd0b461
 8001960:	2e037073 	.word	0x2e037073
 8001964:	3ba3198a 	.word	0x3ba3198a
 8001968:	6dc9c883 	.word	0x6dc9c883
 800196c:	3fe45f30 	.word	0x3fe45f30
 8001970:	2e000000 	.word	0x2e000000
 8001974:	3ba3198a 	.word	0x3ba3198a
 8001978:	252049c1 	.word	0x252049c1
 800197c:	397b839a 	.word	0x397b839a
 8001980:	3fe921fb 	.word	0x3fe921fb
 8001984:	4002d97b 	.word	0x4002d97b
 8001988:	3ff921fb 	.word	0x3ff921fb
 800198c:	413921fb 	.word	0x413921fb
 8001990:	3fe00000 	.word	0x3fe00000
 8001994:	080025e8 	.word	0x080025e8
 8001998:	7fefffff 	.word	0x7fefffff
 800199c:	ea4f 552a 	mov.w	r5, sl, asr #20
 80019a0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80019a4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80019a8:	460f      	mov	r7, r1
 80019aa:	4606      	mov	r6, r0
 80019ac:	f7ff f836 	bl	8000a1c <__aeabi_d2iz>
 80019b0:	f7fe fd30 	bl	8000414 <__aeabi_i2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4630      	mov	r0, r6
 80019ba:	4639      	mov	r1, r7
 80019bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80019c0:	f7fe fbda 	bl	8000178 <__aeabi_dsub>
 80019c4:	2200      	movs	r2, #0
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <__ieee754_rem_pio2+0x3d8>)
 80019c8:	f7fe fd8e 	bl	80004e8 <__aeabi_dmul>
 80019cc:	460f      	mov	r7, r1
 80019ce:	4606      	mov	r6, r0
 80019d0:	f7ff f824 	bl	8000a1c <__aeabi_d2iz>
 80019d4:	f7fe fd1e 	bl	8000414 <__aeabi_i2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4630      	mov	r0, r6
 80019de:	4639      	mov	r1, r7
 80019e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80019e4:	f7fe fbc8 	bl	8000178 <__aeabi_dsub>
 80019e8:	2200      	movs	r2, #0
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <__ieee754_rem_pio2+0x3d8>)
 80019ec:	f7fe fd7c 	bl	80004e8 <__aeabi_dmul>
 80019f0:	f04f 0803 	mov.w	r8, #3
 80019f4:	2600      	movs	r6, #0
 80019f6:	2700      	movs	r7, #0
 80019f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80019fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8001a00:	4632      	mov	r2, r6
 8001a02:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8001a06:	463b      	mov	r3, r7
 8001a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8001a0c:	f7fe ffd4 	bl	80009b8 <__aeabi_dcmpeq>
 8001a10:	b9b8      	cbnz	r0, 8001a42 <__ieee754_rem_pio2+0x3d2>
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <__ieee754_rem_pio2+0x3dc>)
 8001a14:	462a      	mov	r2, r5
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	a806      	add	r0, sp, #24
 8001a20:	4643      	mov	r3, r8
 8001a22:	f000 f8d3 	bl	8001bcc <__kernel_rem_pio2>
 8001a26:	f1bb 0f00 	cmp.w	fp, #0
 8001a2a:	4605      	mov	r5, r0
 8001a2c:	f6bf ae56 	bge.w	80016dc <__ieee754_rem_pio2+0x6c>
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001a36:	6063      	str	r3, [r4, #4]
 8001a38:	68e3      	ldr	r3, [r4, #12]
 8001a3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001a3e:	60e3      	str	r3, [r4, #12]
 8001a40:	e708      	b.n	8001854 <__ieee754_rem_pio2+0x1e4>
 8001a42:	46d0      	mov	r8, sl
 8001a44:	e7dc      	b.n	8001a00 <__ieee754_rem_pio2+0x390>
 8001a46:	bf00      	nop
 8001a48:	41700000 	.word	0x41700000
 8001a4c:	08002668 	.word	0x08002668

08001a50 <__kernel_cos>:
 8001a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a54:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8001a58:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8001a5c:	4680      	mov	r8, r0
 8001a5e:	460f      	mov	r7, r1
 8001a60:	e9cd 2300 	strd	r2, r3, [sp]
 8001a64:	da04      	bge.n	8001a70 <__kernel_cos+0x20>
 8001a66:	f7fe ffd9 	bl	8000a1c <__aeabi_d2iz>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	f000 8086 	beq.w	8001b7c <__kernel_cos+0x12c>
 8001a70:	4642      	mov	r2, r8
 8001a72:	463b      	mov	r3, r7
 8001a74:	4640      	mov	r0, r8
 8001a76:	4639      	mov	r1, r7
 8001a78:	f7fe fd36 	bl	80004e8 <__aeabi_dmul>
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <__kernel_cos+0x168>)
 8001a80:	4604      	mov	r4, r0
 8001a82:	460d      	mov	r5, r1
 8001a84:	f7fe fd30 	bl	80004e8 <__aeabi_dmul>
 8001a88:	a33f      	add	r3, pc, #252	; (adr r3, 8001b88 <__kernel_cos+0x138>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	4682      	mov	sl, r0
 8001a90:	468b      	mov	fp, r1
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	f7fe fd27 	bl	80004e8 <__aeabi_dmul>
 8001a9a:	a33d      	add	r3, pc, #244	; (adr r3, 8001b90 <__kernel_cos+0x140>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fb6c 	bl	800017c <__adddf3>
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	462b      	mov	r3, r5
 8001aa8:	f7fe fd1e 	bl	80004e8 <__aeabi_dmul>
 8001aac:	a33a      	add	r3, pc, #232	; (adr r3, 8001b98 <__kernel_cos+0x148>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fb61 	bl	8000178 <__aeabi_dsub>
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	462b      	mov	r3, r5
 8001aba:	f7fe fd15 	bl	80004e8 <__aeabi_dmul>
 8001abe:	a338      	add	r3, pc, #224	; (adr r3, 8001ba0 <__kernel_cos+0x150>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	f7fe fb5a 	bl	800017c <__adddf3>
 8001ac8:	4622      	mov	r2, r4
 8001aca:	462b      	mov	r3, r5
 8001acc:	f7fe fd0c 	bl	80004e8 <__aeabi_dmul>
 8001ad0:	a335      	add	r3, pc, #212	; (adr r3, 8001ba8 <__kernel_cos+0x158>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f7fe fb4f 	bl	8000178 <__aeabi_dsub>
 8001ada:	4622      	mov	r2, r4
 8001adc:	462b      	mov	r3, r5
 8001ade:	f7fe fd03 	bl	80004e8 <__aeabi_dmul>
 8001ae2:	a333      	add	r3, pc, #204	; (adr r3, 8001bb0 <__kernel_cos+0x160>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fb48 	bl	800017c <__adddf3>
 8001aec:	4622      	mov	r2, r4
 8001aee:	462b      	mov	r3, r5
 8001af0:	f7fe fcfa 	bl	80004e8 <__aeabi_dmul>
 8001af4:	4622      	mov	r2, r4
 8001af6:	462b      	mov	r3, r5
 8001af8:	f7fe fcf6 	bl	80004e8 <__aeabi_dmul>
 8001afc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	4640      	mov	r0, r8
 8001b06:	4639      	mov	r1, r7
 8001b08:	f7fe fcee 	bl	80004e8 <__aeabi_dmul>
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4629      	mov	r1, r5
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7fe fb30 	bl	8000178 <__aeabi_dsub>
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <__kernel_cos+0x16c>)
 8001b1a:	4680      	mov	r8, r0
 8001b1c:	429e      	cmp	r6, r3
 8001b1e:	4689      	mov	r9, r1
 8001b20:	dc0e      	bgt.n	8001b40 <__kernel_cos+0xf0>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4650      	mov	r0, sl
 8001b28:	4659      	mov	r1, fp
 8001b2a:	f7fe fb25 	bl	8000178 <__aeabi_dsub>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	2000      	movs	r0, #0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <__kernel_cos+0x170>)
 8001b36:	f7fe fb1f 	bl	8000178 <__aeabi_dsub>
 8001b3a:	b003      	add	sp, #12
 8001b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b40:	2400      	movs	r4, #0
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <__kernel_cos+0x174>)
 8001b44:	4622      	mov	r2, r4
 8001b46:	429e      	cmp	r6, r3
 8001b48:	bfcc      	ite	gt
 8001b4a:	4d1f      	ldrgt	r5, [pc, #124]	; (8001bc8 <__kernel_cos+0x178>)
 8001b4c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8001b50:	462b      	mov	r3, r5
 8001b52:	2000      	movs	r0, #0
 8001b54:	491a      	ldr	r1, [pc, #104]	; (8001bc0 <__kernel_cos+0x170>)
 8001b56:	f7fe fb0f 	bl	8000178 <__aeabi_dsub>
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	4606      	mov	r6, r0
 8001b5e:	460f      	mov	r7, r1
 8001b60:	462b      	mov	r3, r5
 8001b62:	4650      	mov	r0, sl
 8001b64:	4659      	mov	r1, fp
 8001b66:	f7fe fb07 	bl	8000178 <__aeabi_dsub>
 8001b6a:	4642      	mov	r2, r8
 8001b6c:	464b      	mov	r3, r9
 8001b6e:	f7fe fb03 	bl	8000178 <__aeabi_dsub>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4630      	mov	r0, r6
 8001b78:	4639      	mov	r1, r7
 8001b7a:	e7dc      	b.n	8001b36 <__kernel_cos+0xe6>
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	4910      	ldr	r1, [pc, #64]	; (8001bc0 <__kernel_cos+0x170>)
 8001b80:	e7db      	b.n	8001b3a <__kernel_cos+0xea>
 8001b82:	bf00      	nop
 8001b84:	f3af 8000 	nop.w
 8001b88:	be8838d4 	.word	0xbe8838d4
 8001b8c:	bda8fae9 	.word	0xbda8fae9
 8001b90:	bdb4b1c4 	.word	0xbdb4b1c4
 8001b94:	3e21ee9e 	.word	0x3e21ee9e
 8001b98:	809c52ad 	.word	0x809c52ad
 8001b9c:	3e927e4f 	.word	0x3e927e4f
 8001ba0:	19cb1590 	.word	0x19cb1590
 8001ba4:	3efa01a0 	.word	0x3efa01a0
 8001ba8:	16c15177 	.word	0x16c15177
 8001bac:	3f56c16c 	.word	0x3f56c16c
 8001bb0:	5555554c 	.word	0x5555554c
 8001bb4:	3fa55555 	.word	0x3fa55555
 8001bb8:	3fe00000 	.word	0x3fe00000
 8001bbc:	3fd33332 	.word	0x3fd33332
 8001bc0:	3ff00000 	.word	0x3ff00000
 8001bc4:	3fe90000 	.word	0x3fe90000
 8001bc8:	3fd20000 	.word	0x3fd20000

08001bcc <__kernel_rem_pio2>:
 8001bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8001bd4:	9307      	str	r3, [sp, #28]
 8001bd6:	9104      	str	r1, [sp, #16]
 8001bd8:	4bbf      	ldr	r3, [pc, #764]	; (8001ed8 <__kernel_rem_pio2+0x30c>)
 8001bda:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8001bdc:	1ed4      	subs	r4, r2, #3
 8001bde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001be2:	2500      	movs	r5, #0
 8001be4:	9302      	str	r3, [sp, #8]
 8001be6:	9b07      	ldr	r3, [sp, #28]
 8001be8:	9008      	str	r0, [sp, #32]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	9306      	str	r3, [sp, #24]
 8001bee:	2318      	movs	r3, #24
 8001bf0:	fb94 f4f3 	sdiv	r4, r4, r3
 8001bf4:	f06f 0317 	mvn.w	r3, #23
 8001bf8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8001bfc:	fb04 3303 	mla	r3, r4, r3, r3
 8001c00:	eb03 0a02 	add.w	sl, r3, r2
 8001c04:	9a06      	ldr	r2, [sp, #24]
 8001c06:	9b02      	ldr	r3, [sp, #8]
 8001c08:	1aa7      	subs	r7, r4, r2
 8001c0a:	eb03 0802 	add.w	r8, r3, r2
 8001c0e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001c10:	2200      	movs	r2, #0
 8001c12:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8001c16:	2300      	movs	r3, #0
 8001c18:	ae1e      	add	r6, sp, #120	; 0x78
 8001c1a:	4545      	cmp	r5, r8
 8001c1c:	dd14      	ble.n	8001c48 <__kernel_rem_pio2+0x7c>
 8001c1e:	2600      	movs	r6, #0
 8001c20:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8001c24:	9b02      	ldr	r3, [sp, #8]
 8001c26:	429e      	cmp	r6, r3
 8001c28:	dc39      	bgt.n	8001c9e <__kernel_rem_pio2+0xd2>
 8001c2a:	9b08      	ldr	r3, [sp, #32]
 8001c2c:	f04f 0800 	mov.w	r8, #0
 8001c30:	3b08      	subs	r3, #8
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	9b07      	ldr	r3, [sp, #28]
 8001c36:	f04f 0900 	mov.w	r9, #0
 8001c3a:	199d      	adds	r5, r3, r6
 8001c3c:	ab20      	add	r3, sp, #128	; 0x80
 8001c3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001c42:	9305      	str	r3, [sp, #20]
 8001c44:	2700      	movs	r7, #0
 8001c46:	e023      	b.n	8001c90 <__kernel_rem_pio2+0xc4>
 8001c48:	42ef      	cmn	r7, r5
 8001c4a:	d40b      	bmi.n	8001c64 <__kernel_rem_pio2+0x98>
 8001c4c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8001c50:	e9cd 2300 	strd	r2, r3, [sp]
 8001c54:	f7fe fbde 	bl	8000414 <__aeabi_i2d>
 8001c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001c5c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8001c60:	3501      	adds	r5, #1
 8001c62:	e7da      	b.n	8001c1a <__kernel_rem_pio2+0x4e>
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	e7f8      	b.n	8001c5c <__kernel_rem_pio2+0x90>
 8001c6a:	9905      	ldr	r1, [sp, #20]
 8001c6c:	9d00      	ldr	r5, [sp, #0]
 8001c6e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8001c72:	9105      	str	r1, [sp, #20]
 8001c74:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8001c78:	9500      	str	r5, [sp, #0]
 8001c7a:	f7fe fc35 	bl	80004e8 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4640      	mov	r0, r8
 8001c84:	4649      	mov	r1, r9
 8001c86:	f7fe fa79 	bl	800017c <__adddf3>
 8001c8a:	4680      	mov	r8, r0
 8001c8c:	4689      	mov	r9, r1
 8001c8e:	3701      	adds	r7, #1
 8001c90:	9b06      	ldr	r3, [sp, #24]
 8001c92:	429f      	cmp	r7, r3
 8001c94:	dde9      	ble.n	8001c6a <__kernel_rem_pio2+0x9e>
 8001c96:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8001c9a:	3601      	adds	r6, #1
 8001c9c:	e7c2      	b.n	8001c24 <__kernel_rem_pio2+0x58>
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	aa0c      	add	r2, sp, #48	; 0x30
 8001ca2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ca8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001caa:	9f02      	ldr	r7, [sp, #8]
 8001cac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001cb0:	930a      	str	r3, [sp, #40]	; 0x28
 8001cb2:	2600      	movs	r6, #0
 8001cb4:	ab98      	add	r3, sp, #608	; 0x260
 8001cb6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8001cba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8001cbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001cc2:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8001cc6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8001cca:	ab98      	add	r3, sp, #608	; 0x260
 8001ccc:	445b      	add	r3, fp
 8001cce:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8001cd2:	1bbb      	subs	r3, r7, r6
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	dc71      	bgt.n	8001dbc <__kernel_rem_pio2+0x1f0>
 8001cd8:	4652      	mov	r2, sl
 8001cda:	4640      	mov	r0, r8
 8001cdc:	4649      	mov	r1, r9
 8001cde:	f000 fbff 	bl	80024e0 <scalbn>
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001ce8:	4604      	mov	r4, r0
 8001cea:	460d      	mov	r5, r1
 8001cec:	f7fe fbfc 	bl	80004e8 <__aeabi_dmul>
 8001cf0:	f000 fb72 	bl	80023d8 <floor>
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4b79      	ldr	r3, [pc, #484]	; (8001edc <__kernel_rem_pio2+0x310>)
 8001cf8:	f7fe fbf6 	bl	80004e8 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4620      	mov	r0, r4
 8001d02:	4629      	mov	r1, r5
 8001d04:	f7fe fa38 	bl	8000178 <__aeabi_dsub>
 8001d08:	460d      	mov	r5, r1
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	f7fe fe86 	bl	8000a1c <__aeabi_d2iz>
 8001d10:	9005      	str	r0, [sp, #20]
 8001d12:	f7fe fb7f 	bl	8000414 <__aeabi_i2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fa2b 	bl	8000178 <__aeabi_dsub>
 8001d22:	f1ba 0f00 	cmp.w	sl, #0
 8001d26:	4680      	mov	r8, r0
 8001d28:	4689      	mov	r9, r1
 8001d2a:	dd6c      	ble.n	8001e06 <__kernel_rem_pio2+0x23a>
 8001d2c:	1e7a      	subs	r2, r7, #1
 8001d2e:	ab0c      	add	r3, sp, #48	; 0x30
 8001d30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001d34:	f1ca 0118 	rsb	r1, sl, #24
 8001d38:	9c05      	ldr	r4, [sp, #20]
 8001d3a:	fa40 f301 	asr.w	r3, r0, r1
 8001d3e:	441c      	add	r4, r3
 8001d40:	408b      	lsls	r3, r1
 8001d42:	1ac0      	subs	r0, r0, r3
 8001d44:	ab0c      	add	r3, sp, #48	; 0x30
 8001d46:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001d4a:	f1ca 0317 	rsb	r3, sl, #23
 8001d4e:	9405      	str	r4, [sp, #20]
 8001d50:	fa40 f303 	asr.w	r3, r0, r3
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	9b00      	ldr	r3, [sp, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	dd62      	ble.n	8001e22 <__kernel_rem_pio2+0x256>
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001d62:	4614      	mov	r4, r2
 8001d64:	9b05      	ldr	r3, [sp, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	9305      	str	r3, [sp, #20]
 8001d6a:	4297      	cmp	r7, r2
 8001d6c:	f300 809f 	bgt.w	8001eae <__kernel_rem_pio2+0x2e2>
 8001d70:	f1ba 0f00 	cmp.w	sl, #0
 8001d74:	dd07      	ble.n	8001d86 <__kernel_rem_pio2+0x1ba>
 8001d76:	f1ba 0f01 	cmp.w	sl, #1
 8001d7a:	f000 80bb 	beq.w	8001ef4 <__kernel_rem_pio2+0x328>
 8001d7e:	f1ba 0f02 	cmp.w	sl, #2
 8001d82:	f000 80c1 	beq.w	8001f08 <__kernel_rem_pio2+0x33c>
 8001d86:	9b00      	ldr	r3, [sp, #0]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d14a      	bne.n	8001e22 <__kernel_rem_pio2+0x256>
 8001d8c:	4642      	mov	r2, r8
 8001d8e:	464b      	mov	r3, r9
 8001d90:	2000      	movs	r0, #0
 8001d92:	4953      	ldr	r1, [pc, #332]	; (8001ee0 <__kernel_rem_pio2+0x314>)
 8001d94:	f7fe f9f0 	bl	8000178 <__aeabi_dsub>
 8001d98:	4680      	mov	r8, r0
 8001d9a:	4689      	mov	r9, r1
 8001d9c:	2c00      	cmp	r4, #0
 8001d9e:	d040      	beq.n	8001e22 <__kernel_rem_pio2+0x256>
 8001da0:	4652      	mov	r2, sl
 8001da2:	2000      	movs	r0, #0
 8001da4:	494e      	ldr	r1, [pc, #312]	; (8001ee0 <__kernel_rem_pio2+0x314>)
 8001da6:	f000 fb9b 	bl	80024e0 <scalbn>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4640      	mov	r0, r8
 8001db0:	4649      	mov	r1, r9
 8001db2:	f7fe f9e1 	bl	8000178 <__aeabi_dsub>
 8001db6:	4680      	mov	r8, r0
 8001db8:	4689      	mov	r9, r1
 8001dba:	e032      	b.n	8001e22 <__kernel_rem_pio2+0x256>
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <__kernel_rem_pio2+0x318>)
 8001dc0:	4640      	mov	r0, r8
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	f7fe fb90 	bl	80004e8 <__aeabi_dmul>
 8001dc8:	f7fe fe28 	bl	8000a1c <__aeabi_d2iz>
 8001dcc:	f7fe fb22 	bl	8000414 <__aeabi_i2d>
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <__kernel_rem_pio2+0x31c>)
 8001dd4:	e9cd 0100 	strd	r0, r1, [sp]
 8001dd8:	f7fe fb86 	bl	80004e8 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4640      	mov	r0, r8
 8001de2:	4649      	mov	r1, r9
 8001de4:	f7fe f9c8 	bl	8000178 <__aeabi_dsub>
 8001de8:	f7fe fe18 	bl	8000a1c <__aeabi_d2iz>
 8001dec:	ab0c      	add	r3, sp, #48	; 0x30
 8001dee:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8001df2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8001df6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001dfa:	f7fe f9bf 	bl	800017c <__adddf3>
 8001dfe:	3601      	adds	r6, #1
 8001e00:	4680      	mov	r8, r0
 8001e02:	4689      	mov	r9, r1
 8001e04:	e765      	b.n	8001cd2 <__kernel_rem_pio2+0x106>
 8001e06:	d105      	bne.n	8001e14 <__kernel_rem_pio2+0x248>
 8001e08:	1e7b      	subs	r3, r7, #1
 8001e0a:	aa0c      	add	r2, sp, #48	; 0x30
 8001e0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e10:	15c3      	asrs	r3, r0, #23
 8001e12:	e79f      	b.n	8001d54 <__kernel_rem_pio2+0x188>
 8001e14:	2200      	movs	r2, #0
 8001e16:	4b35      	ldr	r3, [pc, #212]	; (8001eec <__kernel_rem_pio2+0x320>)
 8001e18:	f7fe fdec 	bl	80009f4 <__aeabi_dcmpge>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d143      	bne.n	8001ea8 <__kernel_rem_pio2+0x2dc>
 8001e20:	9000      	str	r0, [sp, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	2300      	movs	r3, #0
 8001e26:	4640      	mov	r0, r8
 8001e28:	4649      	mov	r1, r9
 8001e2a:	f7fe fdc5 	bl	80009b8 <__aeabi_dcmpeq>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	f000 80c3 	beq.w	8001fba <__kernel_rem_pio2+0x3ee>
 8001e34:	1e7c      	subs	r4, r7, #1
 8001e36:	4623      	mov	r3, r4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	9902      	ldr	r1, [sp, #8]
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	da6a      	bge.n	8001f16 <__kernel_rem_pio2+0x34a>
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	f000 8084 	beq.w	8001f4e <__kernel_rem_pio2+0x382>
 8001e46:	ab0c      	add	r3, sp, #48	; 0x30
 8001e48:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001e4c:	f1aa 0a18 	sub.w	sl, sl, #24
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80b0 	beq.w	8001fb6 <__kernel_rem_pio2+0x3ea>
 8001e56:	4652      	mov	r2, sl
 8001e58:	2000      	movs	r0, #0
 8001e5a:	4921      	ldr	r1, [pc, #132]	; (8001ee0 <__kernel_rem_pio2+0x314>)
 8001e5c:	f000 fb40 	bl	80024e0 <scalbn>
 8001e60:	4625      	mov	r5, r4
 8001e62:	4606      	mov	r6, r0
 8001e64:	460f      	mov	r7, r1
 8001e66:	f04f 0a00 	mov.w	sl, #0
 8001e6a:	00e3      	lsls	r3, r4, #3
 8001e6c:	aa98      	add	r2, sp, #608	; 0x260
 8001e6e:	eb02 0803 	add.w	r8, r2, r3
 8001e72:	f8df b070 	ldr.w	fp, [pc, #112]	; 8001ee4 <__kernel_rem_pio2+0x318>
 8001e76:	9306      	str	r3, [sp, #24]
 8001e78:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8001e7c:	2d00      	cmp	r5, #0
 8001e7e:	f280 80d2 	bge.w	8002026 <__kernel_rem_pio2+0x45a>
 8001e82:	2500      	movs	r5, #0
 8001e84:	9a06      	ldr	r2, [sp, #24]
 8001e86:	ab98      	add	r3, sp, #608	; 0x260
 8001e88:	189e      	adds	r6, r3, r2
 8001e8a:	3ea8      	subs	r6, #168	; 0xa8
 8001e8c:	1b63      	subs	r3, r4, r5
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f2c0 80f9 	blt.w	8002086 <__kernel_rem_pio2+0x4ba>
 8001e94:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8001ef0 <__kernel_rem_pio2+0x324>
 8001e98:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8001e9c:	f04f 0a00 	mov.w	sl, #0
 8001ea0:	f04f 0b00 	mov.w	fp, #0
 8001ea4:	2700      	movs	r7, #0
 8001ea6:	e0e2      	b.n	800206e <__kernel_rem_pio2+0x4a2>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	e756      	b.n	8001d5c <__kernel_rem_pio2+0x190>
 8001eae:	ab0c      	add	r3, sp, #48	; 0x30
 8001eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb4:	b94c      	cbnz	r4, 8001eca <__kernel_rem_pio2+0x2fe>
 8001eb6:	b12b      	cbz	r3, 8001ec4 <__kernel_rem_pio2+0x2f8>
 8001eb8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8001ebc:	a80c      	add	r0, sp, #48	; 0x30
 8001ebe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	3201      	adds	r2, #1
 8001ec6:	461c      	mov	r4, r3
 8001ec8:	e74f      	b.n	8001d6a <__kernel_rem_pio2+0x19e>
 8001eca:	1acb      	subs	r3, r1, r3
 8001ecc:	a80c      	add	r0, sp, #48	; 0x30
 8001ece:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8001ed2:	4623      	mov	r3, r4
 8001ed4:	e7f6      	b.n	8001ec4 <__kernel_rem_pio2+0x2f8>
 8001ed6:	bf00      	nop
 8001ed8:	080027b0 	.word	0x080027b0
 8001edc:	40200000 	.word	0x40200000
 8001ee0:	3ff00000 	.word	0x3ff00000
 8001ee4:	3e700000 	.word	0x3e700000
 8001ee8:	41700000 	.word	0x41700000
 8001eec:	3fe00000 	.word	0x3fe00000
 8001ef0:	08002768 	.word	0x08002768
 8001ef4:	1e7a      	subs	r2, r7, #1
 8001ef6:	ab0c      	add	r3, sp, #48	; 0x30
 8001ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001f00:	a90c      	add	r1, sp, #48	; 0x30
 8001f02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001f06:	e73e      	b.n	8001d86 <__kernel_rem_pio2+0x1ba>
 8001f08:	1e7a      	subs	r2, r7, #1
 8001f0a:	ab0c      	add	r3, sp, #48	; 0x30
 8001f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f14:	e7f4      	b.n	8001f00 <__kernel_rem_pio2+0x334>
 8001f16:	a90c      	add	r1, sp, #48	; 0x30
 8001f18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	e78b      	b.n	8001e3a <__kernel_rem_pio2+0x26e>
 8001f22:	3401      	adds	r4, #1
 8001f24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8001f28:	2a00      	cmp	r2, #0
 8001f2a:	d0fa      	beq.n	8001f22 <__kernel_rem_pio2+0x356>
 8001f2c:	ab98      	add	r3, sp, #608	; 0x260
 8001f2e:	449b      	add	fp, r3
 8001f30:	9b07      	ldr	r3, [sp, #28]
 8001f32:	1c7e      	adds	r6, r7, #1
 8001f34:	19dd      	adds	r5, r3, r7
 8001f36:	ab98      	add	r3, sp, #608	; 0x260
 8001f38:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001f3c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8001f40:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8001f44:	443c      	add	r4, r7
 8001f46:	42b4      	cmp	r4, r6
 8001f48:	da04      	bge.n	8001f54 <__kernel_rem_pio2+0x388>
 8001f4a:	4627      	mov	r7, r4
 8001f4c:	e6b1      	b.n	8001cb2 <__kernel_rem_pio2+0xe6>
 8001f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f50:	2401      	movs	r4, #1
 8001f52:	e7e7      	b.n	8001f24 <__kernel_rem_pio2+0x358>
 8001f54:	f105 0308 	add.w	r3, r5, #8
 8001f58:	9309      	str	r3, [sp, #36]	; 0x24
 8001f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f5c:	2700      	movs	r7, #0
 8001f5e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8001f62:	f7fe fa57 	bl	8000414 <__aeabi_i2d>
 8001f66:	f04f 0800 	mov.w	r8, #0
 8001f6a:	f04f 0900 	mov.w	r9, #0
 8001f6e:	9b08      	ldr	r3, [sp, #32]
 8001f70:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8001f74:	3b08      	subs	r3, #8
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	f105 0310 	add.w	r3, r5, #16
 8001f7c:	9305      	str	r3, [sp, #20]
 8001f7e:	9b06      	ldr	r3, [sp, #24]
 8001f80:	429f      	cmp	r7, r3
 8001f82:	dd04      	ble.n	8001f8e <__kernel_rem_pio2+0x3c2>
 8001f84:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8001f88:	3601      	adds	r6, #1
 8001f8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001f8c:	e7db      	b.n	8001f46 <__kernel_rem_pio2+0x37a>
 8001f8e:	9905      	ldr	r1, [sp, #20]
 8001f90:	9d00      	ldr	r5, [sp, #0]
 8001f92:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8001f96:	9105      	str	r1, [sp, #20]
 8001f98:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8001f9c:	9500      	str	r5, [sp, #0]
 8001f9e:	f7fe faa3 	bl	80004e8 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	4649      	mov	r1, r9
 8001faa:	f7fe f8e7 	bl	800017c <__adddf3>
 8001fae:	3701      	adds	r7, #1
 8001fb0:	4680      	mov	r8, r0
 8001fb2:	4689      	mov	r9, r1
 8001fb4:	e7e3      	b.n	8001f7e <__kernel_rem_pio2+0x3b2>
 8001fb6:	3c01      	subs	r4, #1
 8001fb8:	e745      	b.n	8001e46 <__kernel_rem_pio2+0x27a>
 8001fba:	f1ca 0200 	rsb	r2, sl, #0
 8001fbe:	4640      	mov	r0, r8
 8001fc0:	4649      	mov	r1, r9
 8001fc2:	f000 fa8d 	bl	80024e0 <scalbn>
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4ba3      	ldr	r3, [pc, #652]	; (8002258 <__kernel_rem_pio2+0x68c>)
 8001fca:	4604      	mov	r4, r0
 8001fcc:	460d      	mov	r5, r1
 8001fce:	f7fe fd11 	bl	80009f4 <__aeabi_dcmpge>
 8001fd2:	b1f8      	cbz	r0, 8002014 <__kernel_rem_pio2+0x448>
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	4ba1      	ldr	r3, [pc, #644]	; (800225c <__kernel_rem_pio2+0x690>)
 8001fd8:	4620      	mov	r0, r4
 8001fda:	4629      	mov	r1, r5
 8001fdc:	f7fe fa84 	bl	80004e8 <__aeabi_dmul>
 8001fe0:	f7fe fd1c 	bl	8000a1c <__aeabi_d2iz>
 8001fe4:	4606      	mov	r6, r0
 8001fe6:	f7fe fa15 	bl	8000414 <__aeabi_i2d>
 8001fea:	2200      	movs	r2, #0
 8001fec:	4b9a      	ldr	r3, [pc, #616]	; (8002258 <__kernel_rem_pio2+0x68c>)
 8001fee:	f7fe fa7b 	bl	80004e8 <__aeabi_dmul>
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7fe f8bd 	bl	8000178 <__aeabi_dsub>
 8001ffe:	f7fe fd0d 	bl	8000a1c <__aeabi_d2iz>
 8002002:	1c7c      	adds	r4, r7, #1
 8002004:	ab0c      	add	r3, sp, #48	; 0x30
 8002006:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800200a:	f10a 0a18 	add.w	sl, sl, #24
 800200e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8002012:	e720      	b.n	8001e56 <__kernel_rem_pio2+0x28a>
 8002014:	4620      	mov	r0, r4
 8002016:	4629      	mov	r1, r5
 8002018:	f7fe fd00 	bl	8000a1c <__aeabi_d2iz>
 800201c:	ab0c      	add	r3, sp, #48	; 0x30
 800201e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8002022:	463c      	mov	r4, r7
 8002024:	e717      	b.n	8001e56 <__kernel_rem_pio2+0x28a>
 8002026:	ab0c      	add	r3, sp, #48	; 0x30
 8002028:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800202c:	f7fe f9f2 	bl	8000414 <__aeabi_i2d>
 8002030:	4632      	mov	r2, r6
 8002032:	463b      	mov	r3, r7
 8002034:	f7fe fa58 	bl	80004e8 <__aeabi_dmul>
 8002038:	4652      	mov	r2, sl
 800203a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800203e:	465b      	mov	r3, fp
 8002040:	4630      	mov	r0, r6
 8002042:	4639      	mov	r1, r7
 8002044:	f7fe fa50 	bl	80004e8 <__aeabi_dmul>
 8002048:	3d01      	subs	r5, #1
 800204a:	4606      	mov	r6, r0
 800204c:	460f      	mov	r7, r1
 800204e:	e715      	b.n	8001e7c <__kernel_rem_pio2+0x2b0>
 8002050:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8002054:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8002058:	f7fe fa46 	bl	80004e8 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4650      	mov	r0, sl
 8002062:	4659      	mov	r1, fp
 8002064:	f7fe f88a 	bl	800017c <__adddf3>
 8002068:	4682      	mov	sl, r0
 800206a:	468b      	mov	fp, r1
 800206c:	3701      	adds	r7, #1
 800206e:	9b02      	ldr	r3, [sp, #8]
 8002070:	429f      	cmp	r7, r3
 8002072:	dc01      	bgt.n	8002078 <__kernel_rem_pio2+0x4ac>
 8002074:	42bd      	cmp	r5, r7
 8002076:	daeb      	bge.n	8002050 <__kernel_rem_pio2+0x484>
 8002078:	ab48      	add	r3, sp, #288	; 0x120
 800207a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800207e:	e9c3 ab00 	strd	sl, fp, [r3]
 8002082:	3501      	adds	r5, #1
 8002084:	e702      	b.n	8001e8c <__kernel_rem_pio2+0x2c0>
 8002086:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8002088:	2b03      	cmp	r3, #3
 800208a:	d86c      	bhi.n	8002166 <__kernel_rem_pio2+0x59a>
 800208c:	e8df f003 	tbb	[pc, r3]
 8002090:	022f2f59 	.word	0x022f2f59
 8002094:	9a06      	ldr	r2, [sp, #24]
 8002096:	ab48      	add	r3, sp, #288	; 0x120
 8002098:	189d      	adds	r5, r3, r2
 800209a:	46aa      	mov	sl, r5
 800209c:	46a3      	mov	fp, r4
 800209e:	f1bb 0f00 	cmp.w	fp, #0
 80020a2:	f300 8087 	bgt.w	80021b4 <__kernel_rem_pio2+0x5e8>
 80020a6:	46a2      	mov	sl, r4
 80020a8:	f1ba 0f01 	cmp.w	sl, #1
 80020ac:	f300 809f 	bgt.w	80021ee <__kernel_rem_pio2+0x622>
 80020b0:	2700      	movs	r7, #0
 80020b2:	463e      	mov	r6, r7
 80020b4:	9d06      	ldr	r5, [sp, #24]
 80020b6:	ab48      	add	r3, sp, #288	; 0x120
 80020b8:	3508      	adds	r5, #8
 80020ba:	441d      	add	r5, r3
 80020bc:	2c01      	cmp	r4, #1
 80020be:	f300 80b3 	bgt.w	8002228 <__kernel_rem_pio2+0x65c>
 80020c2:	9b00      	ldr	r3, [sp, #0]
 80020c4:	9d48      	ldr	r5, [sp, #288]	; 0x120
 80020c6:	9849      	ldr	r0, [sp, #292]	; 0x124
 80020c8:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 80020ca:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 80b5 	bne.w	800223c <__kernel_rem_pio2+0x670>
 80020d2:	4603      	mov	r3, r0
 80020d4:	462a      	mov	r2, r5
 80020d6:	9804      	ldr	r0, [sp, #16]
 80020d8:	e9c0 2300 	strd	r2, r3, [r0]
 80020dc:	4622      	mov	r2, r4
 80020de:	460b      	mov	r3, r1
 80020e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80020e4:	463a      	mov	r2, r7
 80020e6:	4633      	mov	r3, r6
 80020e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80020ec:	e03b      	b.n	8002166 <__kernel_rem_pio2+0x59a>
 80020ee:	f04f 0c00 	mov.w	ip, #0
 80020f2:	4626      	mov	r6, r4
 80020f4:	4667      	mov	r7, ip
 80020f6:	9d06      	ldr	r5, [sp, #24]
 80020f8:	ab48      	add	r3, sp, #288	; 0x120
 80020fa:	3508      	adds	r5, #8
 80020fc:	441d      	add	r5, r3
 80020fe:	2e00      	cmp	r6, #0
 8002100:	da42      	bge.n	8002188 <__kernel_rem_pio2+0x5bc>
 8002102:	9b00      	ldr	r3, [sp, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d049      	beq.n	800219c <__kernel_rem_pio2+0x5d0>
 8002108:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800210c:	4662      	mov	r2, ip
 800210e:	460b      	mov	r3, r1
 8002110:	9904      	ldr	r1, [sp, #16]
 8002112:	2601      	movs	r6, #1
 8002114:	e9c1 2300 	strd	r2, r3, [r1]
 8002118:	a948      	add	r1, sp, #288	; 0x120
 800211a:	463b      	mov	r3, r7
 800211c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002120:	f7fe f82a 	bl	8000178 <__aeabi_dsub>
 8002124:	4684      	mov	ip, r0
 8002126:	460f      	mov	r7, r1
 8002128:	ad48      	add	r5, sp, #288	; 0x120
 800212a:	42b4      	cmp	r4, r6
 800212c:	da38      	bge.n	80021a0 <__kernel_rem_pio2+0x5d4>
 800212e:	9b00      	ldr	r3, [sp, #0]
 8002130:	b10b      	cbz	r3, 8002136 <__kernel_rem_pio2+0x56a>
 8002132:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8002136:	4662      	mov	r2, ip
 8002138:	463b      	mov	r3, r7
 800213a:	9904      	ldr	r1, [sp, #16]
 800213c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002140:	e011      	b.n	8002166 <__kernel_rem_pio2+0x59a>
 8002142:	2700      	movs	r7, #0
 8002144:	463d      	mov	r5, r7
 8002146:	9b06      	ldr	r3, [sp, #24]
 8002148:	aa98      	add	r2, sp, #608	; 0x260
 800214a:	4413      	add	r3, r2
 800214c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8002150:	2c00      	cmp	r4, #0
 8002152:	da0f      	bge.n	8002174 <__kernel_rem_pio2+0x5a8>
 8002154:	9b00      	ldr	r3, [sp, #0]
 8002156:	b10b      	cbz	r3, 800215c <__kernel_rem_pio2+0x590>
 8002158:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800215c:	463a      	mov	r2, r7
 800215e:	462b      	mov	r3, r5
 8002160:	9904      	ldr	r1, [sp, #16]
 8002162:	e9c1 2300 	strd	r2, r3, [r1]
 8002166:	9b05      	ldr	r3, [sp, #20]
 8002168:	f003 0007 	and.w	r0, r3, #7
 800216c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8002170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002174:	4638      	mov	r0, r7
 8002176:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800217a:	4629      	mov	r1, r5
 800217c:	f7fd fffe 	bl	800017c <__adddf3>
 8002180:	3c01      	subs	r4, #1
 8002182:	4607      	mov	r7, r0
 8002184:	460d      	mov	r5, r1
 8002186:	e7e3      	b.n	8002150 <__kernel_rem_pio2+0x584>
 8002188:	4660      	mov	r0, ip
 800218a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800218e:	4639      	mov	r1, r7
 8002190:	f7fd fff4 	bl	800017c <__adddf3>
 8002194:	3e01      	subs	r6, #1
 8002196:	4684      	mov	ip, r0
 8002198:	460f      	mov	r7, r1
 800219a:	e7b0      	b.n	80020fe <__kernel_rem_pio2+0x532>
 800219c:	4639      	mov	r1, r7
 800219e:	e7b5      	b.n	800210c <__kernel_rem_pio2+0x540>
 80021a0:	4660      	mov	r0, ip
 80021a2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80021a6:	4639      	mov	r1, r7
 80021a8:	f7fd ffe8 	bl	800017c <__adddf3>
 80021ac:	3601      	adds	r6, #1
 80021ae:	4684      	mov	ip, r0
 80021b0:	460f      	mov	r7, r1
 80021b2:	e7ba      	b.n	800212a <__kernel_rem_pio2+0x55e>
 80021b4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 80021b8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80021bc:	4640      	mov	r0, r8
 80021be:	4649      	mov	r1, r9
 80021c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021c4:	f7fd ffda 	bl	800017c <__adddf3>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4606      	mov	r6, r0
 80021ce:	460f      	mov	r7, r1
 80021d0:	4640      	mov	r0, r8
 80021d2:	4649      	mov	r1, r9
 80021d4:	f7fd ffd0 	bl	8000178 <__aeabi_dsub>
 80021d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80021dc:	f7fd ffce 	bl	800017c <__adddf3>
 80021e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80021e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80021e8:	e9ca 6700 	strd	r6, r7, [sl]
 80021ec:	e757      	b.n	800209e <__kernel_rem_pio2+0x4d2>
 80021ee:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 80021f2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80021f6:	4630      	mov	r0, r6
 80021f8:	4639      	mov	r1, r7
 80021fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021fe:	f7fd ffbd 	bl	800017c <__adddf3>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4680      	mov	r8, r0
 8002208:	4689      	mov	r9, r1
 800220a:	4630      	mov	r0, r6
 800220c:	4639      	mov	r1, r7
 800220e:	f7fd ffb3 	bl	8000178 <__aeabi_dsub>
 8002212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002216:	f7fd ffb1 	bl	800017c <__adddf3>
 800221a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800221e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002222:	e9c5 8900 	strd	r8, r9, [r5]
 8002226:	e73f      	b.n	80020a8 <__kernel_rem_pio2+0x4dc>
 8002228:	4638      	mov	r0, r7
 800222a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800222e:	4631      	mov	r1, r6
 8002230:	f7fd ffa4 	bl	800017c <__adddf3>
 8002234:	3c01      	subs	r4, #1
 8002236:	4607      	mov	r7, r0
 8002238:	460e      	mov	r6, r1
 800223a:	e73f      	b.n	80020bc <__kernel_rem_pio2+0x4f0>
 800223c:	9b04      	ldr	r3, [sp, #16]
 800223e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002242:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002246:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800224a:	601d      	str	r5, [r3, #0]
 800224c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8002250:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8002254:	615e      	str	r6, [r3, #20]
 8002256:	e786      	b.n	8002166 <__kernel_rem_pio2+0x59a>
 8002258:	41700000 	.word	0x41700000
 800225c:	3e700000 	.word	0x3e700000

08002260 <__kernel_sin>:
 8002260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	e9cd 2300 	strd	r2, r3, [sp]
 800226a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800226e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8002272:	4682      	mov	sl, r0
 8002274:	460c      	mov	r4, r1
 8002276:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002278:	da03      	bge.n	8002282 <__kernel_sin+0x22>
 800227a:	f7fe fbcf 	bl	8000a1c <__aeabi_d2iz>
 800227e:	2800      	cmp	r0, #0
 8002280:	d050      	beq.n	8002324 <__kernel_sin+0xc4>
 8002282:	4652      	mov	r2, sl
 8002284:	4623      	mov	r3, r4
 8002286:	4650      	mov	r0, sl
 8002288:	4621      	mov	r1, r4
 800228a:	f7fe f92d 	bl	80004e8 <__aeabi_dmul>
 800228e:	4606      	mov	r6, r0
 8002290:	460f      	mov	r7, r1
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4650      	mov	r0, sl
 8002298:	4621      	mov	r1, r4
 800229a:	f7fe f925 	bl	80004e8 <__aeabi_dmul>
 800229e:	a33e      	add	r3, pc, #248	; (adr r3, 8002398 <__kernel_sin+0x138>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	4680      	mov	r8, r0
 80022a6:	4689      	mov	r9, r1
 80022a8:	4630      	mov	r0, r6
 80022aa:	4639      	mov	r1, r7
 80022ac:	f7fe f91c 	bl	80004e8 <__aeabi_dmul>
 80022b0:	a33b      	add	r3, pc, #236	; (adr r3, 80023a0 <__kernel_sin+0x140>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	f7fd ff5f 	bl	8000178 <__aeabi_dsub>
 80022ba:	4632      	mov	r2, r6
 80022bc:	463b      	mov	r3, r7
 80022be:	f7fe f913 	bl	80004e8 <__aeabi_dmul>
 80022c2:	a339      	add	r3, pc, #228	; (adr r3, 80023a8 <__kernel_sin+0x148>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fd ff58 	bl	800017c <__adddf3>
 80022cc:	4632      	mov	r2, r6
 80022ce:	463b      	mov	r3, r7
 80022d0:	f7fe f90a 	bl	80004e8 <__aeabi_dmul>
 80022d4:	a336      	add	r3, pc, #216	; (adr r3, 80023b0 <__kernel_sin+0x150>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fd ff4d 	bl	8000178 <__aeabi_dsub>
 80022de:	4632      	mov	r2, r6
 80022e0:	463b      	mov	r3, r7
 80022e2:	f7fe f901 	bl	80004e8 <__aeabi_dmul>
 80022e6:	a334      	add	r3, pc, #208	; (adr r3, 80023b8 <__kernel_sin+0x158>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fd ff46 	bl	800017c <__adddf3>
 80022f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80022f4:	b9dd      	cbnz	r5, 800232e <__kernel_sin+0xce>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4630      	mov	r0, r6
 80022fc:	4639      	mov	r1, r7
 80022fe:	f7fe f8f3 	bl	80004e8 <__aeabi_dmul>
 8002302:	a32f      	add	r3, pc, #188	; (adr r3, 80023c0 <__kernel_sin+0x160>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fd ff36 	bl	8000178 <__aeabi_dsub>
 800230c:	4642      	mov	r2, r8
 800230e:	464b      	mov	r3, r9
 8002310:	f7fe f8ea 	bl	80004e8 <__aeabi_dmul>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4650      	mov	r0, sl
 800231a:	4621      	mov	r1, r4
 800231c:	f7fd ff2e 	bl	800017c <__adddf3>
 8002320:	4682      	mov	sl, r0
 8002322:	460c      	mov	r4, r1
 8002324:	4650      	mov	r0, sl
 8002326:	4621      	mov	r1, r4
 8002328:	b006      	add	sp, #24
 800232a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800232e:	2200      	movs	r2, #0
 8002330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <__kernel_sin+0x168>)
 8002336:	f7fe f8d7 	bl	80004e8 <__aeabi_dmul>
 800233a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800233e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002342:	4640      	mov	r0, r8
 8002344:	4649      	mov	r1, r9
 8002346:	f7fe f8cf 	bl	80004e8 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002352:	f7fd ff11 	bl	8000178 <__aeabi_dsub>
 8002356:	4632      	mov	r2, r6
 8002358:	463b      	mov	r3, r7
 800235a:	f7fe f8c5 	bl	80004e8 <__aeabi_dmul>
 800235e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002362:	f7fd ff09 	bl	8000178 <__aeabi_dsub>
 8002366:	a316      	add	r3, pc, #88	; (adr r3, 80023c0 <__kernel_sin+0x160>)
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	4606      	mov	r6, r0
 800236e:	460f      	mov	r7, r1
 8002370:	4640      	mov	r0, r8
 8002372:	4649      	mov	r1, r9
 8002374:	f7fe f8b8 	bl	80004e8 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4630      	mov	r0, r6
 800237e:	4639      	mov	r1, r7
 8002380:	f7fd fefc 	bl	800017c <__adddf3>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4650      	mov	r0, sl
 800238a:	4621      	mov	r1, r4
 800238c:	f7fd fef4 	bl	8000178 <__aeabi_dsub>
 8002390:	e7c6      	b.n	8002320 <__kernel_sin+0xc0>
 8002392:	bf00      	nop
 8002394:	f3af 8000 	nop.w
 8002398:	5acfd57c 	.word	0x5acfd57c
 800239c:	3de5d93a 	.word	0x3de5d93a
 80023a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80023a4:	3e5ae5e6 	.word	0x3e5ae5e6
 80023a8:	57b1fe7d 	.word	0x57b1fe7d
 80023ac:	3ec71de3 	.word	0x3ec71de3
 80023b0:	19c161d5 	.word	0x19c161d5
 80023b4:	3f2a01a0 	.word	0x3f2a01a0
 80023b8:	1110f8a6 	.word	0x1110f8a6
 80023bc:	3f811111 	.word	0x3f811111
 80023c0:	55555549 	.word	0x55555549
 80023c4:	3fc55555 	.word	0x3fc55555
 80023c8:	3fe00000 	.word	0x3fe00000

080023cc <fabs>:
 80023cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80023d0:	4619      	mov	r1, r3
 80023d2:	4770      	bx	lr
 80023d4:	0000      	movs	r0, r0
	...

080023d8 <floor>:
 80023d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023dc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80023e0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80023e4:	2e13      	cmp	r6, #19
 80023e6:	4607      	mov	r7, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	460c      	mov	r4, r1
 80023ec:	4605      	mov	r5, r0
 80023ee:	dc35      	bgt.n	800245c <floor+0x84>
 80023f0:	2e00      	cmp	r6, #0
 80023f2:	da16      	bge.n	8002422 <floor+0x4a>
 80023f4:	a336      	add	r3, pc, #216	; (adr r3, 80024d0 <floor+0xf8>)
 80023f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fa:	f7fd febf 	bl	800017c <__adddf3>
 80023fe:	2200      	movs	r2, #0
 8002400:	2300      	movs	r3, #0
 8002402:	f7fe fb01 	bl	8000a08 <__aeabi_dcmpgt>
 8002406:	b148      	cbz	r0, 800241c <floor+0x44>
 8002408:	2c00      	cmp	r4, #0
 800240a:	da5b      	bge.n	80024c4 <floor+0xec>
 800240c:	2500      	movs	r5, #0
 800240e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002412:	4a31      	ldr	r2, [pc, #196]	; (80024d8 <floor+0x100>)
 8002414:	433b      	orrs	r3, r7
 8002416:	42ab      	cmp	r3, r5
 8002418:	bf18      	it	ne
 800241a:	4614      	movne	r4, r2
 800241c:	4623      	mov	r3, r4
 800241e:	462f      	mov	r7, r5
 8002420:	e026      	b.n	8002470 <floor+0x98>
 8002422:	4a2e      	ldr	r2, [pc, #184]	; (80024dc <floor+0x104>)
 8002424:	fa42 f806 	asr.w	r8, r2, r6
 8002428:	ea01 0208 	and.w	r2, r1, r8
 800242c:	4302      	orrs	r2, r0
 800242e:	d01f      	beq.n	8002470 <floor+0x98>
 8002430:	a327      	add	r3, pc, #156	; (adr r3, 80024d0 <floor+0xf8>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fd fea1 	bl	800017c <__adddf3>
 800243a:	2200      	movs	r2, #0
 800243c:	2300      	movs	r3, #0
 800243e:	f7fe fae3 	bl	8000a08 <__aeabi_dcmpgt>
 8002442:	2800      	cmp	r0, #0
 8002444:	d0ea      	beq.n	800241c <floor+0x44>
 8002446:	2c00      	cmp	r4, #0
 8002448:	bfbe      	ittt	lt
 800244a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800244e:	fa43 f606 	asrlt.w	r6, r3, r6
 8002452:	19a4      	addlt	r4, r4, r6
 8002454:	ea24 0408 	bic.w	r4, r4, r8
 8002458:	2500      	movs	r5, #0
 800245a:	e7df      	b.n	800241c <floor+0x44>
 800245c:	2e33      	cmp	r6, #51	; 0x33
 800245e:	dd0b      	ble.n	8002478 <floor+0xa0>
 8002460:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002464:	d104      	bne.n	8002470 <floor+0x98>
 8002466:	4602      	mov	r2, r0
 8002468:	f7fd fe88 	bl	800017c <__adddf3>
 800246c:	4607      	mov	r7, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4638      	mov	r0, r7
 8002472:	4619      	mov	r1, r3
 8002474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8002480:	fa22 f808 	lsr.w	r8, r2, r8
 8002484:	ea18 0f00 	tst.w	r8, r0
 8002488:	d0f2      	beq.n	8002470 <floor+0x98>
 800248a:	a311      	add	r3, pc, #68	; (adr r3, 80024d0 <floor+0xf8>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fd fe74 	bl	800017c <__adddf3>
 8002494:	2200      	movs	r2, #0
 8002496:	2300      	movs	r3, #0
 8002498:	f7fe fab6 	bl	8000a08 <__aeabi_dcmpgt>
 800249c:	2800      	cmp	r0, #0
 800249e:	d0bd      	beq.n	800241c <floor+0x44>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	da02      	bge.n	80024aa <floor+0xd2>
 80024a4:	2e14      	cmp	r6, #20
 80024a6:	d103      	bne.n	80024b0 <floor+0xd8>
 80024a8:	3401      	adds	r4, #1
 80024aa:	ea25 0508 	bic.w	r5, r5, r8
 80024ae:	e7b5      	b.n	800241c <floor+0x44>
 80024b0:	2301      	movs	r3, #1
 80024b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80024b6:	fa03 f606 	lsl.w	r6, r3, r6
 80024ba:	4435      	add	r5, r6
 80024bc:	42bd      	cmp	r5, r7
 80024be:	bf38      	it	cc
 80024c0:	18e4      	addcc	r4, r4, r3
 80024c2:	e7f2      	b.n	80024aa <floor+0xd2>
 80024c4:	2500      	movs	r5, #0
 80024c6:	462c      	mov	r4, r5
 80024c8:	e7a8      	b.n	800241c <floor+0x44>
 80024ca:	bf00      	nop
 80024cc:	f3af 8000 	nop.w
 80024d0:	8800759c 	.word	0x8800759c
 80024d4:	7e37e43c 	.word	0x7e37e43c
 80024d8:	bff00000 	.word	0xbff00000
 80024dc:	000fffff 	.word	0x000fffff

080024e0 <scalbn>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	4616      	mov	r6, r2
 80024e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80024e8:	4604      	mov	r4, r0
 80024ea:	460d      	mov	r5, r1
 80024ec:	460b      	mov	r3, r1
 80024ee:	b982      	cbnz	r2, 8002512 <scalbn+0x32>
 80024f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80024f4:	4303      	orrs	r3, r0
 80024f6:	d034      	beq.n	8002562 <scalbn+0x82>
 80024f8:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <scalbn+0xd0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	f7fd fff4 	bl	80004e8 <__aeabi_dmul>
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <scalbn+0xd4>)
 8002502:	4604      	mov	r4, r0
 8002504:	429e      	cmp	r6, r3
 8002506:	460d      	mov	r5, r1
 8002508:	da0d      	bge.n	8002526 <scalbn+0x46>
 800250a:	a325      	add	r3, pc, #148	; (adr r3, 80025a0 <scalbn+0xc0>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	e01c      	b.n	800254c <scalbn+0x6c>
 8002512:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8002516:	42ba      	cmp	r2, r7
 8002518:	d109      	bne.n	800252e <scalbn+0x4e>
 800251a:	4602      	mov	r2, r0
 800251c:	f7fd fe2e 	bl	800017c <__adddf3>
 8002520:	4604      	mov	r4, r0
 8002522:	460d      	mov	r5, r1
 8002524:	e01d      	b.n	8002562 <scalbn+0x82>
 8002526:	460b      	mov	r3, r1
 8002528:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800252c:	3a36      	subs	r2, #54	; 0x36
 800252e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8002532:	4432      	add	r2, r6
 8002534:	428a      	cmp	r2, r1
 8002536:	dd0c      	ble.n	8002552 <scalbn+0x72>
 8002538:	4622      	mov	r2, r4
 800253a:	462b      	mov	r3, r5
 800253c:	a11a      	add	r1, pc, #104	; (adr r1, 80025a8 <scalbn+0xc8>)
 800253e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002542:	f000 f83b 	bl	80025bc <copysign>
 8002546:	a318      	add	r3, pc, #96	; (adr r3, 80025a8 <scalbn+0xc8>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fd ffcc 	bl	80004e8 <__aeabi_dmul>
 8002550:	e7e6      	b.n	8002520 <scalbn+0x40>
 8002552:	2a00      	cmp	r2, #0
 8002554:	dd08      	ble.n	8002568 <scalbn+0x88>
 8002556:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800255a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800255e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002562:	4620      	mov	r0, r4
 8002564:	4629      	mov	r1, r5
 8002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002568:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800256c:	da0b      	bge.n	8002586 <scalbn+0xa6>
 800256e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002572:	429e      	cmp	r6, r3
 8002574:	4622      	mov	r2, r4
 8002576:	462b      	mov	r3, r5
 8002578:	dce0      	bgt.n	800253c <scalbn+0x5c>
 800257a:	a109      	add	r1, pc, #36	; (adr r1, 80025a0 <scalbn+0xc0>)
 800257c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002580:	f000 f81c 	bl	80025bc <copysign>
 8002584:	e7c1      	b.n	800250a <scalbn+0x2a>
 8002586:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800258a:	3236      	adds	r2, #54	; 0x36
 800258c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002590:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002594:	4620      	mov	r0, r4
 8002596:	4629      	mov	r1, r5
 8002598:	2200      	movs	r2, #0
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <scalbn+0xd8>)
 800259c:	e7d6      	b.n	800254c <scalbn+0x6c>
 800259e:	bf00      	nop
 80025a0:	c2f8f359 	.word	0xc2f8f359
 80025a4:	01a56e1f 	.word	0x01a56e1f
 80025a8:	8800759c 	.word	0x8800759c
 80025ac:	7e37e43c 	.word	0x7e37e43c
 80025b0:	43500000 	.word	0x43500000
 80025b4:	ffff3cb0 	.word	0xffff3cb0
 80025b8:	3c900000 	.word	0x3c900000

080025bc <copysign>:
 80025bc:	b530      	push	{r4, r5, lr}
 80025be:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80025c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025c6:	ea42 0503 	orr.w	r5, r2, r3
 80025ca:	4629      	mov	r1, r5
 80025cc:	bd30      	pop	{r4, r5, pc}
	...

080025d0 <_init>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	bf00      	nop
 80025d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d6:	bc08      	pop	{r3}
 80025d8:	469e      	mov	lr, r3
 80025da:	4770      	bx	lr

080025dc <_fini>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	bf00      	nop
 80025e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e2:	bc08      	pop	{r3}
 80025e4:	469e      	mov	lr, r3
 80025e6:	4770      	bx	lr
