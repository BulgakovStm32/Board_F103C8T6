
f103c8t6_MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000350c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b40  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800417c  0800417c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800417c  0800417c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800417c  0800417c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  2000000c  08004190  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  20000928  08004190  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c376  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021fc  00000000  00000000  0002c3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000578  00000000  00000000  0002e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000029c1  00000000  00000000  0002eb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000934c  00000000  00000000  000314e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0005a651  00000000  00000000  0003a82d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00094e7e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000468  00000000  00000000  00094f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000016fc  00000000  00000000  00095368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08003624 	.word	0x08003624

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08003624 	.word	0x08003624

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000aa8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aac:	d1ed      	bne.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c5a:	2afd      	cmp	r2, #253	; 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	; 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	; 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	; 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <__gesf2>:
 8000ea8:	f04f 3cff 	mov.w	ip, #4294967295
 8000eac:	e006      	b.n	8000ebc <__cmpsf2+0x4>
 8000eae:	bf00      	nop

08000eb0 <__lesf2>:
 8000eb0:	f04f 0c01 	mov.w	ip, #1
 8000eb4:	e002      	b.n	8000ebc <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__cmpsf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ecc:	bf18      	it	ne
 8000ece:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed2:	d011      	beq.n	8000ef8 <__cmpsf2+0x40>
 8000ed4:	b001      	add	sp, #4
 8000ed6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eda:	bf18      	it	ne
 8000edc:	ea90 0f01 	teqne	r0, r1
 8000ee0:	bf58      	it	pl
 8000ee2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ee6:	bf88      	it	hi
 8000ee8:	17c8      	asrhi	r0, r1, #31
 8000eea:	bf38      	it	cc
 8000eec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef0:	bf18      	it	ne
 8000ef2:	f040 0001 	orrne.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	d102      	bne.n	8000f04 <__cmpsf2+0x4c>
 8000efe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f02:	d105      	bne.n	8000f10 <__cmpsf2+0x58>
 8000f04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f08:	d1e4      	bne.n	8000ed4 <__cmpsf2+0x1c>
 8000f0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f0e:	d0e1      	beq.n	8000ed4 <__cmpsf2+0x1c>
 8000f10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__aeabi_cfrcmple>:
 8000f18:	4684      	mov	ip, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4661      	mov	r1, ip
 8000f1e:	e7ff      	b.n	8000f20 <__aeabi_cfcmpeq>

08000f20 <__aeabi_cfcmpeq>:
 8000f20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f22:	f7ff ffc9 	bl	8000eb8 <__cmpsf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	bf48      	it	mi
 8000f2a:	f110 0f00 	cmnmi.w	r0, #0
 8000f2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f30 <__aeabi_fcmpeq>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff fff4 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f38:	bf0c      	ite	eq
 8000f3a:	2001      	moveq	r0, #1
 8000f3c:	2000      	movne	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmplt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffea 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmple>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffe0 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpge>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffd2 	bl	8000f18 <__aeabi_cfrcmple>
 8000f74:	bf94      	ite	ls
 8000f76:	2001      	movls	r0, #1
 8000f78:	2000      	movhi	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmpgt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffc8 	bl	8000f18 <__aeabi_cfrcmple>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2iz>:
 8000f94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f9c:	d30f      	bcc.n	8000fbe <__aeabi_f2iz+0x2a>
 8000f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d90d      	bls.n	8000fc4 <__aeabi_f2iz+0x30>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb8:	bf18      	it	ne
 8000fba:	4240      	negne	r0, r0
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc8:	d101      	bne.n	8000fce <__aeabi_f2iz+0x3a>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	d105      	bne.n	8000fda <__aeabi_f2iz+0x46>
 8000fce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd2:	bf08      	it	eq
 8000fd4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fd8:	4770      	bx	lr
 8000fda:	f04f 0000 	mov.w	r0, #0
 8000fde:	4770      	bx	lr

08000fe0 <__aeabi_f2uiz>:
 8000fe0:	0042      	lsls	r2, r0, #1
 8000fe2:	d20e      	bcs.n	8001002 <__aeabi_f2uiz+0x22>
 8000fe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe8:	d30b      	bcc.n	8001002 <__aeabi_f2uiz+0x22>
 8000fea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff2:	d409      	bmi.n	8001008 <__aeabi_f2uiz+0x28>
 8000ff4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffc:	fa23 f002 	lsr.w	r0, r3, r2
 8001000:	4770      	bx	lr
 8001002:	f04f 0000 	mov.w	r0, #0
 8001006:	4770      	bx	lr
 8001008:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800100c:	d101      	bne.n	8001012 <__aeabi_f2uiz+0x32>
 800100e:	0242      	lsls	r2, r0, #9
 8001010:	d102      	bne.n	8001018 <__aeabi_f2uiz+0x38>
 8001012:	f04f 30ff 	mov.w	r0, #4294967295
 8001016:	4770      	bx	lr
 8001018:	f04f 0000 	mov.w	r0, #0
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Blink_Loop>:

//-----------------------------------------------------------------------------
static volatile uint16_t BlinkReg = 0;
//-----------------------------------------------------------------------------
//Процесс для мигания светодиодами.
void Blink_Loop(void){
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	
	static uint16_t blinkCount = 0;
  //--------------------
	++blinkCount;
 8001024:	4b5c      	ldr	r3, [pc, #368]	; (8001198 <Blink_Loop+0x178>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <Blink_Loop+0x178>)
 800102e:	801a      	strh	r2, [r3, #0]
	BlinkReg ^= (1 << INTERVAL_1_mS);
 8001030:	4b5a      	ldr	r3, [pc, #360]	; (800119c <Blink_Loop+0x17c>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f083 0301 	eor.w	r3, r3, #1
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b57      	ldr	r3, [pc, #348]	; (800119c <Blink_Loop+0x17c>)
 800103e:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 2)    == 0) BlinkReg ^= (1 << INTERVAL_2_mS);
 8001040:	4b55      	ldr	r3, [pc, #340]	; (8001198 <Blink_Loop+0x178>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	b29b      	uxth	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d107      	bne.n	800105e <Blink_Loop+0x3e>
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <Blink_Loop+0x17c>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	f083 0302 	eor.w	r3, r3, #2
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b50      	ldr	r3, [pc, #320]	; (800119c <Blink_Loop+0x17c>)
 800105c:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 5)    == 0) BlinkReg ^= (1 << INTERVAL_5_mS);
 800105e:	4b4e      	ldr	r3, [pc, #312]	; (8001198 <Blink_Loop+0x178>)
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	4b4f      	ldr	r3, [pc, #316]	; (80011a0 <Blink_Loop+0x180>)
 8001064:	fba3 1302 	umull	r1, r3, r3, r2
 8001068:	0899      	lsrs	r1, r3, #2
 800106a:	460b      	mov	r3, r1
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d107      	bne.n	8001088 <Blink_Loop+0x68>
 8001078:	4b48      	ldr	r3, [pc, #288]	; (800119c <Blink_Loop+0x17c>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	f083 0304 	eor.w	r3, r3, #4
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b45      	ldr	r3, [pc, #276]	; (800119c <Blink_Loop+0x17c>)
 8001086:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 10)   == 0) BlinkReg ^= (1 << INTERVAL_10_mS);
 8001088:	4b43      	ldr	r3, [pc, #268]	; (8001198 <Blink_Loop+0x178>)
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	4b44      	ldr	r3, [pc, #272]	; (80011a0 <Blink_Loop+0x180>)
 800108e:	fba3 1302 	umull	r1, r3, r3, r2
 8001092:	08d9      	lsrs	r1, r3, #3
 8001094:	460b      	mov	r3, r1
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d107      	bne.n	80010b4 <Blink_Loop+0x94>
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <Blink_Loop+0x17c>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f083 0308 	eor.w	r3, r3, #8
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b3a      	ldr	r3, [pc, #232]	; (800119c <Blink_Loop+0x17c>)
 80010b2:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 50)   == 0) BlinkReg ^= (1 << INTERVAL_50_mS);
 80010b4:	4b38      	ldr	r3, [pc, #224]	; (8001198 <Blink_Loop+0x178>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	4a3a      	ldr	r2, [pc, #232]	; (80011a4 <Blink_Loop+0x184>)
 80010ba:	fba2 1203 	umull	r1, r2, r2, r3
 80010be:	0912      	lsrs	r2, r2, #4
 80010c0:	2132      	movs	r1, #50	; 0x32
 80010c2:	fb01 f202 	mul.w	r2, r1, r2
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d107      	bne.n	80010de <Blink_Loop+0xbe>
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <Blink_Loop+0x17c>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f083 0310 	eor.w	r3, r3, #16
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b30      	ldr	r3, [pc, #192]	; (800119c <Blink_Loop+0x17c>)
 80010dc:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 100)  == 0) BlinkReg ^= (1 << INTERVAL_100_mS);
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <Blink_Loop+0x178>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	4a30      	ldr	r2, [pc, #192]	; (80011a4 <Blink_Loop+0x184>)
 80010e4:	fba2 1203 	umull	r1, r2, r2, r3
 80010e8:	0952      	lsrs	r2, r2, #5
 80010ea:	2164      	movs	r1, #100	; 0x64
 80010ec:	fb01 f202 	mul.w	r2, r1, r2
 80010f0:	1a9b      	subs	r3, r3, r2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d107      	bne.n	8001108 <Blink_Loop+0xe8>
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <Blink_Loop+0x17c>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f083 0320 	eor.w	r3, r3, #32
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <Blink_Loop+0x17c>)
 8001106:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 250)  == 0) BlinkReg ^= (1 << INTERVAL_250_mS);	
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <Blink_Loop+0x178>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <Blink_Loop+0x188>)
 800110e:	fba2 1203 	umull	r1, r2, r2, r3
 8001112:	0912      	lsrs	r2, r2, #4
 8001114:	21fa      	movs	r1, #250	; 0xfa
 8001116:	fb01 f202 	mul.w	r2, r1, r2
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	b29b      	uxth	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d107      	bne.n	8001132 <Blink_Loop+0x112>
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <Blink_Loop+0x17c>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800112c:	b29a      	uxth	r2, r3
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <Blink_Loop+0x17c>)
 8001130:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 500)  == 0) BlinkReg ^= (1 << INTERVAL_500_mS);
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <Blink_Loop+0x178>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <Blink_Loop+0x188>)
 8001138:	fba2 1203 	umull	r1, r2, r2, r3
 800113c:	0952      	lsrs	r2, r2, #5
 800113e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001142:	fb01 f202 	mul.w	r2, r1, r2
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	b29b      	uxth	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d107      	bne.n	800115e <Blink_Loop+0x13e>
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <Blink_Loop+0x17c>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <Blink_Loop+0x17c>)
 800115c:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 1000) == 0)
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <Blink_Loop+0x178>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <Blink_Loop+0x188>)
 8001164:	fba2 1203 	umull	r1, r2, r2, r3
 8001168:	0992      	lsrs	r2, r2, #6
 800116a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800116e:	fb01 f202 	mul.w	r2, r1, r2
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	b29b      	uxth	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10a      	bne.n	8001190 <Blink_Loop+0x170>
		{
			BlinkReg  ^= (1 << INTERVAL_1000_mS);
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <Blink_Loop+0x17c>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8001184:	b29a      	uxth	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <Blink_Loop+0x17c>)
 8001188:	801a      	strh	r2, [r3, #0]
			blinkCount = 0;
 800118a:	4b03      	ldr	r3, [pc, #12]	; (8001198 <Blink_Loop+0x178>)
 800118c:	2200      	movs	r2, #0
 800118e:	801a      	strh	r2, [r3, #0]
		}
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	2000002a 	.word	0x2000002a
 800119c:	20000028 	.word	0x20000028
 80011a0:	cccccccd 	.word	0xcccccccd
 80011a4:	51eb851f 	.word	0x51eb851f
 80011a8:	10624dd3 	.word	0x10624dd3

080011ac <Blink>:
//-----------------------------------------------------------------------------
uint16_t Blink(BlinkIntervalEnum_t interval){
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	
	if(BlinkReg & (1 << interval)) return 0xFFFF;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <Blink+0x34>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	fa42 f303 	asr.w	r3, r2, r3
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <Blink+0x26>
 80011cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d0:	e000      	b.n	80011d4 <Blink+0x28>
	else											     return 0;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000028 	.word	0x20000028

080011e4 <msDelay_Loop>:

//*******************************************************************************************
static volatile uint32_t msCounter = 0;
//*******************************************************************************************
//*******************************************************************************************
void msDelay_Loop(void){
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

	msCounter++;
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <msDelay_Loop+0x18>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a03      	ldr	r2, [pc, #12]	; (80011fc <msDelay_Loop+0x18>)
 80011f0:	6013      	str	r3, [r2, #0]
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000002c 	.word	0x2000002c

08001200 <msDelay>:
//**********************************************************
void msDelay(volatile uint32_t del){
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

	if(del == 0) return;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00a      	beq.n	8001224 <msDelay+0x24>
	msCounter = 0;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <msDelay+0x30>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
	while(msCounter < del){__NOP();};
 8001214:	e000      	b.n	8001218 <msDelay+0x18>
 8001216:	bf00      	nop
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <msDelay+0x30>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	d3f9      	bcc.n	8001216 <msDelay+0x16>
 8001222:	e000      	b.n	8001226 <msDelay+0x26>
	if(del == 0) return;
 8001224:	bf00      	nop
}
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2000002c 	.word	0x2000002c

08001234 <Average>:

#include "Filters.h"

//*******************************************************************************************
//*******************************************************************************************
uint16_t Average(uint16_t inValue, uint8_t div){
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	460a      	mov	r2, r1
 800123e:	80fb      	strh	r3, [r7, #6]
 8001240:	4613      	mov	r3, r2
 8001242:	717b      	strb	r3, [r7, #5]

	static uint8_t  avrCount    = 0;
	static uint32_t sum         = 0;
	static uint16_t avrOldValue = 0;
	//-------------------
	if(avrCount < div)
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <Average+0x64>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	797a      	ldrb	r2, [r7, #5]
 800124a:	429a      	cmp	r2, r3
 800124c:	d90e      	bls.n	800126c <Average+0x38>
		{
			avrCount++;
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <Average+0x64>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <Average+0x64>)
 8001258:	701a      	strb	r2, [r3, #0]
			sum += inValue;
 800125a:	88fa      	ldrh	r2, [r7, #6]
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <Average+0x68>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4413      	add	r3, r2
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <Average+0x68>)
 8001264:	6013      	str	r3, [r2, #0]
			avrCount    = 0;
			avrOldValue = sum / div;
			sum         = 0;
			return avrOldValue;
		}
	return avrOldValue;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <Average+0x6c>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	e00f      	b.n	800128c <Average+0x58>
			avrCount    = 0;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <Average+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
			avrOldValue = sum / div;
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <Average+0x68>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	fbb2 f3f3 	udiv	r3, r2, r3
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <Average+0x6c>)
 8001280:	801a      	strh	r2, [r3, #0]
			sum         = 0;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <Average+0x68>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
			return avrOldValue;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <Average+0x6c>)
 800128a:	881b      	ldrh	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000030 	.word	0x20000030
 800129c:	20000034 	.word	0x20000034
 80012a0:	20000038 	.word	0x20000038

080012a4 <ClearTextBuf>:
extern const unsigned char Ascii_Tab_12864[];//Рабочая.
#define TabAscii	       Ascii_Tab_12864   //Рабочая.
//*********************************************************************************************
//*********************************************************************************************
//Очистка текстового буфера.
static void ClearTextBuf(void){
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i<LCD_TEXT_BUFFER_SIZE; i++) lcdTextBuf[i] = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	e006      	b.n	80012be <ClearTextBuf+0x1a>
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <ClearTextBuf+0x2c>)
 80012b4:	2100      	movs	r1, #0
 80012b6:	54d1      	strb	r1, [r2, r3]
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	3301      	adds	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b15      	cmp	r3, #21
 80012c2:	d9f5      	bls.n	80012b0 <ClearTextBuf+0xc>
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000003c 	.word	0x2000003c

080012d4 <Lcd_Update>:
	Lcd_Clear();
	Lcd_Update();
}
//*****************************************************************************
//Вывод буфера на дисплей.
void Lcd_Update(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

//	Lm6063LcdUpdate(LcdCache);
//	Lcd_TIC32_SendData(LcdCache);
	SSD1306_UpdateScreen(lcdVideoBuffer);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <Lcd_Update+0x10>)
 80012da:	f001 fb77 	bl	80029cc <SSD1306_UpdateScreen>
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000054 	.word	0x20000054

080012e8 <Lcd_pVideoBuffer>:
//*****************************************************************************
uint8_t* Lcd_pVideoBuffer(void){
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

	return lcdVideoBuffer;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <Lcd_pVideoBuffer+0x10>)
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000054 	.word	0x20000054

080012fc <Lcd_GotoXYFont>:
  horizon_line2 = (y2-y1-3);
  for(i=horizon_line2;i>horizon_line;i--) Lcd_Line(x1+2,y2-2-i,x2-2,y2-2-i,0);
}
//*****************************************************************************
//Установка курсора в положение Х,У. Диапазон значений Х,У: 1,1 .. 14,8.
void Lcd_GotoXYFont(uint8_t x, uint8_t y){
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	4613      	mov	r3, r2
 800130a:	71bb      	strb	r3, [r7, #6]
  
  if((x > 24) || (y > 8)) return;
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b18      	cmp	r3, #24
 8001310:	d814      	bhi.n	800133c <Lcd_GotoXYFont+0x40>
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	2b08      	cmp	r3, #8
 8001316:	d811      	bhi.n	800133c <Lcd_GotoXYFont+0x40>
  LcdCacheIdx = (uint16_t)((y-1) * 128) + (uint16_t)((x-1) * 6);
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	3b01      	subs	r3, #1
 800131c:	b29b      	uxth	r3, r3
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	b29a      	uxth	r2, r3
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	3b01      	subs	r3, #1
 8001326:	b29b      	uxth	r3, r3
 8001328:	4619      	mov	r1, r3
 800132a:	0049      	lsls	r1, r1, #1
 800132c:	440b      	add	r3, r1
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <Lcd_GotoXYFont+0x4c>)
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	e000      	b.n	800133e <Lcd_GotoXYFont+0x42>
  if((x > 24) || (y > 8)) return;
 800133c:	bf00      	nop
}
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000454 	.word	0x20000454

0800134c <Lcd_Chr>:
//*****************************************************************************
//Displays a character at current cursor location and increment cursor location
void Lcd_Chr(uint16_t ch){
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
  unsigned char i;
  //--------------------
  //Проверка на максимум.
  //if(ch > LCD_CACHE_SIZE) return;
  //--------------------
  for (i=0; i<5; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e013      	b.n	8001384 <Lcd_Chr+0x38>
    {
      //выделяем байт-столбик из символа и грузим в массив - 5 раз
	  lcdVideoBuffer[LcdCacheIdx++] = TabAscii[ch*5+i];
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	441a      	add	r2, r3
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	441a      	add	r2, r3
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <Lcd_Chr+0x5c>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	1c59      	adds	r1, r3, #1
 800136e:	b288      	uxth	r0, r1
 8001370:	490d      	ldr	r1, [pc, #52]	; (80013a8 <Lcd_Chr+0x5c>)
 8001372:	8008      	strh	r0, [r1, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <Lcd_Chr+0x60>)
 8001378:	5c9a      	ldrb	r2, [r3, r2]
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <Lcd_Chr+0x64>)
 800137c:	545a      	strb	r2, [r3, r1]
  for (i=0; i<5; i++)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	3301      	adds	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d9e8      	bls.n	800135c <Lcd_Chr+0x10>
    }
  lcdVideoBuffer[LcdCacheIdx++] = 0x00;	//добавляем пробел между символами
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <Lcd_Chr+0x5c>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	b291      	uxth	r1, r2
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <Lcd_Chr+0x5c>)
 8001394:	8011      	strh	r1, [r2, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <Lcd_Chr+0x64>)
 800139a:	2100      	movs	r1, #0
 800139c:	5499      	strb	r1, [r3, r2]
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000454 	.word	0x20000454
 80013ac:	0800366c 	.word	0x0800366c
 80013b0:	20000054 	.word	0x20000054

080013b4 <Lcd_String>:
//*****************************************************************************
//Печать строки.
void Lcd_String(uint8_t x, uint8_t y){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71bb      	strb	r3, [r7, #6]
  
	unsigned char i;
	//--------------------
	//if (x > 15 || y > 8) return;
	if(x > 22 || y > 8)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b16      	cmp	r3, #22
 80013c8:	d802      	bhi.n	80013d0 <Lcd_String+0x1c>
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d903      	bls.n	80013d8 <Lcd_String+0x24>
		{
		  x = 22;
 80013d0:	2316      	movs	r3, #22
 80013d2:	71fb      	strb	r3, [r7, #7]
		  y = 8;
 80013d4:	2308      	movs	r3, #8
 80013d6:	71bb      	strb	r3, [r7, #6]
		}
	//--------------------
	Lcd_GotoXYFont (x, y);
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff8c 	bl	80012fc <Lcd_GotoXYFont>

	for(i=0; i<(22-x); i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e00e      	b.n	8001408 <Lcd_String+0x54>
		{
		  if(lcdTextBuf[i]) Lcd_Chr(lcdTextBuf[i]);
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	4a0b      	ldr	r2, [pc, #44]	; (800141c <Lcd_String+0x68>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <Lcd_String+0x4e>
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <Lcd_String+0x68>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ffa5 	bl	800134c <Lcd_Chr>
	for(i=0; i<(22-x); i++)
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	3301      	adds	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f1c3 0316 	rsb	r3, r3, #22
 8001410:	429a      	cmp	r2, r3
 8001412:	dbea      	blt.n	80013ea <Lcd_String+0x36>
		}
//	clean_lcd_buf();
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000003c 	.word	0x2000003c

08001420 <Lcd_ChrBold>:
//*****************************************************************************
//Displays a bold character at current cursor location and increment cursor location
void Lcd_ChrBold(int ch){
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  
  unsigned char i;
  unsigned char a = 0, b = 0, c = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	73bb      	strb	r3, [r7, #14]
 800142c:	2300      	movs	r3, #0
 800142e:	737b      	strb	r3, [r7, #13]
 8001430:	2300      	movs	r3, #0
 8001432:	733b      	strb	r3, [r7, #12]
  //--------------------    	
  for(i = 0; i < 5; i++)
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e096      	b.n	8001568 <Lcd_ChrBold+0x148>
    {
      c = TabAscii[(ch*5+i)];//выделяем столбец из символа
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	441a      	add	r2, r3
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	4413      	add	r3, r2
 8001446:	4a57      	ldr	r2, [pc, #348]	; (80015a4 <Lcd_ChrBold+0x184>)
 8001448:	5cd3      	ldrb	r3, [r2, r3]
 800144a:	733b      	strb	r3, [r7, #12]

      b  = (c & 0x01) * 3;   //"растягиваем" столбец на два байта
 800144c:	7b3b      	ldrb	r3, [r7, #12]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	0052      	lsls	r2, r2, #1
 8001458:	4413      	add	r3, r2
 800145a:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x02) * 6;
 800145c:	7b3b      	ldrb	r3, [r7, #12]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	0052      	lsls	r2, r2, #1
 8001468:	4413      	add	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	b25a      	sxtb	r2, r3
 8001470:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001474:	4313      	orrs	r3, r2
 8001476:	b25b      	sxtb	r3, r3
 8001478:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x04) * 12;
 800147a:	7b3b      	ldrb	r3, [r7, #12]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	b2db      	uxtb	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	0052      	lsls	r2, r2, #1
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	b2db      	uxtb	r3, r3
 800148c:	b25a      	sxtb	r2, r3
 800148e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001492:	4313      	orrs	r3, r2
 8001494:	b25b      	sxtb	r3, r3
 8001496:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x08) * 24;
 8001498:	7b3b      	ldrb	r3, [r7, #12]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	0052      	lsls	r2, r2, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	b25a      	sxtb	r2, r3
 80014ac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	737b      	strb	r3, [r7, #13]

      c >>= 4;
 80014b6:	7b3b      	ldrb	r3, [r7, #12]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	733b      	strb	r3, [r7, #12]
      a  = (c & 0x01) * 3;
 80014bc:	7b3b      	ldrb	r3, [r7, #12]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	0052      	lsls	r2, r2, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x02) * 6;
 80014cc:	7b3b      	ldrb	r3, [r7, #12]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	0052      	lsls	r2, r2, #1
 80014d8:	4413      	add	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x04) * 12;
 80014ea:	7b3b      	ldrb	r3, [r7, #12]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	0052      	lsls	r2, r2, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	b25a      	sxtb	r2, r3
 80014fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001502:	4313      	orrs	r3, r2
 8001504:	b25b      	sxtb	r3, r3
 8001506:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x08) * 24;
 8001508:	7b3b      	ldrb	r3, [r7, #12]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	0052      	lsls	r2, r2, #1
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	b25a      	sxtb	r2, r3
 800151c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001520:	4313      	orrs	r3, r2
 8001522:	b25b      	sxtb	r3, r3
 8001524:	73bb      	strb	r3, [r7, #14]

      lcdVideoBuffer[LcdCacheIdx]     = b;//копируем байты в экранный буфер
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <Lcd_ChrBold+0x188>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <Lcd_ChrBold+0x18c>)
 800152e:	7b7b      	ldrb	r3, [r7, #13]
 8001530:	5453      	strb	r3, [r2, r1]
      lcdVideoBuffer[LcdCacheIdx+1]   = b;//дублируем для получения жирного шрифта
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <Lcd_ChrBold+0x188>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	491c      	ldr	r1, [pc, #112]	; (80015ac <Lcd_ChrBold+0x18c>)
 800153a:	7b7a      	ldrb	r2, [r7, #13]
 800153c:	54ca      	strb	r2, [r1, r3]
      lcdVideoBuffer[LcdCacheIdx+128] = a;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <Lcd_ChrBold+0x188>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	3380      	adds	r3, #128	; 0x80
 8001544:	4919      	ldr	r1, [pc, #100]	; (80015ac <Lcd_ChrBold+0x18c>)
 8001546:	7bba      	ldrb	r2, [r7, #14]
 8001548:	54ca      	strb	r2, [r1, r3]
      lcdVideoBuffer[LcdCacheIdx+129] = a;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <Lcd_ChrBold+0x188>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	3381      	adds	r3, #129	; 0x81
 8001550:	4916      	ldr	r1, [pc, #88]	; (80015ac <Lcd_ChrBold+0x18c>)
 8001552:	7bba      	ldrb	r2, [r7, #14]
 8001554:	54ca      	strb	r2, [r1, r3]
      LcdCacheIdx = LcdCacheIdx+2;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <Lcd_ChrBold+0x188>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	3302      	adds	r3, #2
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <Lcd_ChrBold+0x188>)
 8001560:	801a      	strh	r2, [r3, #0]
  for(i = 0; i < 5; i++)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	3301      	adds	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b04      	cmp	r3, #4
 800156c:	f67f af65 	bls.w	800143a <Lcd_ChrBold+0x1a>
    }

  lcdVideoBuffer[LcdCacheIdx++] = 0x00;	//для пробела между символами
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <Lcd_ChrBold+0x188>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	b291      	uxth	r1, r2
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <Lcd_ChrBold+0x188>)
 800157a:	8011      	strh	r1, [r2, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <Lcd_ChrBold+0x18c>)
 8001580:	2100      	movs	r1, #0
 8001582:	5499      	strb	r1, [r3, r2]
  lcdVideoBuffer[LcdCacheIdx++] = 0x00;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <Lcd_ChrBold+0x188>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	b291      	uxth	r1, r2
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <Lcd_ChrBold+0x188>)
 800158e:	8011      	strh	r1, [r2, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <Lcd_ChrBold+0x18c>)
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	0800366c 	.word	0x0800366c
 80015a8:	20000454 	.word	0x20000454
 80015ac:	20000054 	.word	0x20000054

080015b0 <Lcd_ChrBig>:
		}
	ClearTextBuf();
}
//*****************************************************************************	
//Displays a character at current cursor location and increment cursor location
void Lcd_ChrBig (int ch){
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  
  unsigned char i;
  unsigned char a = 0, b = 0, c = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73bb      	strb	r3, [r7, #14]
 80015bc:	2300      	movs	r3, #0
 80015be:	737b      	strb	r3, [r7, #13]
 80015c0:	2300      	movs	r3, #0
 80015c2:	733b      	strb	r3, [r7, #12]
  //-------------------- 
  for ( i = 0; i < 5; i++ )
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e08a      	b.n	80016e0 <Lcd_ChrBig+0x130>
    {
      c = TabAscii[(ch*5+i)];		//выделяем столбец из символа
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	441a      	add	r2, r3
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <Lcd_ChrBig+0x158>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	733b      	strb	r3, [r7, #12]

      b  = (c & 0x01) * 3;            //"растягиваем" столбец на два байта 
 80015dc:	7b3b      	ldrb	r3, [r7, #12]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	0052      	lsls	r2, r2, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x02) * 6;
 80015ec:	7b3b      	ldrb	r3, [r7, #12]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	0052      	lsls	r2, r2, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	b25a      	sxtb	r2, r3
 8001600:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001604:	4313      	orrs	r3, r2
 8001606:	b25b      	sxtb	r3, r3
 8001608:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x04) * 12;
 800160a:	7b3b      	ldrb	r3, [r7, #12]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	0052      	lsls	r2, r2, #1
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	b25a      	sxtb	r2, r3
 800161e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001622:	4313      	orrs	r3, r2
 8001624:	b25b      	sxtb	r3, r3
 8001626:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x08) * 24;
 8001628:	7b3b      	ldrb	r3, [r7, #12]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	0052      	lsls	r2, r2, #1
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	b25a      	sxtb	r2, r3
 800163c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001640:	4313      	orrs	r3, r2
 8001642:	b25b      	sxtb	r3, r3
 8001644:	737b      	strb	r3, [r7, #13]

      c >>= 4;
 8001646:	7b3b      	ldrb	r3, [r7, #12]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	733b      	strb	r3, [r7, #12]
      a  = (c & 0x01) * 3;
 800164c:	7b3b      	ldrb	r3, [r7, #12]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	0052      	lsls	r2, r2, #1
 8001658:	4413      	add	r3, r2
 800165a:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x02) * 6;
 800165c:	7b3b      	ldrb	r3, [r7, #12]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	0052      	lsls	r2, r2, #1
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	b25a      	sxtb	r2, r3
 8001670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001674:	4313      	orrs	r3, r2
 8001676:	b25b      	sxtb	r3, r3
 8001678:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x04) * 12;
 800167a:	7b3b      	ldrb	r3, [r7, #12]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	0052      	lsls	r2, r2, #1
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	b2db      	uxtb	r3, r3
 800168c:	b25a      	sxtb	r2, r3
 800168e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001692:	4313      	orrs	r3, r2
 8001694:	b25b      	sxtb	r3, r3
 8001696:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x08) * 24;
 8001698:	7b3b      	ldrb	r3, [r7, #12]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	0052      	lsls	r2, r2, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	73bb      	strb	r3, [r7, #14]
      lcdVideoBuffer[LcdCacheIdx] = b;
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <Lcd_ChrBig+0x15c>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <Lcd_ChrBig+0x160>)
 80016be:	7b7b      	ldrb	r3, [r7, #13]
 80016c0:	5453      	strb	r3, [r2, r1]
      lcdVideoBuffer[LcdCacheIdx+128] = a;
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <Lcd_ChrBig+0x15c>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	3380      	adds	r3, #128	; 0x80
 80016c8:	4911      	ldr	r1, [pc, #68]	; (8001710 <Lcd_ChrBig+0x160>)
 80016ca:	7bba      	ldrb	r2, [r7, #14]
 80016cc:	54ca      	strb	r2, [r1, r3]
      LcdCacheIdx = LcdCacheIdx+1;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <Lcd_ChrBig+0x15c>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <Lcd_ChrBig+0x15c>)
 80016d8:	801a      	strh	r2, [r3, #0]
  for ( i = 0; i < 5; i++ )
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	3301      	adds	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	f67f af71 	bls.w	80015ca <Lcd_ChrBig+0x1a>
    }
  lcdVideoBuffer[LcdCacheIdx++] = 0x00;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <Lcd_ChrBig+0x15c>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	b291      	uxth	r1, r2
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <Lcd_ChrBig+0x15c>)
 80016f2:	8011      	strh	r1, [r2, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <Lcd_ChrBig+0x160>)
 80016f8:	2100      	movs	r1, #0
 80016fa:	5499      	strb	r1, [r3, r2]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	0800366c 	.word	0x0800366c
 800170c:	20000454 	.word	0x20000454
 8001710:	20000054 	.word	0x20000054

08001714 <Lcd_Print>:
			if(lcdTextBuf[i]) Lcd_ChrBig(lcdTextBuf[i]);
		}
	ClearTextBuf();
}
//*****************************************************************************
uint8_t Lcd_Print(char *txt){
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  
  uint8_t i = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
  //-------------------- 
  ClearTextBuf();
 8001720:	f7ff fdc0 	bl	80012a4 <ClearTextBuf>
  while(*txt)
 8001724:	e00a      	b.n	800173c <Lcd_Print+0x28>
    {
      Lcd_Chr(*txt++);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe0b 	bl	800134c <Lcd_Chr>
      i++;  
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	3301      	adds	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
  while(*txt)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <Lcd_Print+0x12>
    } 
  return i;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <Lcd_BinToDec>:
	  lcdVideoBuffer[i] = imageData[1023 - i];	//грузим данные
	  //lcdVideoBuffer[i] = imageData[i];	//грузим данные
    }
}
//*****************************************************************************
uint8_t Lcd_BinToDec(uint16_t var, uint8_t num, LcdCharSize_enum charSize){
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
 800175a:	460b      	mov	r3, r1
 800175c:	717b      	strb	r3, [r7, #5]
 800175e:	4613      	mov	r3, r2
 8001760:	713b      	strb	r3, [r7, #4]

	uint8_t DecArray[5];
	uint8_t	temp;
	//--------------------
	if((var <= 0xFFFF) && (num <= 5))
 8001762:	797b      	ldrb	r3, [r7, #5]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d876      	bhi.n	8001856 <Lcd_BinToDec+0x106>
		{
		  DecArray[4] = (uint8_t)(var / 10000);
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4a3e      	ldr	r2, [pc, #248]	; (8001864 <Lcd_BinToDec+0x114>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	0b5b      	lsrs	r3, r3, #13
 8001772:	b29b      	uxth	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	733b      	strb	r3, [r7, #12]
		  var %= 10000;
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <Lcd_BinToDec+0x114>)
 800177c:	fba2 1203 	umull	r1, r2, r2, r3
 8001780:	0b52      	lsrs	r2, r2, #13
 8001782:	f242 7110 	movw	r1, #10000	; 0x2710
 8001786:	fb01 f202 	mul.w	r2, r1, r2
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	80fb      	strh	r3, [r7, #6]

		  DecArray[3] = (uint8_t)(var / 1000);
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	4a35      	ldr	r2, [pc, #212]	; (8001868 <Lcd_BinToDec+0x118>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	b29b      	uxth	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	72fb      	strb	r3, [r7, #11]
		  var %= 1000;
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	4a31      	ldr	r2, [pc, #196]	; (8001868 <Lcd_BinToDec+0x118>)
 80017a2:	fba2 1203 	umull	r1, r2, r2, r3
 80017a6:	0992      	lsrs	r2, r2, #6
 80017a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017ac:	fb01 f202 	mul.w	r2, r1, r2
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	80fb      	strh	r3, [r7, #6]

		  DecArray[2] = (uint8_t)(var / 100);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	4a2d      	ldr	r2, [pc, #180]	; (800186c <Lcd_BinToDec+0x11c>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	095b      	lsrs	r3, r3, #5
 80017be:	b29b      	uxth	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	72bb      	strb	r3, [r7, #10]
		  var %= 100;
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4a29      	ldr	r2, [pc, #164]	; (800186c <Lcd_BinToDec+0x11c>)
 80017c8:	fba2 1203 	umull	r1, r2, r2, r3
 80017cc:	0952      	lsrs	r2, r2, #5
 80017ce:	2164      	movs	r1, #100	; 0x64
 80017d0:	fb01 f202 	mul.w	r2, r1, r2
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	80fb      	strh	r3, [r7, #6]

		  DecArray[1] = (uint8_t)(var / 10);
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	4a25      	ldr	r2, [pc, #148]	; (8001870 <Lcd_BinToDec+0x120>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	727b      	strb	r3, [r7, #9]
		  DecArray[0] = (uint8_t)(var % 10);
 80017e8:	88fa      	ldrh	r2, [r7, #6]
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <Lcd_BinToDec+0x120>)
 80017ec:	fba3 1302 	umull	r1, r3, r3, r2
 80017f0:	08d9      	lsrs	r1, r3, #3
 80017f2:	460b      	mov	r3, r1
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	723b      	strb	r3, [r7, #8]
		  //--------------------
		  //Вывод на дисплей
		  for(uint8_t i=0; i < num; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	e022      	b.n	800184e <Lcd_BinToDec+0xfe>
			{
			  temp = 0x30 + DecArray[(num - 1) - i];
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	1e5a      	subs	r2, r3, #1
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f107 0210 	add.w	r2, r7, #16
 8001814:	4413      	add	r3, r2
 8001816:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800181a:	3330      	adds	r3, #48	; 0x30
 800181c:	73bb      	strb	r3, [r7, #14]

				   if(charSize == LCD_CHAR_SIZE_BIG) Lcd_ChrBig(temp);
 800181e:	793b      	ldrb	r3, [r7, #4]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d104      	bne.n	800182e <Lcd_BinToDec+0xde>
 8001824:	7bbb      	ldrb	r3, [r7, #14]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fec2 	bl	80015b0 <Lcd_ChrBig>
 800182c:	e00c      	b.n	8001848 <Lcd_BinToDec+0xf8>
			  else if(charSize == LCD_CHAR_SIZE_BOLD)Lcd_ChrBold(temp);
 800182e:	793b      	ldrb	r3, [r7, #4]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d104      	bne.n	800183e <Lcd_BinToDec+0xee>
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fdf2 	bl	8001420 <Lcd_ChrBold>
 800183c:	e004      	b.n	8001848 <Lcd_BinToDec+0xf8>
			  else					     			 Lcd_Chr(temp);
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fd82 	bl	800134c <Lcd_Chr>
		  for(uint8_t i=0; i < num; i++)
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	3301      	adds	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	797b      	ldrb	r3, [r7, #5]
 8001852:	429a      	cmp	r2, r3
 8001854:	d3d8      	bcc.n	8001808 <Lcd_BinToDec+0xb8>
			}
		}
	return num+1;
 8001856:	797b      	ldrb	r3, [r7, #5]
 8001858:	3301      	adds	r3, #1
 800185a:	b2db      	uxtb	r3, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	d1b71759 	.word	0xd1b71759
 8001868:	10624dd3 	.word	0x10624dd3
 800186c:	51eb851f 	.word	0x51eb851f
 8001870:	cccccccd 	.word	0xcccccccd

08001874 <Lcd_u8ToHex>:
//*****************************************************************************
void Lcd_u8ToHex(uint8_t var){
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]

	uint8_t ch;
	//--------------------
	ch = (var >> 4) & 0x0F;
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	73fb      	strb	r3, [r7, #15]
	if(ch <= 9) ch += '0';
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2b09      	cmp	r3, #9
 8001888:	d803      	bhi.n	8001892 <Lcd_u8ToHex+0x1e>
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	3330      	adds	r3, #48	; 0x30
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	e002      	b.n	8001898 <Lcd_u8ToHex+0x24>
	else		ch += ('A' - 10);
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	3337      	adds	r3, #55	; 0x37
 8001896:	73fb      	strb	r3, [r7, #15]
	Lcd_Chr(ch);
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fd55 	bl	800134c <Lcd_Chr>

	ch = var & 0x0F;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	73fb      	strb	r3, [r7, #15]
	if(ch <= 9) ch += '0';
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b09      	cmp	r3, #9
 80018ae:	d803      	bhi.n	80018b8 <Lcd_u8ToHex+0x44>
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	3330      	adds	r3, #48	; 0x30
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e002      	b.n	80018be <Lcd_u8ToHex+0x4a>
	else		ch += ('A' - 10);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	3337      	adds	r3, #55	; 0x37
 80018bc:	73fb      	strb	r3, [r7, #15]
	Lcd_Chr(ch);
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fd42 	bl	800134c <Lcd_Chr>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <Lcd_u32ToHex>:
//*****************************************************************************
void Lcd_u32ToHex(uint32_t var){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

	Lcd_Print("0x");
 80018d8:	480e      	ldr	r0, [pc, #56]	; (8001914 <Lcd_u32ToHex+0x44>)
 80018da:	f7ff ff1b 	bl	8001714 <Lcd_Print>
	Lcd_u8ToHex((uint8_t)((var & 0xFF000000) >> 24));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0e1b      	lsrs	r3, r3, #24
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ffc5 	bl	8001874 <Lcd_u8ToHex>
	Lcd_u8ToHex((uint8_t)((var & 0x00FF0000) >> 16));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ffbf 	bl	8001874 <Lcd_u8ToHex>
	Lcd_u8ToHex((uint8_t)((var & 0x0000FF00) >> 8));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ffb9 	bl	8001874 <Lcd_u8ToHex>
	Lcd_u8ToHex((uint8_t)( var & 0x000000FF));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ffb4 	bl	8001874 <Lcd_u8ToHex>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	0800363c 	.word	0x0800363c

08001918 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <SystemInit+0x5c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <SystemInit+0x5c>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <SystemInit+0x5c>)
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4911      	ldr	r1, [pc, #68]	; (8001974 <SystemInit+0x5c>)
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <SystemInit+0x60>)
 8001930:	4013      	ands	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <SystemInit+0x5c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <SystemInit+0x5c>)
 800193a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <SystemInit+0x5c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SystemInit+0x5c>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <SystemInit+0x5c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <SystemInit+0x5c>)
 8001956:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800195a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SystemInit+0x5c>)
 800195e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001962:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SystemInit+0x64>)
 8001966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196a:	609a      	str	r2, [r3, #8]
#endif 
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	f8ff0000 	.word	0xf8ff0000
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Adc_Init>:

#include "adc_ST.h"

//-----------------------------------------------------------------------------
//Настройка АЦП. 
void Adc_Init(void){
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= (RCC_APB2ENR_ADC1EN | //Разрешить тактирование АЦП1.
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <Adc_Init+0xa0>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a25      	ldr	r2, [pc, #148]	; (8001a20 <Adc_Init+0xa0>)
 800198a:	f443 7304 	orr.w	r3, r3, #528	; 0x210
 800198e:	6193      	str	r3, [r2, #24]
//					GPIO_CRL_CNF3 | GPIO_CRL_MODE3 | //PC3 - аналоговый вход.
//					GPIO_CRL_CNF4 | GPIO_CRL_MODE4 | //PC4 - аналоговый вход.
//					GPIO_CRL_CNF5 | GPIO_CRL_MODE5 );//PC5 - аналоговый вход.


	GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0 | //PA0 - аналоговый вход.
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <Adc_Init+0xa4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <Adc_Init+0xa4>)
 8001996:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800199a:	f023 030f 	bic.w	r3, r3, #15
 800199e:	6013      	str	r3, [r2, #0]
					GPIO_CRL_CNF1 | GPIO_CRL_MODE1 | //PA1 - аналоговый вход.
					GPIO_CRL_CNF2 | GPIO_CRL_MODE2 );//PA2 - аналоговый вход.
	//--------------------	
	RCC->CFGR &= ~RCC_CFGR_ADCPRE;	   //
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <Adc_Init+0xa0>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <Adc_Init+0xa0>)
 80019a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019aa:	6053      	str	r3, [r2, #4]
	RCC->CFGR |=  RCC_CFGR_ADCPRE_DIV8;//предделитель 8 (72МГц/8 = 9МГц).
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <Adc_Init+0xa0>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <Adc_Init+0xa0>)
 80019b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b6:	6053      	str	r3, [r2, #4]
	//предочистка регистра.
	ADC1->CR1  = 0;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <Adc_Init+0xa8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
	ADC1->SQR1 = 0;
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <Adc_Init+0xa8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR3 = 0;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <Adc_Init+0xa8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
	//Настройка работы АЦП.
	ADC1->CR2  =  ADC_CR2_EXTSEL;   //выбрать источником запуска разряд SWSTART
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <Adc_Init+0xa8>)
 80019cc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019d0:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= (ADC_CR2_EXTTRIG | //разр. внешний запуск регулярного канала
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <Adc_Init+0xa8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <Adc_Init+0xa8>)
 80019d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6093      	str	r3, [r2, #8]
				  ADC_CR2_ADON);    //включить АЦП
	//Рабочий вариант самокалибровки АЦП.
	//Вычитать значение самокалибровки ненужно, АЦП это делает сам.
	ADC1->CR2 |= ADC_CR2_RSTCAL;         //Сброс калибровки
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <Adc_Init+0xa8>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <Adc_Init+0xa8>)
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	6093      	str	r3, [r2, #8]
	while (ADC1->CR2 & ADC_CR2_RSTCAL){};//ждем окончания сброса
 80019ee:	bf00      	nop
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <Adc_Init+0xa8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f9      	bne.n	80019f0 <Adc_Init+0x70>
	ADC1->CR2 |= ADC_CR2_CAL;            //запуск калибровки
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <Adc_Init+0xa8>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <Adc_Init+0xa8>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6093      	str	r3, [r2, #8]
	while (ADC1->CR2 & ADC_CR2_CAL){};   //ждем окончания калибровки
 8001a08:	bf00      	nop
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <Adc_Init+0xa8>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f9      	bne.n	8001a0a <Adc_Init+0x8a>
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40012400 	.word	0x40012400

08001a2c <Adc_GetMeas>:
//-----------------------------------------------------------------------------
//Одно измерение АЦП.
uint16_t Adc_GetMeas(uint8_t adcChannel){
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  
	ADC1->SQR3 = adcChannel;      	  //загрузить номер канала.
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <Adc_GetMeas+0x4c>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2 |= ADC_CR2_SWSTART;     //запуск преобразования в регулярном канале.
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <Adc_GetMeas+0x4c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <Adc_GetMeas+0x4c>)
 8001a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a46:	6093      	str	r3, [r2, #8]
	while(!(ADC1->SR & ADC_SR_EOC)){};//дождаться окончания преобразования
 8001a48:	bf00      	nop
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <Adc_GetMeas+0x4c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f9      	beq.n	8001a4a <Adc_GetMeas+0x1e>
	//Вычитать значение самокалибровки ненужно, АЦП это делает сам.
	return (uint16_t)((ADC1->DR * ADC_QUANT) / 10000);//(uint16_t)((ADC1->DR * 8068) / 10000);
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <Adc_GetMeas+0x4c>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f641 7278 	movw	r2, #8056	; 0x1f78
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <Adc_GetMeas+0x50>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	0b5b      	lsrs	r3, r3, #13
 8001a6a:	b29b      	uxth	r3, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40012400 	.word	0x40012400
 8001a7c:	d1b71759 	.word	0xd1b71759

08001a80 <Gpio_Init>:
static volatile uint16_t GpioAState = 0; //
static volatile uint16_t GpioBState = 0; //
static volatile uint16_t GpioCState = 0; //
//-----------------------------------------------------------------------------
//Инициализация переферии.
void Gpio_Init (void){
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  
  //Включаем тактирование порта A, B, C, D и модуля альтернативных функций.
  RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN |
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <Gpio_Init+0x5c>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <Gpio_Init+0x5c>)
 8001a8a:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 8001a8e:	6193      	str	r3, [r2, #24]
                   RCC_APB2ENR_IOPBEN |
                   RCC_APB2ENR_IOPCEN |
                   RCC_APB2ENR_IOPDEN |
                   RCC_APB2ENR_AFIOEN);
  //Отключение JTAG-D от порта PA15, отладка через SWD активна.
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE; 
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <Gpio_Init+0x60>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <Gpio_Init+0x60>)
 8001a96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	6053      	str	r3, [r2, #4]
  //RCC->CFGR |= RCC_CFGR_MCO_HSI;   //Подключение к выводу PA8 частоту HSI.
  //RCC->CFGR |= RCC_CFGR_MCO_HSE;      //Подключение к выводу PA8 частоту HSE.
  //RCC->CFGR |= RCC_CFGR_MCO_PLL;   //Подключение к выводу PA8 частоту PLL/2. 
  //--------------------
  //PC13 - Led.
  GPIOC->CRH &= ~GPIO_CRH_CNF13;//выход, режим - push-pull.
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <Gpio_Init+0x64>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <Gpio_Init+0x64>)
 8001aa2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001aa6:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= GPIO_CRH_MODE13;//тактирование 50МГц.
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <Gpio_Init+0x64>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <Gpio_Init+0x64>)
 8001aae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001ab2:	6053      	str	r3, [r2, #4]
  //--------------------
  //Управление двигателем.
  //IN1 - PA5
  //IN2 - PA4
  //IN3 - PA3
  GPIOA->CRL &= ~(GPIO_CRL_CNF5  |GPIO_CRL_CNF4   | GPIO_CRL_CNF3 |
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <Gpio_Init+0x68>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <Gpio_Init+0x68>)
 8001aba:	f023 13cc 	bic.w	r3, r3, #13369548	; 0xcc00cc
 8001abe:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 8001ac2:	6013      	str	r3, [r2, #0]
		  	  	  GPIO_CRL_CNF2  |GPIO_CRL_CNF1   | GPIO_CRL_CNF0); //выход, режим - push-pull.

  GPIOA->CRL |=  (GPIO_CRL_MODE5 | GPIO_CRL_MODE4 | GPIO_CRL_MODE3 |
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <Gpio_Init+0x68>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <Gpio_Init+0x68>)
 8001aca:	f043 1333 	orr.w	r3, r3, #3342387	; 0x330033
 8001ace:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8001ad2:	6013      	str	r3, [r2, #0]
                  GPIO_CRH_MODE12 );//тактирование 50МГц.
  GPIOD->CRL |= ( GPIO_CRL_MODE2  );
	//--------------------
	 *
	 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40011000 	.word	0x40011000
 8001ae8:	40010800 	.word	0x40010800

08001aec <I2C_Init>:
static uint8_t   I2C_Mode;

//static uint8_t  i2cState = I2C_STATE_IDLE;
//*******************************************************************************************
//*******************************************************************************************
void I2C_Init(I2C_TypeDef *i2c){
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;//Включаем тактирование GPIOB
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <I2C_Init+0xc0>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <I2C_Init+0xc0>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	6193      	str	r3, [r2, #24]
	//------------------------------
	//Тактирование I2C_1
	if(i2c == I2C1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <I2C_Init+0xc4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d10b      	bne.n	8001b20 <I2C_Init+0x34>
		{
			RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <I2C_Init+0xc0>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	4a27      	ldr	r2, [pc, #156]	; (8001bac <I2C_Init+0xc0>)
 8001b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b12:	61d3      	str	r3, [r2, #28]
			//Инициализация портов.
			//I2C1_SCL - PB6
			//I2C1_SDA - PB7
			GPIOB->CRL |= GPIO_CRL_MODE6_1 | GPIO_CRL_MODE7_1 |
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <I2C_Init+0xc8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <I2C_Init+0xc8>)
 8001b1a:	f043 436e 	orr.w	r3, r3, #3992977408	; 0xee000000
 8001b1e:	6013      	str	r3, [r2, #0]
					      GPIO_CRL_CNF6    | GPIO_CRL_CNF7;
		}
	//------------------------------
	//Тактирование I2C_2
	if(i2c == I2C2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <I2C_Init+0xcc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d10b      	bne.n	8001b40 <I2C_Init+0x54>
		{
			RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8001b28:	4b20      	ldr	r3, [pc, #128]	; (8001bac <I2C_Init+0xc0>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <I2C_Init+0xc0>)
 8001b2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b32:	61d3      	str	r3, [r2, #28]
			//Инициализация портов.
			//I2C2_SCL - PB10
			//I2C2_SDA - PB11
			GPIOB->CRH |= GPIO_CRH_MODE10_1 | GPIO_CRH_MODE11_1 |
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <I2C_Init+0xc8>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <I2C_Init+0xc8>)
 8001b3a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
 8001b3e:	6053      	str	r3, [r2, #4]
						  GPIO_CRH_CNF10    | GPIO_CRH_CNF11;
		}
	//------------------------------
	//Инициализация I2C.
	i2c->CR2  &= ~I2C_CR2_FREQ;   //
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	605a      	str	r2, [r3, #4]
	i2c->CR2  |=  36;//I2C_CR2_VALUE;  //APB1 = 36MHz
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]
	i2c->CCR  &= ~I2C_CCR_CCR;    //
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001b60:	f023 030f 	bic.w	r3, r3, #15
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	61d3      	str	r3, [r2, #28]

	//i2c->CCR   =  120;//100кГц
	i2c->CCR   =  30; //400кГц  45;//I2C_CCR_VALUE;  //(36MHz/I2C_BAUD_RATE/2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	221e      	movs	r2, #30
 8001b6c:	61da      	str	r2, [r3, #28]

	i2c->CCR  |=  I2C_CCR_FS;     //1 - режим FastMode(400kHz), 0 - режим STANDART(100kHz).
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	61da      	str	r2, [r3, #28]
	i2c->TRISE =  12;//37;//I2C_TRISE_VALUE;//(1mcs/(1/36MHz)+1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	220c      	movs	r2, #12
 8001b7e:	621a      	str	r2, [r3, #32]
	i2c->CR1  |=  I2C_CR1_PE;     //Включение модуля I2C1.
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 255; i++){__NOP();};
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e003      	b.n	8001b9a <I2C_Init+0xae>
 8001b92:	bf00      	nop
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	3301      	adds	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2bff      	cmp	r3, #255	; 0xff
 8001b9e:	d1f8      	bne.n	8001b92 <I2C_Init+0xa6>
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40005400 	.word	0x40005400
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40005800 	.word	0x40005800

08001bbc <I2C_Write>:
	while(!(i2c->SR1 & I2C_SR1_BTF));//Ждем окончания передачи
	i2c->CR1 |= I2C_CR1_STOP;		 //Формируем Stop
}
//*******************************************************************************************
//*******************************************************************************************
void I2C_Write(I2C_TypeDef *i2c, uint8_t deviceAddr, uint8_t regAddr, uint8_t *pBuf, uint16_t len){
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	72fb      	strb	r3, [r7, #11]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	72bb      	strb	r3, [r7, #10]

	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_SR1_SB)){};//Ожидание формирования Start condition.
 8001bda:	bf00      	nop
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f9      	beq.n	8001bdc <I2C_Write+0x20>
	(void)i2c->SR1;				      //Для сброса флага SB необходимо прочитать SR1
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес slave + Запись.
	i2c->DR = deviceAddr | I2C_MODE_WRITE;
 8001bec:	7afa      	ldrb	r2, [r7, #11]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_ADDR)){};//Ожидаем окончания передачи адреса и
 8001bf2:	bf00      	nop
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f9      	beq.n	8001bf4 <I2C_Write+0x38>
	(void)i2c->SR1;				        //сбрасываем бит ADDR (чтением SR1 и SR2):
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;				        //
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	699b      	ldr	r3, [r3, #24]
	//Передача адреса в который хотим записать.
	i2c->DR = regAddr;
 8001c08:	7aba      	ldrb	r2, [r7, #10]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_TXE)){};
 8001c0e:	bf00      	nop
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f9      	beq.n	8001c10 <I2C_Write+0x54>
	//передача данных на запись.
	for(uint16_t i = 0; i < len; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	82fb      	strh	r3, [r7, #22]
 8001c20:	e010      	b.n	8001c44 <I2C_Write+0x88>
		{
			i2c->DR = *(pBuf + i);
 8001c22:	8afb      	ldrh	r3, [r7, #22]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
			while(!(i2c->SR1 & I2C_SR1_TXE));//Ждем освобождения буфера
 8001c30:	bf00      	nop
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f9      	beq.n	8001c32 <I2C_Write+0x76>
	for(uint16_t i = 0; i < len; i++)
 8001c3e:	8afb      	ldrh	r3, [r7, #22]
 8001c40:	3301      	adds	r3, #1
 8001c42:	82fb      	strh	r3, [r7, #22]
 8001c44:	8afa      	ldrh	r2, [r7, #22]
 8001c46:	8c3b      	ldrh	r3, [r7, #32]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3ea      	bcc.n	8001c22 <I2C_Write+0x66>
		}

//	while(!(i2c->SR1 & I2C_SR1_BTF));//Ждем окончания передачи
	i2c->CR1 |= I2C_CR1_STOP;		 //Формируем Stop
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	371c      	adds	r7, #28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
	...

08001c64 <I2C_Int_Handler>:
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
}
//*******************************************************************************************
//*******************************************************************************************
static void I2C_Int_Handler(I2C_TypeDef *i2c, uint8_t slaveAddr){
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t sr1 = i2c->SR1;//Чтениех этих регистров сбрасывает флаги событий I2C.
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	60fb      	str	r3, [r7, #12]
	//volatile uint32_t sr2 = i2c->SR2;
	//---------------------
	//Start condition generated. Clear: read SR1, write to DR
	if(sr1 & I2C_SR1_SB)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <I2C_Int_Handler+0x2e>
		{
		  i2c->DR = I2C_ADDRESS(slaveAddr, I2C_Mode);
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <I2C_Int_Handler+0xbc>)
 8001c86:	7812      	ldrb	r2, [r2, #0]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	611a      	str	r2, [r3, #16]
		  return;
 8001c90:	e042      	b.n	8001d18 <I2C_Int_Handler+0xb4>
		}
	//Address sent. Clear: read SR1, read SR2
	else if(sr1 & I2C_SR1_ADDR)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d010      	beq.n	8001cbe <I2C_Int_Handler+0x5a>
	   {
	      if(I2C_Mode == I2C_MODE_WRITE)
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <I2C_Int_Handler+0xbc>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d136      	bne.n	8001d12 <I2C_Int_Handler+0xae>
			  {
	    	  	  i2c->DR = I2C_pBuf[0];
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <I2C_Int_Handler+0xc0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	611a      	str	r2, [r3, #16]
	    	  	  I2C_TxCnt++;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <I2C_Int_Handler+0xc4>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <I2C_Int_Handler+0xc4>)
 8001cba:	801a      	strh	r2, [r3, #0]
//						// не дописано! не использовать
//						I2C_NUMB->DR = (uint8_t)AddrReg;            // First byte
//						AddrReg>>=8;
//					 }
//			  }
	      return;
 8001cbc:	e029      	b.n	8001d12 <I2C_Int_Handler+0xae>
//	else if(sr1 & I2C_SR1_AF)
//		{
//			I2C_TxCnt++;
//		}
	//Data Register Empty (transmitters).
	else if(sr1 & I2C_SR1_TXE)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01f      	beq.n	8001d08 <I2C_Int_Handler+0xa4>
		{
			i2c->DR = I2C_pBuf[I2C_TxCnt];
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <I2C_Int_Handler+0xc0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <I2C_Int_Handler+0xc4>)
 8001cce:	8812      	ldrh	r2, [r2, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]
			I2C_TxCnt++;
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <I2C_Int_Handler+0xc4>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <I2C_Int_Handler+0xc4>)
 8001ce4:	801a      	strh	r2, [r3, #0]
			if(I2C_TxCnt >= I2C_TxSize)
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <I2C_Int_Handler+0xc8>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <I2C_Int_Handler+0xc4>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d810      	bhi.n	8001d16 <I2C_Int_Handler+0xb2>
				{
					I2C_TxCnt = 0;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <I2C_Int_Handler+0xc4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	801a      	strh	r2, [r3, #0]
					i2c->CR1 |= I2C_CR1_STOP;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]
				}
			return;
 8001d06:	e006      	b.n	8001d16 <I2C_Int_Handler+0xb2>
		}
	//Byte Transfer Finished.
	else if(sr1 & I2C_SR1_BTF)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	e002      	b.n	8001d18 <I2C_Int_Handler+0xb4>
	      return;
 8001d12:	bf00      	nop
 8001d14:	e000      	b.n	8001d18 <I2C_Int_Handler+0xb4>
			return;
 8001d16:	bf00      	nop
//	if(sr1 & I2C_SR1_TXE)
//		{
//			if(TxCounter < I2C_TxSize) i2c->DR   = I2C_pBuf[TxCounter++];
//			else		               i2c->CR1 |= I2C_CR1_STOP;
//		}
}
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	20000461 	.word	0x20000461
 8001d24:	2000045c 	.word	0x2000045c
 8001d28:	20000456 	.word	0x20000456
 8001d2c:	20000460 	.word	0x20000460

08001d30 <I2C1_EV_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание I2C1.
void I2C1_EV_IRQHandler(void){
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

//	I2C_handler(I2C1, addr);
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <I2C2_EV_IRQHandler>:
//**********************************************************
//Прерывание I2C2.
void I2C2_EV_IRQHandler(void){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

	I2C_Int_Handler(I2C2, I2C_SlaveAddr);
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <I2C2_EV_IRQHandler+0x14>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <I2C2_EV_IRQHandler+0x18>)
 8001d48:	f7ff ff8c 	bl	8001c64 <I2C_Int_Handler>
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000458 	.word	0x20000458
 8001d54:	40005800 	.word	0x40005800

08001d58 <Spi1Init>:
static uint8_t Spi2StatusReg = 0;
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//Инициализация SPI1. PA5(SPI1_SCK), PA6(SPI1_MISO), PA7(SPI1_MOSI).
void Spi1Init(void){
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  
	if(Spi1StatusReg & SPI_INIT) return;
 8001d5c:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <Spi1Init+0xc0>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d153      	bne.n	8001e10 <Spi1Init+0xb8>
	Spi1StatusReg |= SPI_INIT;
 8001d68:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <Spi1Init+0xc0>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <Spi1Init+0xc0>)
 8001d74:	701a      	strb	r2, [r3, #0]
	//--------------------
	//Включаем тактирование порта B.
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <Spi1Init+0xc4>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4a28      	ldr	r2, [pc, #160]	; (8001e1c <Spi1Init+0xc4>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6193      	str	r3, [r2, #24]
	
	GPIOA->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_CNF7);
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <Spi1Init+0xc8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <Spi1Init+0xc8>)
 8001d88:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001d8c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d90:	6013      	str	r3, [r2, #0]
																
	GPIOA->CRL |= GPIO_CRL_CNF5_1;//PA5(SPI1_SCK) - выход, альтернативный режим push-pull.
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <Spi1Init+0xc8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <Spi1Init+0xc8>)
 8001d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d9c:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5; //PA5(SPI1_SCK) - тактирование 50МГц.
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <Spi1Init+0xc8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <Spi1Init+0xc8>)
 8001da4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001da8:	6013      	str	r3, [r2, #0]
	
	GPIOA->CRL &= ~GPIO_CRL_MODE6;
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <Spi1Init+0xc8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <Spi1Init+0xc8>)
 8001db0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001db4:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF6;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <Spi1Init+0xc8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <Spi1Init+0xc8>)
 8001dbc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001dc0:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |=  GPIO_CRL_CNF6_1;//PA6(SPI1_MISO) - вход, 
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <Spi1Init+0xc8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <Spi1Init+0xc8>)
 8001dc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dcc:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS6;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <Spi1Init+0xc8>)
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	611a      	str	r2, [r3, #16]

	GPIOA->CRL |= GPIO_CRL_CNF7_1; //PA7(SPI1_MOSI) - выход, альтернативный режим push-pull.
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <Spi1Init+0xc8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <Spi1Init+0xc8>)
 8001dda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dde:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE7;  //PA7(SPI1_MOSI) - тактирование 50МГц.
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <Spi1Init+0xc8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <Spi1Init+0xc8>)
 8001de6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001dea:	6013      	str	r3, [r2, #0]
	//--------------------																
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;	//Включение тактирования SPI1.                                      /
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <Spi1Init+0xc4>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <Spi1Init+0xc4>)
 8001df2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df6:	6193      	str	r3, [r2, #24]
  
	SPI1->CR1  = 0;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <Spi1Init+0xcc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |=(SPI_CR1_MSTR |	 //режим "мастер".
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <Spi1Init+0xcc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <Spi1Init+0xcc>)
 8001e04:	f443 735b 	orr.w	r3, r3, #876	; 0x36c
 8001e08:	f043 0303 	orr.w	r3, r3, #3
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e000      	b.n	8001e12 <Spi1Init+0xba>
	if(Spi1StatusReg & SPI_INIT) return;
 8001e10:	bf00      	nop
	
// 	SPI2->CR2 |= SPI_CR2_TXEIE;        //разрешить прерывание по окончанию передачи               /
// 	SPI2->CR2 |= SPI_CR2_RXNEIE;       //разрешить прерывание, если принят байт данных
// 	SPI2->CR2 |= SPI_CR2_ERRIE;        //разрешить прерывание при возникновении ошибки
//	NVIC_EnableIRQ (SPI2_IRQn); 
}
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	20000462 	.word	0x20000462
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010800 	.word	0x40010800
 8001e24:	40013000 	.word	0x40013000

08001e28 <Spi1TxRxByte>:
//---------------------------------------------------------------
//Передача данных(8 бит) в SPI1.
uint8_t	Spi1TxRxByte(uint8_t byte){
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]

  volatile uint32_t spiWaitCount = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  //--------------------
	//Если SPI не проинециализирован ,то выходим.
	if(!(Spi1StatusReg & SPI_INIT)) return 0;
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <Spi1TxRxByte+0x74>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <Spi1TxRxByte+0x2e>
 8001e42:	2300      	movs	r3, #0
 8001e44:	e024      	b.n	8001e90 <Spi1TxRxByte+0x68>
	//Ожидание освобождения передающего буфера.
	while(!(SPI1->SR & SPI_SR_TXE))
		{
			if(++spiWaitCount > SPI_WAIT) return 0;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001e50:	d901      	bls.n	8001e56 <Spi1TxRxByte+0x2e>
 8001e52:	2300      	movs	r3, #0
 8001e54:	e01c      	b.n	8001e90 <Spi1TxRxByte+0x68>
	while(!(SPI1->SR & SPI_SR_TXE))
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <Spi1TxRxByte+0x78>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f1      	beq.n	8001e46 <Spi1TxRxByte+0x1e>
		}
		
	spiWaitCount = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
	SPI1->DR = byte;
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <Spi1TxRxByte+0x78>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	60d3      	str	r3, [r2, #12]
		
	while(SPI1->SR & SPI_SR_BSY)
 8001e6c:	e007      	b.n	8001e7e <Spi1TxRxByte+0x56>
		{
			if(++spiWaitCount > SPI_WAIT) return 0;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3301      	adds	r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001e78:	d901      	bls.n	8001e7e <Spi1TxRxByte+0x56>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e008      	b.n	8001e90 <Spi1TxRxByte+0x68>
	while(SPI1->SR & SPI_SR_BSY)
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <Spi1TxRxByte+0x78>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f1      	bne.n	8001e6e <Spi1TxRxByte+0x46>
		}
	//--------------------
	return (uint8_t)SPI1->DR;
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <Spi1TxRxByte+0x78>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	b2db      	uxtb	r3, r3
} 
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000462 	.word	0x20000462
 8001ea0:	40013000 	.word	0x40013000

08001ea4 <Spi1Rx3Byte>:
		}
	//--------------------
	return (uint16_t)SPI1->DR;
}
//---------------------------------------------------------------
uint32_t Spi1Rx3Byte(void){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0

	uint32_t temp = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
	//--------------------
	temp |= Spi1TxRxByte(0xff) << 16;
 8001eae:	20ff      	movs	r0, #255	; 0xff
 8001eb0:	f7ff ffba 	bl	8001e28 <Spi1TxRxByte>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	607b      	str	r3, [r7, #4]
	temp |= Spi1TxRxByte(0xff) << 8;
 8001ec0:	20ff      	movs	r0, #255	; 0xff
 8001ec2:	f7ff ffb1 	bl	8001e28 <Spi1TxRxByte>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	607b      	str	r3, [r7, #4]
	temp |= Spi1TxRxByte(0xff);
 8001ed2:	20ff      	movs	r0, #255	; 0xff
 8001ed4:	f7ff ffa8 	bl	8001e28 <Spi1TxRxByte>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	607b      	str	r3, [r7, #4]

	return temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <SPI2_IRQHandler>:
	//--------------------
	return (uint8_t)SPI2->DR;
} 
//-----------------------------------------------------------------------------
//Прерываени от SPI2.
void SPI2_IRQHandler(void){
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  
  //uint16_t tmp;
  //--------------------
  //причина прерывания - окончание передачи байта
  if(SPI2->SR & SPI_SR_TXE)
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <SPI2_IRQHandler+0x34>)
 8001ef2:	689b      	ldr	r3, [r3, #8]

      //LC2SostGreenLedToggel;//Мигаем для отладки          
    }
  //--------------------
  //причина прерывания - принят байт данных
  if(SPI2->SR &= SPI_SR_RXNE)
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <SPI2_IRQHandler+0x34>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <SPI2_IRQHandler+0x34>)
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	6093      	str	r3, [r2, #8]
      //tmp = SPI1->DR;                //прочитать принятые данные
      //выполняем какие-то действия      
    }
  //--------------------
  //причина прерывания - ошибка режима ведущего
  if(SPI2->SR &= SPI_SR_MODF)
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <SPI2_IRQHandler+0x34>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <SPI2_IRQHandler+0x34>)
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	6093      	str	r3, [r2, #8]
    {
      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
    }
  //--------------------
  //причина прерывания - переполнение приемника данных
  if(SPI2->SR &= SPI_SR_OVR)
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <SPI2_IRQHandler+0x34>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <SPI2_IRQHandler+0x34>)
 8001f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f16:	6093      	str	r3, [r2, #8]
//  if(SPI2->SR &= SSPI_SR_CRCERR)
//    {
//      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
//    }
  //--------------------
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	40003800 	.word	0x40003800

08001f24 <Init_RCC>:
#include "sys_ST.h"

//**********************************************************************************************
//**********************************************************************************************
//Настройка тактирования 72МГц. Внешний кварц 8 МГц.
static uint32_t Init_RCC(void){
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
	
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
	//--------------------
	//SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/        
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);//Enable HSE.
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <Init_RCC+0xf8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a39      	ldr	r2, [pc, #228]	; (800201c <Init_RCC+0xf8>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready and if Time out is reached exit */
	do{
			HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001f3e:	4b37      	ldr	r3, [pc, #220]	; (800201c <Init_RCC+0xf8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	603b      	str	r3, [r7, #0]
			StartUpCounter++;  
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	607b      	str	r3, [r7, #4]
	  }
	while((HSEStatus == 0) && (StartUpCounter != 0xFFFF));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d104      	bne.n	8001f5e <Init_RCC+0x3a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d1ef      	bne.n	8001f3e <Init_RCC+0x1a>
	//--------------------
	if ((RCC->CR & RCC_CR_HSERDY) != 0) HSEStatus = (uint32_t)0x01;
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	; (800201c <Init_RCC+0xf8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <Init_RCC+0x4c>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	e001      	b.n	8001f74 <Init_RCC+0x50>
	else                                HSEStatus = (uint32_t)0x00;
 8001f70:	2300      	movs	r3, #0
 8001f72:	603b      	str	r3, [r7, #0]
	//--------------------
	if(HSEStatus == (uint32_t)0x01)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d149      	bne.n	800200e <Init_RCC+0xea>
		{
			/* Enable Prefetch Buffer */
			FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001f7a:	4b29      	ldr	r3, [pc, #164]	; (8002020 <Init_RCC+0xfc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a28      	ldr	r2, [pc, #160]	; (8002020 <Init_RCC+0xfc>)
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	6013      	str	r3, [r2, #0]
			/* Flash 2 wait state */
			FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <Init_RCC+0xfc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a25      	ldr	r2, [pc, #148]	; (8002020 <Init_RCC+0xfc>)
 8001f8c:	f023 0307 	bic.w	r3, r3, #7
 8001f90:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;  
 8001f92:	4b23      	ldr	r3, [pc, #140]	; (8002020 <Init_RCC+0xfc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a22      	ldr	r2, [pc, #136]	; (8002020 <Init_RCC+0xfc>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6013      	str	r3, [r2, #0]
			//--------------------
			//Настройка тактирования шин AHB, APB1 и APB2.
			RCC->CFGR |= (uint32_t)(RCC_CFGR_HPRE_DIV1  | // AHB prescaler. SYSCLK not divided
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <Init_RCC+0xf8>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	; (800201c <Init_RCC+0xf8>)
 8001fa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fa8:	6053      	str	r3, [r2, #4]
									RCC_CFGR_PPRE2_DIV1 | // APB2 = AHB. APB2 Fmax = 72MHz.
									RCC_CFGR_PPRE1_DIV2); // APB1 = (AHB / 2). APB1 Fmax = 36MHz.
			//--------------------
			//PLL configuration: = HSE * 9 = 72 MHz */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <Init_RCC+0xf8>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a1b      	ldr	r2, [pc, #108]	; (800201c <Init_RCC+0xf8>)
 8001fb0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001fb4:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_Msk        |  // HSE oscillator clock selected as PLL input clock
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <Init_RCC+0xf8>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a18      	ldr	r2, [pc, #96]	; (800201c <Init_RCC+0xf8>)
 8001fbc:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001fc0:	6053      	str	r3, [r2, #4]
															//RCC_CFGR_PLLXTPRE_HSE_Div2 |  // HSE clock divided by 2                                
															RCC_CFGR_PLLMULL9);
			/* Enable PLL */
			RCC->CR |= RCC_CR_PLLON;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <Init_RCC+0xf8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a15      	ldr	r2, [pc, #84]	; (800201c <Init_RCC+0xf8>)
 8001fc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fcc:	6013      	str	r3, [r2, #0]
			/* Wait till PLL is ready */
			while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 8001fce:	bf00      	nop
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <Init_RCC+0xf8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f9      	beq.n	8001fd0 <Init_RCC+0xac>
			/* Select PLL as system clock source */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <Init_RCC+0xf8>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	; (800201c <Init_RCC+0xf8>)
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <Init_RCC+0xf8>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a0b      	ldr	r2, [pc, #44]	; (800201c <Init_RCC+0xf8>)
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	6053      	str	r3, [r2, #4]
			/* Wait till PLL is used as system clock source */
			while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)  {}        
 8001ff4:	bf00      	nop
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <Init_RCC+0xf8>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d1f9      	bne.n	8001ff6 <Init_RCC+0xd2>
			RCC->CR |= RCC_CR_CSSON; //Включаем защиту HSE от сбоев - CSS.
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <Init_RCC+0xf8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <Init_RCC+0xf8>)
 8002008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800200c:	6013      	str	r3, [r2, #0]
	else
		{
				/* If HSE fails to start-up, the application will have wrong clock 
				 configuration. User can add here some code to deal with this error */
		} 
	return HSEStatus;
 800200e:	683b      	ldr	r3, [r7, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40022000 	.word	0x40022000

08002024 <Sys_Init>:
//*****************************************************************************
void Sys_Init(void){
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	
  //Reset the RCC clock configuration to the default reset state(for debug purpose).
  RCC->CR 	|= (uint32_t)0x00000001;	/* Set HSION bit */
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <Sys_Init+0x54>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a12      	ldr	r2, [pc, #72]	; (8002078 <Sys_Init+0x54>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF0FF0000;	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <Sys_Init+0x54>)
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	490f      	ldr	r1, [pc, #60]	; (8002078 <Sys_Init+0x54>)
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <Sys_Init+0x58>)
 800203c:	4013      	ands	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
  RCC->CR 	&= (uint32_t)0xFEF6FFFF;  /* Reset HSEON, CSSON and PLLON bits */
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <Sys_Init+0x54>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <Sys_Init+0x54>)
 8002046:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
  RCC->CR 	&= (uint32_t)0xFFFBFFFF;  /* Reset HSEBYP bit */
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <Sys_Init+0x54>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a08      	ldr	r2, [pc, #32]	; (8002078 <Sys_Init+0x54>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <Sys_Init+0x54>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a05      	ldr	r2, [pc, #20]	; (8002078 <Sys_Init+0x54>)
 8002062:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002066:	6053      	str	r3, [r2, #4]
  RCC->CIR 	 = 0x009F0000;  				  /* Disable all interrupts and clear pending bits  */
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <Sys_Init+0x54>)
 800206a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800206e:	609a      	str	r2, [r3, #8]
  //RCC->CFGR2 = 0x00000000;      			/* Reset CFGR2 register */  
	
  Init_RCC();//Настройка тактирования микроконтроллера. Внешний кварц 8 МГц.
 8002070:	f7ff ff58 	bl	8001f24 <Init_RCC>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	f0ff0000 	.word	0xf0ff0000

08002080 <NMI_Handler>:
	return (*(__IO uint32_t*)address);
}
//**********************************************************************************************
//**********************************************************************************************
//Прерываени блока CSS. Возникает при сбое тактирования HSE.
void NMI_Handler( void){
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  //RCC->CIR |= RCC_CIR_CSSC;//Очищаем флаг прерывания CSS иначе прерывание будет генерироваться бесконечно.
	//NVIC_SystemReset();
  //LC1SostRedLedOn;
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <HardFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void HardFault_Handler( void){
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
//  if(SCB->HFSR & SCB_HFSR_FORCED)   LC1SostRedLedOn();
//  if(SCB->HFSR & SCB_HFSR_DEBUGEVT) LC2SostRedLedOn();
	
//	LC1SostRedLedOn();
//	LC2SostRedLedOn();
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <MemManage_Handler>:
//*****************************************************************************
//*****************************************************************************
void MemManage_Handler( void){
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

//  LC2SostRedLedOn();
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <BusFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void BusFault_Handler( void){
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

//  LC2SostGreenLedOn();
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <UsageFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void UsageFault_Handler( void){
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <SVC_Handler>:
//*****************************************************************************
//*****************************************************************************
void SVC_Handler( void){
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <SysTick_Init>:

#include "sys_tick_ST.h"

//-----------------------------------------------------------------------------
//Инициализация системного таймера SysTick.
void SysTick_Init(void){
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

	SysTick->LOAD = TimerTick;	//Загрузка значения.
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <SysTick_Init+0x20>)
 80020ce:	4a07      	ldr	r2, [pc, #28]	; (80020ec <SysTick_Init+0x24>)
 80020d0:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = TimerTick;	//Обнуление таймера. 
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SysTick_Init+0x20>)
 80020d4:	4a05      	ldr	r2, [pc, #20]	; (80020ec <SysTick_Init+0x24>)
 80020d6:	609a      	str	r2, [r3, #8]
                              //При записи любого значения этот регист обнуляется, с обнулением флага COUNTFLAG. 
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | //Тактирование частотой процессора (24МГц).
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <SysTick_Init+0x20>)
 80020da:	2207      	movs	r2, #7
 80020dc:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk   | //Рразрешение прерывания.
					SysTick_CTRL_ENABLE_Msk;     //Резрешение таймеру считать.
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000e010 	.word	0xe000e010
 80020ec:	0001193f 	.word	0x0001193f

080020f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db0b      	blt.n	800211a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	4906      	ldr	r1, [pc, #24]	; (8002124 <__NVIC_EnableIRQ+0x34>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	2001      	movs	r0, #1
 8002112:	fa00 f202 	lsl.w	r2, r0, r2
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <TIM1_InitForPWM>:

#include "timers_ST.h"

//*******************************************************************************************
//*******************************************************************************************
void TIM1_InitForPWM(uint32_t ARRval){
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

	//Включение тактирования таймера.
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8002184:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <TIM1_InitForPWM+0xbc>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a2b      	ldr	r2, [pc, #172]	; (8002238 <TIM1_InitForPWM+0xbc>)
 800218a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800218e:	6193      	str	r3, [r2, #24]
	//Прескаллер.
	//APB2_CLK = 72MHz, TIM1_CLK = APB2_CLK * 1 = 72MHz.
	TIM1->PSC = 0;                //PSC[15:0]: Prescaler value.
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <TIM1_InitForPWM+0xc0>)
 8002192:	2200      	movs	r2, #0
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
								  //The counter clock frequency (CK_CNT) is equal to fCK_PSC / (PSC[15:0] + 1).
								  //таймер будет тактироваться с частотой 72МГц/(PSC[15:0] + 1) = 72MГц.
	TIM1->ARR = ARRval;//(3600 - 1);       //Auto reload register. - это значение, до которого будет считать таймер.
 8002196:	4a29      	ldr	r2, [pc, #164]	; (800223c <TIM1_InitForPWM+0xc0>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	62d3      	str	r3, [r2, #44]	; 0x2c

	TIM1->CR1  |= TIM_CR1_ARPE;   //Включен режим предварительной записи регистра автоперезагрузки
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <TIM1_InitForPWM+0xc0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a26      	ldr	r2, [pc, #152]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a6:	6013      	str	r3, [r2, #0]
	TIM1->CCER |= TIM_CCER_CC1E | //Enable CC1 - включение первого канала
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021ae:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6213      	str	r3, [r2, #32]
				  TIM_CCER_CC2E | //Enable CC2 - включение второго канала
				  TIM_CCER_CC3E;  //Enable CC3 - включение третьего канала.
	//Задаем режим работы канала 1 - PWM mode on OC1
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | //OC1M : Output compare 1 mode - 110: PWM mode 1.
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021be:	f043 036c 	orr.w	r3, r3, #108	; 0x6c
 80021c2:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC1PE  |					 //OC1PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.
				   TIM_CCMR1_OC1FE;						 //OC1FE: Output Compare 1 fast enable.
	//Задаем режим работы канала 2 - PWM mode on OC2
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | //OC2M : Output compare 1 mode - 110: PWM mode 1.
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a1c      	ldr	r2, [pc, #112]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021ca:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 80021ce:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC2PE  |					 //OC2PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.
				   TIM_CCMR1_OC2FE;						 //OC2FE: Output Compare 1 fast enable.
	//Задаем режим работы канала 3 - PWM mode on OC3
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | //OC3M : Output compare 1 mode - 110: PWM mode 1.
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a19      	ldr	r2, [pc, #100]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021d6:	f043 036c 	orr.w	r3, r3, #108	; 0x6c
 80021da:	61d3      	str	r3, [r2, #28]
				   TIM_CCMR2_OC3PE  |					 //OC3PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.
				   TIM_CCMR2_OC3FE;						 //OC3FE: Output Compare 1 fast enable.

	//Режимы работы ШИМ. CMS[1:0]: Center-aligned mode selection
	TIM1->CR1 &= ~(TIM_CR1_CMS_0 | TIM_CR1_CMS_1);
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a16      	ldr	r2, [pc, #88]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021e2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80021e6:	6013      	str	r3, [r2, #0]
	//TIM1->CR1 |=   TIM_CR1_CMS_0; 			   // выравнивания по центру - Режим 1.
	//TIM1->CR1 |=   TIM_CR1_CMS_1;				   // выравнивания по центру - Режим 2.
	//TIM1->CR1 |=   TIM_CR1_CMS_0 | TIM_CR1_CMS_1;// выравнивания по центру - Режим 3.

	//TIM1->BDTR |= TIM_BDTR_MOE;// MOE: Main output enable. Разрешаем вывод сигнала на выводы
	TIM1->BDTR |= TIM_BDTR_AOE;//AOE: Automatic output enable
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <TIM1_InitForPWM+0xc0>)
 80021ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f2:	6453      	str	r3, [r2, #68]	; 0x44
	//TIM1->BDTR |= (7 << 5);         // Мертвое время. Константа расчитана из задержек конкретного железа.

	//Настройка ножки микроконтроллера.
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;	//Включение тактирования PORTA.
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <TIM1_InitForPWM+0xbc>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <TIM1_InitForPWM+0xbc>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6193      	str	r3, [r2, #24]

	GPIOA->CRH |= GPIO_CRH_CNF8_1 | //PA8(TIM1_CH1)  - выход, альтернативный режим push-pull.
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <TIM1_InitForPWM+0xc4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <TIM1_InitForPWM+0xc4>)
 8002206:	f443 6308 	orr.w	r3, r3, #2176	; 0x880
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	6053      	str	r3, [r2, #4]
			      GPIO_CRH_CNF9_1 | //PA9(TIM1_CH2)  - выход, альтернативный режим push-pull.
				  GPIO_CRH_CNF10_1; //PA10(TIM1_CH3) - выход, альтернативный режим push-pull.

	GPIOA->CRH |= GPIO_CRH_MODE8 |  //PA8(TIM1_CH1)  - тактирование 50МГц.
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <TIM1_InitForPWM+0xc4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <TIM1_InitForPWM+0xc4>)
 8002216:	f443 734c 	orr.w	r3, r3, #816	; 0x330
 800221a:	f043 0303 	orr.w	r3, r3, #3
 800221e:	6053      	str	r3, [r2, #4]
				  GPIO_CRH_MODE9 |  //PA9(TIM1_CH2)  - тактирование 50МГц.
				  GPIO_CRH_MODE10;  //PA10(TIM1_CH3) - тактирование 50МГц.
	//Включение таймера
	TIM1->CR1 |= TIM_CR1_CEN;//CEN: Counter enable
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <TIM1_InitForPWM+0xc0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <TIM1_InitForPWM+0xc0>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	40012c00 	.word	0x40012c00
 8002240:	40010800 	.word	0x40010800

08002244 <TIM4_Init>:
	//Включение таймера
	TIM3->CR1 |= TIM_CR1_CEN;
}
//*******************************************************************************************
//*******************************************************************************************
void TIM4_Init(void){
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0

	//Включение тактирования таймера.
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <TIM4_Init+0x44>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <TIM4_Init+0x44>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	61d3      	str	r3, [r2, #28]

	//Прескаллер.
	//APB1_CLK = 36MHz, TIM4_CLK = APB1_CLK * 2 = 72MHz.
	TIM4->PSC = (360 - 1);  	   //таймер будет тактироваться с частотой 72МГц/72 = 1МГц.
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <TIM4_Init+0x48>)
 8002256:	f240 1267 	movw	r2, #359	; 0x167
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = (10000 - 1);//Auto reload register - это значение, до которого будет считать таймер.
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <TIM4_Init+0x48>)
 800225e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->DIER |= TIM_DIER_UIE; //Update interrupt enable
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <TIM4_Init+0x48>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a08      	ldr	r2, [pc, #32]	; (800228c <TIM4_Init+0x48>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	60d3      	str	r3, [r2, #12]
	TIM4->CR1   = TIM_CR1_ARPE |//Auto-reload preload enable
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <TIM4_Init+0x48>)
 8002272:	2281      	movs	r2, #129	; 0x81
 8002274:	601a      	str	r2, [r3, #0]
				  TIM_CR1_CEN;  //Counter enable
	//Разрешение прерывания от TIM4.
	NVIC_SetPriority(TIM4_IRQn, 15);
 8002276:	210f      	movs	r1, #15
 8002278:	201e      	movs	r0, #30
 800227a:	f7ff ff55 	bl	8002128 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 800227e:	201e      	movs	r0, #30
 8002280:	f7ff ff36 	bl	80020f0 <__NVIC_EnableIRQ>
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	40000800 	.word	0x40000800

08002290 <Led_Blink>:
	riseReg  = (oldState ^ event) & event;
	oldState = event;
	if(riseReg) (*var)--;
}
//************************************************************
void Led_Blink(void){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0

	if(Blink(INTERVAL_50_mS)) Led_PC13_On();
 8002294:	2004      	movs	r0, #4
 8002296:	f7fe ff89 	bl	80011ac <Blink>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <Led_Blink+0x1a>
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <Led_Blink+0x28>)
 80022a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022a6:	611a      	str	r2, [r3, #16]
	else					  Led_PC13_Off();
}
 80022a8:	e003      	b.n	80022b2 <Led_Blink+0x22>
	else					  Led_PC13_Off();
 80022aa:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <Led_Blink+0x28>)
 80022ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022b0:	611a      	str	r2, [r3, #16]
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40011000 	.word	0x40011000
 80022bc:	00000000 	.word	0x00000000

080022c0 <FillSinTable>:

static uint16_t sin_arr[STEPS_NUM][3];

//************************************************************
//************************************************************
void FillSinTable(void){
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0

	float arg = (PI / STEPS_NUM);
 80022c6:	4b50      	ldr	r3, [pc, #320]	; (8002408 <FillSinTable+0x148>)
 80022c8:	603b      	str	r3, [r7, #0]
	//--------------------------
	for(uint16_t i = 0; i < STEPS_NUM; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	80fb      	strh	r3, [r7, #6]
 80022ce:	e08b      	b.n	80023e8 <FillSinTable+0x128>
		{
			sin_arr[i][0] = (uint16_t)(PWM_MAX_VALUE * fabsf(sinf(i * arg)));
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fc44 	bl	8000b60 <__aeabi_i2f>
 80022d8:	4603      	mov	r3, r0
 80022da:	6839      	ldr	r1, [r7, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe fc93 	bl	8000c08 <__aeabi_fmul>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fbe5 	bl	8002ab4 <sinf>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022f0:	4946      	ldr	r1, [pc, #280]	; (800240c <FillSinTable+0x14c>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fc88 	bl	8000c08 <__aeabi_fmul>
 80022f8:	4603      	mov	r3, r0
 80022fa:	88fc      	ldrh	r4, [r7, #6]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fe6f 	bl	8000fe0 <__aeabi_f2uiz>
 8002302:	4603      	mov	r3, r0
 8002304:	b299      	uxth	r1, r3
 8002306:	4a42      	ldr	r2, [pc, #264]	; (8002410 <FillSinTable+0x150>)
 8002308:	4623      	mov	r3, r4
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4423      	add	r3, r4
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	460a      	mov	r2, r1
 8002314:	801a      	strh	r2, [r3, #0]
			sin_arr[i][1] = (uint16_t)(PWM_MAX_VALUE * fabsf(sinf(i * arg + DEGREES_120)));
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fc21 	bl	8000b60 <__aeabi_i2f>
 800231e:	4603      	mov	r3, r0
 8002320:	6839      	ldr	r1, [r7, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe fc70 	bl	8000c08 <__aeabi_fmul>
 8002328:	4603      	mov	r3, r0
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f884 	bl	8000438 <__aeabi_f2d>
 8002330:	a331      	add	r3, pc, #196	; (adr r3, 80023f8 <FillSinTable+0x138>)
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	f7fd ff21 	bl	800017c <__adddf3>
 800233a:	4603      	mov	r3, r0
 800233c:	460c      	mov	r4, r1
 800233e:	4618      	mov	r0, r3
 8002340:	4621      	mov	r1, r4
 8002342:	f7fe fb03 	bl	800094c <__aeabi_d2f>
 8002346:	4603      	mov	r3, r0
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fbb3 	bl	8002ab4 <sinf>
 800234e:	4603      	mov	r3, r0
 8002350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002354:	492d      	ldr	r1, [pc, #180]	; (800240c <FillSinTable+0x14c>)
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fc56 	bl	8000c08 <__aeabi_fmul>
 800235c:	4603      	mov	r3, r0
 800235e:	88fc      	ldrh	r4, [r7, #6]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fe3d 	bl	8000fe0 <__aeabi_f2uiz>
 8002366:	4603      	mov	r3, r0
 8002368:	b299      	uxth	r1, r3
 800236a:	4a29      	ldr	r2, [pc, #164]	; (8002410 <FillSinTable+0x150>)
 800236c:	4623      	mov	r3, r4
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4423      	add	r3, r4
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	3302      	adds	r3, #2
 8002378:	460a      	mov	r2, r1
 800237a:	801a      	strh	r2, [r3, #0]
			sin_arr[i][2] = (uint16_t)(PWM_MAX_VALUE * fabsf(sinf(i * arg + DEGREES_240)));
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fbee 	bl	8000b60 <__aeabi_i2f>
 8002384:	4603      	mov	r3, r0
 8002386:	6839      	ldr	r1, [r7, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fc3d 	bl	8000c08 <__aeabi_fmul>
 800238e:	4603      	mov	r3, r0
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f851 	bl	8000438 <__aeabi_f2d>
 8002396:	a31a      	add	r3, pc, #104	; (adr r3, 8002400 <FillSinTable+0x140>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fd feee 	bl	800017c <__adddf3>
 80023a0:	4603      	mov	r3, r0
 80023a2:	460c      	mov	r4, r1
 80023a4:	4618      	mov	r0, r3
 80023a6:	4621      	mov	r1, r4
 80023a8:	f7fe fad0 	bl	800094c <__aeabi_d2f>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fb80 	bl	8002ab4 <sinf>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ba:	4914      	ldr	r1, [pc, #80]	; (800240c <FillSinTable+0x14c>)
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe fc23 	bl	8000c08 <__aeabi_fmul>
 80023c2:	4603      	mov	r3, r0
 80023c4:	88fc      	ldrh	r4, [r7, #6]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fe0a 	bl	8000fe0 <__aeabi_f2uiz>
 80023cc:	4603      	mov	r3, r0
 80023ce:	b299      	uxth	r1, r3
 80023d0:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <FillSinTable+0x150>)
 80023d2:	4623      	mov	r3, r4
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4423      	add	r3, r4
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	460a      	mov	r2, r1
 80023e0:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < STEPS_NUM; i++)
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	3301      	adds	r3, #1
 80023e6:	80fb      	strh	r3, [r7, #6]
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	2bc7      	cmp	r3, #199	; 0xc7
 80023ec:	f67f af70 	bls.w	80022d0 <FillSinTable+0x10>
//		{
//			sin_arr[i][0] = (uint16_t)(PWM_MAX_VALUE/2 + PWM_MAX_VALUE * sinf(i * arg));
//			sin_arr[i][1] = (uint16_t)(PWM_MAX_VALUE/2 + PWM_MAX_VALUE * sinf(i * arg + DEGREES_120));
//			sin_arr[i][2] = (uint16_t)(PWM_MAX_VALUE/2 + PWM_MAX_VALUE * sinf(i * arg + DEGREES_240));
//		}
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	c985f06f 	.word	0xc985f06f
 80023fc:	4000c154 	.word	0x4000c154
 8002400:	2a6f3f53 	.word	0x2a6f3f53
 8002404:	4010c152 	.word	0x4010c152
 8002408:	3c80adfd 	.word	0x3c80adfd
 800240c:	44e10000 	.word	0x44e10000
 8002410:	20000468 	.word	0x20000468

08002414 <GrayToBin2>:
    }
    return bin;
}
//------------------------------------------------------------
//Преобразование кода Грея в бинарный код. Вар2.
uint32_t GrayToBin2(uint32_t grayCode){
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

	grayCode ^= (grayCode >> 1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	085b      	lsrs	r3, r3, #1
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4053      	eors	r3, r2
 8002424:	607b      	str	r3, [r7, #4]
	grayCode ^= (grayCode >> 2);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	4053      	eors	r3, r2
 800242e:	607b      	str	r3, [r7, #4]
	grayCode ^= (grayCode >> 4);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4053      	eors	r3, r2
 8002438:	607b      	str	r3, [r7, #4]
	grayCode ^= (grayCode >> 8);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4053      	eors	r3, r2
 8002442:	607b      	str	r3, [r7, #4]
	grayCode ^= (grayCode >> 16);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4053      	eors	r3, r2
 800244c:	607b      	str	r3, [r7, #4]
	return grayCode;
 800244e:	687b      	ldr	r3, [r7, #4]
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	0000      	movs	r0, r0
 800245c:	0000      	movs	r0, r0
	...

08002460 <Encoder_GetAngle>:
//------------------------------------------------------------
//Получение значение поворота энкодера в от 0 до 36000.
uint16_t Encoder_GetAngle(void){
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0

	//Чтение и выравнивание данных из энкодера. Уменьшение разрешения энкодера до 16 бит.
	uint32_t encoderVal = ((Spi1Rx3Byte() >> 7) & 0x0000FFFF);
 8002466:	f7ff fd1d 	bl	8001ea4 <Spi1Rx3Byte>
 800246a:	4603      	mov	r3, r0
 800246c:	09db      	lsrs	r3, r3, #7
 800246e:	b29b      	uxth	r3, r3
 8002470:	607b      	str	r3, [r7, #4]
	//Преобразование кода Грея в двоичный код.
	//encoderVal = GrayToBin(encoderVal);
	encoderVal = GrayToBin2(encoderVal);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffce 	bl	8002414 <GrayToBin2>
 8002478:	6078      	str	r0, [r7, #4]

	return (uint16_t)(encoderVal * ENCODER_STEP);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fd ffba 	bl	80003f4 <__aeabi_ui2d>
 8002480:	a309      	add	r3, pc, #36	; (adr r3, 80024a8 <Encoder_GetAngle+0x48>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fe f82f 	bl	80004e8 <__aeabi_dmul>
 800248a:	4603      	mov	r3, r0
 800248c:	460c      	mov	r4, r1
 800248e:	4618      	mov	r0, r3
 8002490:	4621      	mov	r1, r4
 8002492:	f7fe fa3b 	bl	800090c <__aeabi_d2uiz>
 8002496:	4603      	mov	r3, r0
 8002498:	b29b      	uxth	r3, r3
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	f3af 8000 	nop.w
 80024a8:	94119412 	.word	0x94119412
 80024ac:	3fe19411 	.word	0x3fe19411

080024b0 <main>:
//------------------------------------------------------------
//Обратное преообразование Парка.

//*******************************************************************************************
//*******************************************************************************************
int main(void){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0


	//--------------------------
	//Drivers.
	Sys_Init();
 80024b6:	f7ff fdb5 	bl	8002024 <Sys_Init>
	Gpio_Init();
 80024ba:	f7ff fae1 	bl	8001a80 <Gpio_Init>
	SysTick_Init();
 80024be:	f7ff fe03 	bl	80020c8 <SysTick_Init>
	Adc_Init();
 80024c2:	f7ff fa5d 	bl	8001980 <Adc_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80024c6:	b662      	cpsie	i
	__enable_irq();
	//***********************************************
	TIM1_InitForPWM(PWM_MAX_VALUE);
 80024c8:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80024cc:	f7ff fe56 	bl	800217c <TIM1_InitForPWM>
	//TIM3_InitForPWM();//TIM3 генерирует ШИМ для трех каналов.
	TIM4_Init();        //TIM4 настривается для периодической генерации прерывания.
 80024d0:	f7ff feb8 	bl	8002244 <TIM4_Init>

	//Заполнение таблицы сиинуса.
	FillSinTable();
 80024d4:	f7ff fef4 	bl	80022c0 <FillSinTable>

	//Настройка DMA для работы с таймером.
	//DMA1_ChX_Init(DMA1_Channel4, pwm_value, (sizeof(pwm_value) / sizeof(pwm_value[0])) );
	//***********************************************
	//Инициализация дисплея.
	I2C_Init(I2C1);
 80024d8:	483f      	ldr	r0, [pc, #252]	; (80025d8 <main+0x128>)
 80024da:	f7ff fb07 	bl	8001aec <I2C_Init>
	SSD1306_Init(I2C1);
 80024de:	483e      	ldr	r0, [pc, #248]	; (80025d8 <main+0x128>)
 80024e0:	f000 fa10 	bl	8002904 <SSD1306_Init>

	Lcd_String(1, 1);
 80024e4:	2101      	movs	r1, #1
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7fe ff64 	bl	80013b4 <Lcd_String>
	Lcd_Print("Motor Driver L6234");
 80024ec:	483b      	ldr	r0, [pc, #236]	; (80025dc <main+0x12c>)
 80024ee:	f7ff f911 	bl	8001714 <Lcd_Print>
	Lcd_Update();
 80024f2:	f7fe feef 	bl	80012d4 <Lcd_Update>
	//***********************************************
	//Инициализация SPI для работы с энкодером.
	Spi1Init();
 80024f6:	f7ff fc2f 	bl	8001d58 <Spi1Init>

	//***********************************************
	//Определение смешения в каналах измерения тока фаз мотора.
	uint16_t Ia_AdcOffset = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0; i <= 16; i++)
 80024fe:	2300      	movs	r3, #0
 8002500:	717b      	strb	r3, [r7, #5]
 8002502:	e00c      	b.n	800251e <main+0x6e>
		{
			Ia_AdcOffset = Average(Adc_GetMeas(Ia_ADC_CH), 16);
 8002504:	2000      	movs	r0, #0
 8002506:	f7ff fa91 	bl	8001a2c <Adc_GetMeas>
 800250a:	4603      	mov	r3, r0
 800250c:	2110      	movs	r1, #16
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fe90 	bl	8001234 <Average>
 8002514:	4603      	mov	r3, r0
 8002516:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0; i <= 16; i++)
 8002518:	797b      	ldrb	r3, [r7, #5]
 800251a:	3301      	adds	r3, #1
 800251c:	717b      	strb	r3, [r7, #5]
 800251e:	797b      	ldrb	r3, [r7, #5]
 8002520:	2b10      	cmp	r3, #16
 8002522:	d9ef      	bls.n	8002504 <main+0x54>
		}
	//***********************************************
	//__disable_irq();
	msDelay(500);
 8002524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002528:	f7fe fe6a 	bl	8001200 <msDelay>
	//************************************************************************************
	while(1)
		{
			msDelay(5);
 800252c:	2005      	movs	r0, #5
 800252e:	f7fe fe67 	bl	8001200 <msDelay>
			//***********************************************
			//Мигание светодиодами.
			Led_Blink();
 8002532:	f7ff fead 	bl	8002290 <Led_Blink>
			//***********************************************
			//Чтение данных из энкодера.

			uint16_t Degrees = Encoder_GetAngle();
 8002536:	f7ff ff93 	bl	8002460 <Encoder_GetAngle>
 800253a:	4603      	mov	r3, r0
 800253c:	807b      	strh	r3, [r7, #2]

			Lcd_String(1, 4);
 800253e:	2104      	movs	r1, #4
 8002540:	2001      	movs	r0, #1
 8002542:	f7fe ff37 	bl	80013b4 <Lcd_String>
			Lcd_Print("EnCode=");
 8002546:	4826      	ldr	r0, [pc, #152]	; (80025e0 <main+0x130>)
 8002548:	f7ff f8e4 	bl	8001714 <Lcd_Print>
			Lcd_u32ToHex(Degrees);
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff f9be 	bl	80018d0 <Lcd_u32ToHex>

			Lcd_String(1, 5);
 8002554:	2105      	movs	r1, #5
 8002556:	2001      	movs	r0, #1
 8002558:	f7fe ff2c 	bl	80013b4 <Lcd_String>
			Lcd_Print("Degrees=");
 800255c:	4821      	ldr	r0, [pc, #132]	; (80025e4 <main+0x134>)
 800255e:	f7ff f8d9 	bl	8001714 <Lcd_Print>
			Lcd_BinToDec((uint16_t)(Degrees/100), 3, LCD_CHAR_SIZE_NORM);
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <main+0x138>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	b29b      	uxth	r3, r3
 800256e:	2200      	movs	r2, #0
 8002570:	2103      	movs	r1, #3
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f8ec 	bl	8001750 <Lcd_BinToDec>
			Lcd_Chr('.');
 8002578:	202e      	movs	r0, #46	; 0x2e
 800257a:	f7fe fee7 	bl	800134c <Lcd_Chr>
			Lcd_BinToDec((uint16_t)(Degrees%100), 2, LCD_CHAR_SIZE_NORM);
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <main+0x138>)
 8002582:	fba2 1203 	umull	r1, r2, r2, r3
 8002586:	0952      	lsrs	r2, r2, #5
 8002588:	2164      	movs	r1, #100	; 0x64
 800258a:	fb01 f202 	mul.w	r2, r1, r2
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	2200      	movs	r2, #0
 8002594:	2102      	movs	r1, #2
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff f8da 	bl	8001750 <Lcd_BinToDec>
			//***********************************************
			//Измерение тока фаз двигателя.

			uint16_t Ia = Average(Adc_GetMeas(Ia_ADC_CH), 16) - Ia_AdcOffset;
 800259c:	2000      	movs	r0, #0
 800259e:	f7ff fa45 	bl	8001a2c <Adc_GetMeas>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2110      	movs	r1, #16
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fe44 	bl	8001234 <Average>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	803b      	strh	r3, [r7, #0]

			Lcd_String(1, 6);
 80025b6:	2106      	movs	r1, #6
 80025b8:	2001      	movs	r0, #1
 80025ba:	f7fe fefb 	bl	80013b4 <Lcd_String>
			Lcd_Print("Ia=");
 80025be:	480b      	ldr	r0, [pc, #44]	; (80025ec <main+0x13c>)
 80025c0:	f7ff f8a8 	bl	8001714 <Lcd_Print>
			Lcd_BinToDec(Ia, 5, LCD_CHAR_SIZE_NORM);
 80025c4:	883b      	ldrh	r3, [r7, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	2105      	movs	r1, #5
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff f8c0 	bl	8001750 <Lcd_BinToDec>

			Lcd_Update();
 80025d0:	f7fe fe80 	bl	80012d4 <Lcd_Update>
		{
 80025d4:	e7aa      	b.n	800252c <main+0x7c>
 80025d6:	bf00      	nop
 80025d8:	40005400 	.word	0x40005400
 80025dc:	08003640 	.word	0x08003640
 80025e0:	08003654 	.word	0x08003654
 80025e4:	0800365c 	.word	0x0800365c
 80025e8:	51eb851f 	.word	0x51eb851f
 80025ec:	08003668 	.word	0x08003668

080025f0 <SysTick_Handler>:
	//************************************************************************************
}
//*******************************************************************************************
//*******************************************************************************************
//Прерывание каждую милисекунду.
void SysTick_Handler(void){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
//		{
//			msCountForDS18B20 = 0;
//			FlagsStr.DS18B20  = 1;
//		}
	//--------------------------
	msDelay_Loop();
 80025f4:	f7fe fdf6 	bl	80011e4 <msDelay_Loop>
	Blink_Loop();
 80025f8:	f7fe fd12 	bl	8001020 <Blink_Loop>
	Encoder()->Loop();
 80025fc:	f000 f950 	bl	80028a0 <Encoder>
 8002600:	4603      	mov	r3, r0
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4798      	blx	r3
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <TIM4_IRQHandler>:
#define PMSM_PWM  800//Коэфф-т заполнения от 0 до 1800



//Прерывание TIM4.
void TIM4_IRQHandler(void){
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0

	uint16_t pwm1, pwm2, pwm3;
	//--------------------------
	TIM4->SR &= ~TIM_SR_UIF;//Сброс флага прерывания.
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <TIM4_IRQHandler+0xe0>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	4a35      	ldr	r2, [pc, #212]	; (80026ec <TIM4_IRQHandler+0xe0>)
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	6113      	str	r3, [r2, #16]
	//Установка скорости вращения производится изменением частоты срабатывания
	//таймера TIM4

	//--------------------------
	// Calculate PWM for 3-phase
	pwm1 = (uint16_t)((uint32_t)(PMSM_PWM * PMSM_SINTABLE[sinTableIndex][0]) / 255);
 800261e:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	4a33      	ldr	r2, [pc, #204]	; (80026f4 <TIM4_IRQHandler+0xe8>)
 8002626:	460b      	mov	r3, r1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	440b      	add	r3, r1
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002636:	fb03 f302 	mul.w	r3, r3, r2
 800263a:	461a      	mov	r2, r3
 800263c:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <TIM4_IRQHandler+0xec>)
 800263e:	fba3 2302 	umull	r2, r3, r3, r2
 8002642:	09db      	lsrs	r3, r3, #7
 8002644:	80fb      	strh	r3, [r7, #6]
	pwm2 = (uint16_t)((uint32_t)(PMSM_PWM * PMSM_SINTABLE[sinTableIndex][1]) / 255);
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	4619      	mov	r1, r3
 800264c:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <TIM4_IRQHandler+0xe8>)
 800264e:	460b      	mov	r3, r1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	440b      	add	r3, r1
 8002654:	4413      	add	r3, r2
 8002656:	3301      	adds	r3, #1
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002660:	fb03 f302 	mul.w	r3, r3, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <TIM4_IRQHandler+0xec>)
 8002668:	fba3 2302 	umull	r2, r3, r3, r2
 800266c:	09db      	lsrs	r3, r3, #7
 800266e:	80bb      	strh	r3, [r7, #4]
	pwm3 = (uint16_t)((uint32_t)(PMSM_PWM * PMSM_SINTABLE[sinTableIndex][2]) / 255);
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <TIM4_IRQHandler+0xe8>)
 8002678:	460b      	mov	r3, r1
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	440b      	add	r3, r1
 800267e:	4413      	add	r3, r2
 8002680:	3302      	adds	r3, #2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	f44f 7348 	mov.w	r3, #800	; 0x320
 800268a:	fb03 f302 	mul.w	r3, r3, r2
 800268e:	461a      	mov	r2, r3
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <TIM4_IRQHandler+0xec>)
 8002692:	fba3 2302 	umull	r2, r3, r3, r2
 8002696:	09db      	lsrs	r3, r3, #7
 8002698:	807b      	strh	r3, [r7, #2]

	//Set PWM
	TIM1->CCR1 = pwm1;
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <TIM4_IRQHandler+0xf0>)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = pwm2;
 80026a0:	4a16      	ldr	r2, [pc, #88]	; (80026fc <TIM4_IRQHandler+0xf0>)
 80026a2:	88bb      	ldrh	r3, [r7, #4]
 80026a4:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = pwm3;
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <TIM4_IRQHandler+0xf0>)
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	63d3      	str	r3, [r2, #60]	; 0x3c
	// Increment position in sine table
	sinTableIndex++;
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 80026b6:	801a      	strh	r2, [r3, #0]
	if(sinTableIndex > PMSM_SINTABLESIZE-1) sinTableIndex = 0;
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	2bbf      	cmp	r3, #191	; 0xbf
 80026be:	d902      	bls.n	80026c6 <TIM4_IRQHandler+0xba>
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	801a      	strh	r2, [r3, #0]
//	TIM1->CCR1 = sin_arr[sinTableIndex][0];
//	TIM1->CCR2 = sin_arr[sinTableIndex][1];
//	TIM1->CCR3 = sin_arr[sinTableIndex][2];

	// Increment position in sine table
	sinTableIndex++;
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 80026d0:	801a      	strh	r2, [r3, #0]
	if(sinTableIndex > STEPS_NUM-1) sinTableIndex = 0;
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	2bc7      	cmp	r3, #199	; 0xc7
 80026d8:	d902      	bls.n	80026e0 <TIM4_IRQHandler+0xd4>
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <TIM4_IRQHandler+0xe4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	801a      	strh	r2, [r3, #0]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40000800 	.word	0x40000800
 80026f0:	20000464 	.word	0x20000464
 80026f4:	08003b6c 	.word	0x08003b6c
 80026f8:	80808081 	.word	0x80808081
 80026fc:	40012c00 	.word	0x40012c00

08002700 <Encoder_Turn>:
							   .Loop          = &Encoder_Loop,
							   .Rotation      = &Encoder_Turn};

static uint8_t EncoderStateReg = ENCODER_NO_TURN;//Регистр состияния энкодера.
//-----------------------------------------------------------------------------
static void Encoder_Turn(uint16_t *parameter, uint16_t min, uint16_t max){
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	803b      	strh	r3, [r7, #0]

	//--------------------
	switch(EncoderStateReg){
 8002710:	4b18      	ldr	r3, [pc, #96]	; (8002774 <Encoder_Turn+0x74>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d002      	beq.n	800271e <Encoder_Turn+0x1e>
 8002718:	2b03      	cmp	r3, #3
 800271a:	d013      	beq.n	8002744 <Encoder_Turn+0x44>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
			EncoderStateReg = ENCODER_NO_TURN;
		break;
		//-----------
		default:
		break;	
 800271c:	e025      	b.n	800276a <Encoder_Turn+0x6a>
			if ((*parameter) < max)(*parameter)++;    //Проверка на  максимум.
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	883a      	ldrh	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d906      	bls.n	8002736 <Encoder_Turn+0x36>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	801a      	strh	r2, [r3, #0]
 8002734:	e002      	b.n	800273c <Encoder_Turn+0x3c>
			else                   (*parameter) = min;//Закольцовывание редактирования параметра.
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	887a      	ldrh	r2, [r7, #2]
 800273a:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <Encoder_Turn+0x74>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
		break;
 8002742:	e012      	b.n	800276a <Encoder_Turn+0x6a>
			if ((*parameter) > min)(*parameter)--;    //Проверка на минимум.
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	887a      	ldrh	r2, [r7, #2]
 800274a:	429a      	cmp	r2, r3
 800274c:	d206      	bcs.n	800275c <Encoder_Turn+0x5c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	e002      	b.n	8002762 <Encoder_Turn+0x62>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	883a      	ldrh	r2, [r7, #0]
 8002760:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <Encoder_Turn+0x74>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
		break;
 8002768:	bf00      	nop
		//-----------
	}
	//--------------------	
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000918 	.word	0x20000918

08002778 <Encoder_Loop>:
//-----------------------------------------------------------------------------
/*Когда энкодер не вращают на обоих его выводах(A и В) единицы(внутряння подтяжка МК).Это состояние 3 энкодера - начальное состояние энкодера.
*Так-же начальным состоянием может быть  состояние энкодера когда А и В ровны 0.
*Когда вращаю вправо, то после состояния 3 энкодер передет в состояние 1 (А=1, В=0).
*Когда вращают влево, то после состояния 3 энкодер прердет в состояние 2 (А=0, В=1). */
static void Encoder_Loop(void){
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
	static uint8_t  cycle   = 0;
	static uint8_t  msCount = 0;
	static uint16_t but[3]  = {0, 0, 0};
	//--------------------
	//Обработка вращения энкодера.
	switch(EncoderStateReg){
 800277c:	4b42      	ldr	r3, [pc, #264]	; (8002888 <Encoder_Loop+0x110>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <Encoder_Loop+0x12>
 8002784:	2b01      	cmp	r3, #1
 8002786:	d010      	beq.n	80027aa <Encoder_Loop+0x32>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
				} 			
		break;
		//-----------
		default:
		break;	
 8002788:	e031      	b.n	80027ee <Encoder_Loop+0x76>
			if(!(EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 800278a:	4b40      	ldr	r3, [pc, #256]	; (800288c <Encoder_Loop+0x114>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d128      	bne.n	80027e8 <Encoder_Loop+0x70>
 8002796:	4b3d      	ldr	r3, [pc, #244]	; (800288c <Encoder_Loop+0x114>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d122      	bne.n	80027e8 <Encoder_Loop+0x70>
					EncoderStateReg = ENCODER_TURN;
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <Encoder_Loop+0x110>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
		break;
 80027a8:	e01e      	b.n	80027e8 <Encoder_Loop+0x70>
			if( !(EncoderPORT->IDR & EncoderPinA) && (EncoderPORT->IDR & EncoderPinB))
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <Encoder_Loop+0x114>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <Encoder_Loop+0x50>
 80027b6:	4b35      	ldr	r3, [pc, #212]	; (800288c <Encoder_Loop+0x114>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <Encoder_Loop+0x50>
					EncoderStateReg = ENCODER_TURN_RIGHT;//щелчок вправо.
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <Encoder_Loop+0x110>)
 80027c4:	2202      	movs	r2, #2
 80027c6:	701a      	strb	r2, [r3, #0]
		  if( (EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 80027c8:	4b30      	ldr	r3, [pc, #192]	; (800288c <Encoder_Loop+0x114>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00b      	beq.n	80027ec <Encoder_Loop+0x74>
 80027d4:	4b2d      	ldr	r3, [pc, #180]	; (800288c <Encoder_Loop+0x114>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <Encoder_Loop+0x74>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <Encoder_Loop+0x110>)
 80027e2:	2203      	movs	r2, #3
 80027e4:	701a      	strb	r2, [r3, #0]
		break;
 80027e6:	e001      	b.n	80027ec <Encoder_Loop+0x74>
		break;
 80027e8:	bf00      	nop
 80027ea:	e000      	b.n	80027ee <Encoder_Loop+0x76>
		break;
 80027ec:	bf00      	nop
		//-----------		
	}
	//--------------------
	//Опрос кнопки энкодера.
	if(++msCount >= ENCODER_BUTTON_TIMEOUT)
 80027ee:	4b28      	ldr	r3, [pc, #160]	; (8002890 <Encoder_Loop+0x118>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <Encoder_Loop+0x118>)
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <Encoder_Loop+0x118>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b09      	cmp	r3, #9
 8002800:	d93d      	bls.n	800287e <Encoder_Loop+0x106>
		{
		  msCount = 0;//сброс счетчика
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <Encoder_Loop+0x118>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
		  //-----------
			if(cycle < 3)
 8002808:	4b22      	ldr	r3, [pc, #136]	; (8002894 <Encoder_Loop+0x11c>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d811      	bhi.n	8002834 <Encoder_Loop+0xbc>
				{
					but[cycle] = EncoderPORT->IDR & EncoderButtonPin;//Считывание состояние вывода.
 8002810:	4b1e      	ldr	r3, [pc, #120]	; (800288c <Encoder_Loop+0x114>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <Encoder_Loop+0x11c>)
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	b299      	uxth	r1, r3
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <Encoder_Loop+0x120>)
 8002822:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					cycle++;
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <Encoder_Loop+0x11c>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <Encoder_Loop+0x11c>)
 8002830:	701a      	strb	r2, [r3, #0]
					else EncoderStr.ButtonIsPress = 0;
				}
			//-----------
		}
	//--------------------
}
 8002832:	e024      	b.n	800287e <Encoder_Loop+0x106>
					cycle = 0;
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <Encoder_Loop+0x11c>)
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
					if(~((but[0] & but[1]) | (but[1] & but[2]) | (but[0] & but[2])) & EncoderButtonPin) 
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <Encoder_Loop+0x120>)
 800283c:	885a      	ldrh	r2, [r3, #2]
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <Encoder_Loop+0x120>)
 8002840:	8819      	ldrh	r1, [r3, #0]
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <Encoder_Loop+0x120>)
 8002844:	889b      	ldrh	r3, [r3, #4]
 8002846:	430b      	orrs	r3, r1
 8002848:	b29b      	uxth	r3, r3
 800284a:	4013      	ands	r3, r2
 800284c:	b29a      	uxth	r2, r3
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <Encoder_Loop+0x120>)
 8002850:	8819      	ldrh	r1, [r3, #0]
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <Encoder_Loop+0x120>)
 8002854:	889b      	ldrh	r3, [r3, #4]
 8002856:	400b      	ands	r3, r1
 8002858:	b29b      	uxth	r3, r3
 800285a:	4313      	orrs	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <Encoder_Loop+0xfc>
							 EncoderStr.ButtonIsPress = 1;
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <Encoder_Loop+0x124>)
 800286a:	7813      	ldrb	r3, [r2, #0]
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	7013      	strb	r3, [r2, #0]
}
 8002872:	e004      	b.n	800287e <Encoder_Loop+0x106>
					else EncoderStr.ButtonIsPress = 0;
 8002874:	4a09      	ldr	r2, [pc, #36]	; (800289c <Encoder_Loop+0x124>)
 8002876:	7813      	ldrb	r3, [r2, #0]
 8002878:	f36f 0300 	bfc	r3, #0, #1
 800287c:	7013      	strb	r3, [r2, #0]
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000918 	.word	0x20000918
 800288c:	40011000 	.word	0x40011000
 8002890:	20000919 	.word	0x20000919
 8002894:	2000091a 	.word	0x2000091a
 8002898:	2000091c 	.word	0x2000091c
 800289c:	20000000 	.word	0x20000000

080028a0 <Encoder>:
	//Input pull-up
	GPIOB->CRH |= (GPIO_CRH_CNF12_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_CNF10_1);//
	GPIOB->ODR |= (GPIO_ODR_ODR12   | GPIO_ODR_ODR11   | GPIO_ODR_ODR10);	 //
}
//-----------------------------------------------------------------------------
Encoder_t* Encoder(void){
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

	return &EncoderStr;
 80028a4:	4b02      	ldr	r3, [pc, #8]	; (80028b0 <Encoder+0x10>)
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000

080028b4 <ssd1306_I2C_WriteDataBuf>:
 * @param  reg: register to write to
 * @param  *data: pointer to data array to write it to slave
 * @param  count: how many bytes will be written
 * @retval None
 */
static void ssd1306_I2C_WriteDataBuf(uint8_t *pData, uint16_t len){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
//			I2C_SendData(SSD1306_I2C, &tempBuff, 1);
//			I2C_SendData(SSD1306_I2C, pData, len);
//		}
//	I2C_Stop(SSD1306_I2C);

	I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0x40, pData, len);
 80028c0:	887b      	ldrh	r3, [r7, #2]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2240      	movs	r2, #64	; 0x40
 80028c8:	2178      	movs	r1, #120	; 0x78
 80028ca:	4803      	ldr	r0, [pc, #12]	; (80028d8 <ssd1306_I2C_WriteDataBuf+0x24>)
 80028cc:	f7ff f976 	bl	8001bbc <I2C_Write>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40005400 	.word	0x40005400

080028dc <ssd1306_I2C_WriteCMD>:
 * @param  address: 7 bit slave address, left aligned, bits 7:1 are used, LSB bit is not used
 * @param  reg: register to write to
 * @param  data: data to be written
 * @retval None
 */
static void ssd1306_I2C_WriteCMD(uint8_t cmd){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
//		{
//			I2C_SendData(SSD1306_I2C, data, 2);
//		}
//	I2C_Stop(SSD1306_I2C);

	I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0, &cmd, 1);
 80028e6:	1dfa      	adds	r2, r7, #7
 80028e8:	2301      	movs	r3, #1
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	2200      	movs	r2, #0
 80028f0:	2178      	movs	r1, #120	; 0x78
 80028f2:	4803      	ldr	r0, [pc, #12]	; (8002900 <ssd1306_I2C_WriteCMD+0x24>)
 80028f4:	f7ff f962 	bl	8001bbc <I2C_Write>
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40005400 	.word	0x40005400

08002904 <SSD1306_Init>:
//*******************************************************************************************
//*******************************************************************************************
uint8_t SSD1306_Init(I2C_TypeDef *i2c) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
//	uint32_t p = 2500;
//	while(p>0)
//		p--;

	/* Init LCD */
	ssd1306_I2C_WriteCMD(0xAE); //display off
 800290c:	20ae      	movs	r0, #174	; 0xae
 800290e:	f7ff ffe5 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x20); //Set Memory Addressing Mode
 8002912:	2020      	movs	r0, #32
 8002914:	f7ff ffe2 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x01); //00,Horizontal Addressing Mode;
 8002918:	2001      	movs	r0, #1
 800291a:	f7ff ffdf 	bl	80028dc <ssd1306_I2C_WriteCMD>
							    //01,Vertical Addressing Mode;
							    //10,Page Addressing Mode (RESET);
							    //11,Invalid

	ssd1306_I2C_WriteCMD(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800291e:	20b0      	movs	r0, #176	; 0xb0
 8002920:	f7ff ffdc 	bl	80028dc <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xC8); //Set COM Output Scan Direction
 8002924:	20c8      	movs	r0, #200	; 0xc8
 8002926:	f7ff ffd9 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x00); //---set low column address
 800292a:	2000      	movs	r0, #0
 800292c:	f7ff ffd6 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x10); //---set high column address
 8002930:	2010      	movs	r0, #16
 8002932:	f7ff ffd3 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x40); //--set start line address
 8002936:	2040      	movs	r0, #64	; 0x40
 8002938:	f7ff ffd0 	bl	80028dc <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0x81); //--set contrast control register
 800293c:	2081      	movs	r0, #129	; 0x81
 800293e:	f7ff ffcd 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(50);
 8002942:	2032      	movs	r0, #50	; 0x32
 8002944:	f7ff ffca 	bl	80028dc <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xA1); //--set segment re-map 0 to 127
 8002948:	20a1      	movs	r0, #161	; 0xa1
 800294a:	f7ff ffc7 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xA6); //--set normal display
 800294e:	20a6      	movs	r0, #166	; 0xa6
 8002950:	f7ff ffc4 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xA8); //--set multiplex ratio(1 to 64)
 8002954:	20a8      	movs	r0, #168	; 0xa8
 8002956:	f7ff ffc1 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x3F); //
 800295a:	203f      	movs	r0, #63	; 0x3f
 800295c:	f7ff ffbe 	bl	80028dc <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002960:	20a4      	movs	r0, #164	; 0xa4
 8002962:	f7ff ffbb 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xD3); //-set display offset
 8002966:	20d3      	movs	r0, #211	; 0xd3
 8002968:	f7ff ffb8 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x00); //-not offset
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff ffb5 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xD5); //--set display clock divide ratio/oscillator frequency
 8002972:	20d5      	movs	r0, #213	; 0xd5
 8002974:	f7ff ffb2 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xF0); //--set divide ratio
 8002978:	20f0      	movs	r0, #240	; 0xf0
 800297a:	f7ff ffaf 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xD9); //--set pre-charge period
 800297e:	20d9      	movs	r0, #217	; 0xd9
 8002980:	f7ff ffac 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x22); //
 8002984:	2022      	movs	r0, #34	; 0x22
 8002986:	f7ff ffa9 	bl	80028dc <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xDA); //--set com pins hardware configuration
 800298a:	20da      	movs	r0, #218	; 0xda
 800298c:	f7ff ffa6 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x12);
 8002990:	2012      	movs	r0, #18
 8002992:	f7ff ffa3 	bl	80028dc <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xDB); //--set vcomh
 8002996:	20db      	movs	r0, #219	; 0xdb
 8002998:	f7ff ffa0 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x20); //0x20,0.77xVcc
 800299c:	2020      	movs	r0, #32
 800299e:	f7ff ff9d 	bl	80028dc <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0x8D); //--set DC-DC enable
 80029a2:	208d      	movs	r0, #141	; 0x8d
 80029a4:	f7ff ff9a 	bl	80028dc <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x14); //
 80029a8:	2014      	movs	r0, #20
 80029aa:	f7ff ff97 	bl	80028dc <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xAF); //--turn on SSD1306 panel
 80029ae:	20af      	movs	r0, #175	; 0xaf
 80029b0:	f7ff ff94 	bl	80028dc <ssd1306_I2C_WriteCMD>
//		0xAF, //--turn on SSD1306 panel
//	};
//	//------------
//	I2C_Int_StartSendData(SSD1306_I2C, SSD1306_I2C_ADDR, InitBuf, 28);

	pVideoBuffer = Lcd_pVideoBuffer();
 80029b4:	f7fe fc98 	bl	80012e8 <Lcd_pVideoBuffer>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <SSD1306_Init+0xc4>)
 80029bc:	601a      	str	r2, [r3, #0]
//	SSD1306.CurrentX = 0;
//	SSD1306.CurrentY = 0;
	/* Initialized OK */
//	SSD1306.Initialized = 1;
	/* Return OK */
	return 1;
 80029be:	2301      	movs	r3, #1
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000924 	.word	0x20000924

080029cc <SSD1306_UpdateScreen>:
//***********************************************************************
void SSD1306_UpdateScreen(uint8_t *pBuf) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

	for(uint8_t m = 0; m < 8; m++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	e017      	b.n	8002a0a <SSD1306_UpdateScreen+0x3e>
		{
			ssd1306_I2C_WriteCMD(0xB0 + m);//Set Page Start Address for Page Addressing Mode,0-7
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	3b50      	subs	r3, #80	; 0x50
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff7b 	bl	80028dc <ssd1306_I2C_WriteCMD>
			ssd1306_I2C_WriteCMD(0x02);    //Set low column address ,смещение вывода изображениея на 2 столбца.
 80029e6:	2002      	movs	r0, #2
 80029e8:	f7ff ff78 	bl	80028dc <ssd1306_I2C_WriteCMD>
			ssd1306_I2C_WriteCMD(0x10);    //Set high column address
 80029ec:	2010      	movs	r0, #16
 80029ee:	f7ff ff75 	bl	80028dc <ssd1306_I2C_WriteCMD>
			/* Write multi data */
			ssd1306_I2C_WriteDataBuf(&pBuf[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	01db      	lsls	r3, r3, #7
 80029f6:	461a      	mov	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff58 	bl	80028b4 <ssd1306_I2C_WriteDataBuf>
	for(uint8_t m = 0; m < 8; m++)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	3301      	adds	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b07      	cmp	r3, #7
 8002a0e:	d9e4      	bls.n	80029da <SSD1306_UpdateScreen+0xe>
		}
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a18:	480d      	ldr	r0, [pc, #52]	; (8002a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a1a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a1c:	f7fe ff7c 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a20:	480c      	ldr	r0, [pc, #48]	; (8002a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a22:	490d      	ldr	r1, [pc, #52]	; (8002a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <LoopForever+0xe>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a28:	e002      	b.n	8002a30 <LoopCopyDataInit>

08002a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a2e:	3304      	adds	r3, #4

08002a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a34:	d3f9      	bcc.n	8002a2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a38:	4c0a      	ldr	r4, [pc, #40]	; (8002a64 <LoopForever+0x16>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a3c:	e001      	b.n	8002a42 <LoopFillZerobss>

08002a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a40:	3204      	adds	r2, #4

08002a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a44:	d3fb      	bcc.n	8002a3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a46:	f000 f811 	bl	8002a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4a:	f7ff fd31 	bl	80024b0 <main>

08002a4e <LoopForever>:

LoopForever:
    b LoopForever
 8002a4e:	e7fe      	b.n	8002a4e <LoopForever>
  ldr   r0, =_estack
 8002a50:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002a5c:	08004184 	.word	0x08004184
  ldr r2, =_sbss
 8002a60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002a64:	20000928 	.word	0x20000928

08002a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC1_2_IRQHandler>
	...

08002a6c <__libc_init_array>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	2500      	movs	r5, #0
 8002a70:	4e0c      	ldr	r6, [pc, #48]	; (8002aa4 <__libc_init_array+0x38>)
 8002a72:	4c0d      	ldr	r4, [pc, #52]	; (8002aa8 <__libc_init_array+0x3c>)
 8002a74:	1ba4      	subs	r4, r4, r6
 8002a76:	10a4      	asrs	r4, r4, #2
 8002a78:	42a5      	cmp	r5, r4
 8002a7a:	d109      	bne.n	8002a90 <__libc_init_array+0x24>
 8002a7c:	f000 fdd2 	bl	8003624 <_init>
 8002a80:	2500      	movs	r5, #0
 8002a82:	4e0a      	ldr	r6, [pc, #40]	; (8002aac <__libc_init_array+0x40>)
 8002a84:	4c0a      	ldr	r4, [pc, #40]	; (8002ab0 <__libc_init_array+0x44>)
 8002a86:	1ba4      	subs	r4, r4, r6
 8002a88:	10a4      	asrs	r4, r4, #2
 8002a8a:	42a5      	cmp	r5, r4
 8002a8c:	d105      	bne.n	8002a9a <__libc_init_array+0x2e>
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
 8002a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a94:	4798      	blx	r3
 8002a96:	3501      	adds	r5, #1
 8002a98:	e7ee      	b.n	8002a78 <__libc_init_array+0xc>
 8002a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a9e:	4798      	blx	r3
 8002aa0:	3501      	adds	r5, #1
 8002aa2:	e7f2      	b.n	8002a8a <__libc_init_array+0x1e>
 8002aa4:	0800417c 	.word	0x0800417c
 8002aa8:	0800417c 	.word	0x0800417c
 8002aac:	0800417c 	.word	0x0800417c
 8002ab0:	08004180 	.word	0x08004180

08002ab4 <sinf>:
 8002ab4:	b507      	push	{r0, r1, r2, lr}
 8002ab6:	4a19      	ldr	r2, [pc, #100]	; (8002b1c <sinf+0x68>)
 8002ab8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8002abc:	4293      	cmp	r3, r2
 8002abe:	4601      	mov	r1, r0
 8002ac0:	dc04      	bgt.n	8002acc <sinf+0x18>
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f000 fca1 	bl	800340c <__kernel_sinf>
 8002aca:	e004      	b.n	8002ad6 <sinf+0x22>
 8002acc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002ad0:	db04      	blt.n	8002adc <sinf+0x28>
 8002ad2:	f7fd ff8f 	bl	80009f4 <__aeabi_fsub>
 8002ad6:	b003      	add	sp, #12
 8002ad8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002adc:	4669      	mov	r1, sp
 8002ade:	f000 f81f 	bl	8002b20 <__ieee754_rem_pio2f>
 8002ae2:	f000 0003 	and.w	r0, r0, #3
 8002ae6:	2801      	cmp	r0, #1
 8002ae8:	d006      	beq.n	8002af8 <sinf+0x44>
 8002aea:	2802      	cmp	r0, #2
 8002aec:	d009      	beq.n	8002b02 <sinf+0x4e>
 8002aee:	b980      	cbnz	r0, 8002b12 <sinf+0x5e>
 8002af0:	2201      	movs	r2, #1
 8002af2:	9901      	ldr	r1, [sp, #4]
 8002af4:	9800      	ldr	r0, [sp, #0]
 8002af6:	e7e6      	b.n	8002ac6 <sinf+0x12>
 8002af8:	9901      	ldr	r1, [sp, #4]
 8002afa:	9800      	ldr	r0, [sp, #0]
 8002afc:	f000 f968 	bl	8002dd0 <__kernel_cosf>
 8002b00:	e7e9      	b.n	8002ad6 <sinf+0x22>
 8002b02:	2201      	movs	r2, #1
 8002b04:	9901      	ldr	r1, [sp, #4]
 8002b06:	9800      	ldr	r0, [sp, #0]
 8002b08:	f000 fc80 	bl	800340c <__kernel_sinf>
 8002b0c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002b10:	e7e1      	b.n	8002ad6 <sinf+0x22>
 8002b12:	9901      	ldr	r1, [sp, #4]
 8002b14:	9800      	ldr	r0, [sp, #0]
 8002b16:	f000 f95b 	bl	8002dd0 <__kernel_cosf>
 8002b1a:	e7f7      	b.n	8002b0c <sinf+0x58>
 8002b1c:	3f490fd8 	.word	0x3f490fd8

08002b20 <__ieee754_rem_pio2f>:
 8002b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b24:	4a9d      	ldr	r2, [pc, #628]	; (8002d9c <__ieee754_rem_pio2f+0x27c>)
 8002b26:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8002b2a:	4295      	cmp	r5, r2
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	460c      	mov	r4, r1
 8002b30:	4607      	mov	r7, r0
 8002b32:	dc04      	bgt.n	8002b3e <__ieee754_rem_pio2f+0x1e>
 8002b34:	2300      	movs	r3, #0
 8002b36:	6020      	str	r0, [r4, #0]
 8002b38:	604b      	str	r3, [r1, #4]
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	e01a      	b.n	8002b74 <__ieee754_rem_pio2f+0x54>
 8002b3e:	4a98      	ldr	r2, [pc, #608]	; (8002da0 <__ieee754_rem_pio2f+0x280>)
 8002b40:	4295      	cmp	r5, r2
 8002b42:	dc4b      	bgt.n	8002bdc <__ieee754_rem_pio2f+0xbc>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	f025 050f 	bic.w	r5, r5, #15
 8002b4a:	4996      	ldr	r1, [pc, #600]	; (8002da4 <__ieee754_rem_pio2f+0x284>)
 8002b4c:	4e96      	ldr	r6, [pc, #600]	; (8002da8 <__ieee754_rem_pio2f+0x288>)
 8002b4e:	dd23      	ble.n	8002b98 <__ieee754_rem_pio2f+0x78>
 8002b50:	f7fd ff50 	bl	80009f4 <__aeabi_fsub>
 8002b54:	42b5      	cmp	r5, r6
 8002b56:	4607      	mov	r7, r0
 8002b58:	d010      	beq.n	8002b7c <__ieee754_rem_pio2f+0x5c>
 8002b5a:	4994      	ldr	r1, [pc, #592]	; (8002dac <__ieee754_rem_pio2f+0x28c>)
 8002b5c:	f7fd ff4a 	bl	80009f4 <__aeabi_fsub>
 8002b60:	4601      	mov	r1, r0
 8002b62:	6020      	str	r0, [r4, #0]
 8002b64:	4638      	mov	r0, r7
 8002b66:	f7fd ff45 	bl	80009f4 <__aeabi_fsub>
 8002b6a:	4990      	ldr	r1, [pc, #576]	; (8002dac <__ieee754_rem_pio2f+0x28c>)
 8002b6c:	f7fd ff42 	bl	80009f4 <__aeabi_fsub>
 8002b70:	2601      	movs	r6, #1
 8002b72:	6060      	str	r0, [r4, #4]
 8002b74:	4630      	mov	r0, r6
 8002b76:	b007      	add	sp, #28
 8002b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b7c:	498c      	ldr	r1, [pc, #560]	; (8002db0 <__ieee754_rem_pio2f+0x290>)
 8002b7e:	f7fd ff39 	bl	80009f4 <__aeabi_fsub>
 8002b82:	498c      	ldr	r1, [pc, #560]	; (8002db4 <__ieee754_rem_pio2f+0x294>)
 8002b84:	4605      	mov	r5, r0
 8002b86:	f7fd ff35 	bl	80009f4 <__aeabi_fsub>
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	6020      	str	r0, [r4, #0]
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f7fd ff30 	bl	80009f4 <__aeabi_fsub>
 8002b94:	4987      	ldr	r1, [pc, #540]	; (8002db4 <__ieee754_rem_pio2f+0x294>)
 8002b96:	e7e9      	b.n	8002b6c <__ieee754_rem_pio2f+0x4c>
 8002b98:	f7fd ff2e 	bl	80009f8 <__addsf3>
 8002b9c:	42b5      	cmp	r5, r6
 8002b9e:	4607      	mov	r7, r0
 8002ba0:	d00e      	beq.n	8002bc0 <__ieee754_rem_pio2f+0xa0>
 8002ba2:	4982      	ldr	r1, [pc, #520]	; (8002dac <__ieee754_rem_pio2f+0x28c>)
 8002ba4:	f7fd ff28 	bl	80009f8 <__addsf3>
 8002ba8:	4601      	mov	r1, r0
 8002baa:	6020      	str	r0, [r4, #0]
 8002bac:	4638      	mov	r0, r7
 8002bae:	f7fd ff21 	bl	80009f4 <__aeabi_fsub>
 8002bb2:	497e      	ldr	r1, [pc, #504]	; (8002dac <__ieee754_rem_pio2f+0x28c>)
 8002bb4:	f7fd ff20 	bl	80009f8 <__addsf3>
 8002bb8:	f04f 36ff 	mov.w	r6, #4294967295
 8002bbc:	6060      	str	r0, [r4, #4]
 8002bbe:	e7d9      	b.n	8002b74 <__ieee754_rem_pio2f+0x54>
 8002bc0:	497b      	ldr	r1, [pc, #492]	; (8002db0 <__ieee754_rem_pio2f+0x290>)
 8002bc2:	f7fd ff19 	bl	80009f8 <__addsf3>
 8002bc6:	497b      	ldr	r1, [pc, #492]	; (8002db4 <__ieee754_rem_pio2f+0x294>)
 8002bc8:	4605      	mov	r5, r0
 8002bca:	f7fd ff15 	bl	80009f8 <__addsf3>
 8002bce:	4601      	mov	r1, r0
 8002bd0:	6020      	str	r0, [r4, #0]
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	f7fd ff0e 	bl	80009f4 <__aeabi_fsub>
 8002bd8:	4976      	ldr	r1, [pc, #472]	; (8002db4 <__ieee754_rem_pio2f+0x294>)
 8002bda:	e7eb      	b.n	8002bb4 <__ieee754_rem_pio2f+0x94>
 8002bdc:	4a76      	ldr	r2, [pc, #472]	; (8002db8 <__ieee754_rem_pio2f+0x298>)
 8002bde:	4295      	cmp	r5, r2
 8002be0:	f300 808c 	bgt.w	8002cfc <__ieee754_rem_pio2f+0x1dc>
 8002be4:	f000 fc88 	bl	80034f8 <fabsf>
 8002be8:	4974      	ldr	r1, [pc, #464]	; (8002dbc <__ieee754_rem_pio2f+0x29c>)
 8002bea:	4680      	mov	r8, r0
 8002bec:	f7fe f80c 	bl	8000c08 <__aeabi_fmul>
 8002bf0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002bf4:	f7fd ff00 	bl	80009f8 <__addsf3>
 8002bf8:	f7fe f9cc 	bl	8000f94 <__aeabi_f2iz>
 8002bfc:	4606      	mov	r6, r0
 8002bfe:	f7fd ffaf 	bl	8000b60 <__aeabi_i2f>
 8002c02:	4968      	ldr	r1, [pc, #416]	; (8002da4 <__ieee754_rem_pio2f+0x284>)
 8002c04:	4682      	mov	sl, r0
 8002c06:	f7fd ffff 	bl	8000c08 <__aeabi_fmul>
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	4640      	mov	r0, r8
 8002c0e:	f7fd fef1 	bl	80009f4 <__aeabi_fsub>
 8002c12:	4966      	ldr	r1, [pc, #408]	; (8002dac <__ieee754_rem_pio2f+0x28c>)
 8002c14:	4680      	mov	r8, r0
 8002c16:	4650      	mov	r0, sl
 8002c18:	f7fd fff6 	bl	8000c08 <__aeabi_fmul>
 8002c1c:	2e1f      	cmp	r6, #31
 8002c1e:	4681      	mov	r9, r0
 8002c20:	dc0c      	bgt.n	8002c3c <__ieee754_rem_pio2f+0x11c>
 8002c22:	4a67      	ldr	r2, [pc, #412]	; (8002dc0 <__ieee754_rem_pio2f+0x2a0>)
 8002c24:	1e71      	subs	r1, r6, #1
 8002c26:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002c2a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <__ieee754_rem_pio2f+0x11c>
 8002c32:	4649      	mov	r1, r9
 8002c34:	4640      	mov	r0, r8
 8002c36:	f7fd fedd 	bl	80009f4 <__aeabi_fsub>
 8002c3a:	e009      	b.n	8002c50 <__ieee754_rem_pio2f+0x130>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	4640      	mov	r0, r8
 8002c40:	f7fd fed8 	bl	80009f4 <__aeabi_fsub>
 8002c44:	15ed      	asrs	r5, r5, #23
 8002c46:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002c4a:	1aeb      	subs	r3, r5, r3
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	dc01      	bgt.n	8002c54 <__ieee754_rem_pio2f+0x134>
 8002c50:	6020      	str	r0, [r4, #0]
 8002c52:	e024      	b.n	8002c9e <__ieee754_rem_pio2f+0x17e>
 8002c54:	4956      	ldr	r1, [pc, #344]	; (8002db0 <__ieee754_rem_pio2f+0x290>)
 8002c56:	4650      	mov	r0, sl
 8002c58:	f7fd ffd6 	bl	8000c08 <__aeabi_fmul>
 8002c5c:	4681      	mov	r9, r0
 8002c5e:	4601      	mov	r1, r0
 8002c60:	4640      	mov	r0, r8
 8002c62:	f7fd fec7 	bl	80009f4 <__aeabi_fsub>
 8002c66:	4601      	mov	r1, r0
 8002c68:	4683      	mov	fp, r0
 8002c6a:	4640      	mov	r0, r8
 8002c6c:	f7fd fec2 	bl	80009f4 <__aeabi_fsub>
 8002c70:	4649      	mov	r1, r9
 8002c72:	f7fd febf 	bl	80009f4 <__aeabi_fsub>
 8002c76:	4680      	mov	r8, r0
 8002c78:	494e      	ldr	r1, [pc, #312]	; (8002db4 <__ieee754_rem_pio2f+0x294>)
 8002c7a:	4650      	mov	r0, sl
 8002c7c:	f7fd ffc4 	bl	8000c08 <__aeabi_fmul>
 8002c80:	4641      	mov	r1, r8
 8002c82:	f7fd feb7 	bl	80009f4 <__aeabi_fsub>
 8002c86:	4601      	mov	r1, r0
 8002c88:	4681      	mov	r9, r0
 8002c8a:	4658      	mov	r0, fp
 8002c8c:	f7fd feb2 	bl	80009f4 <__aeabi_fsub>
 8002c90:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002c94:	1aed      	subs	r5, r5, r3
 8002c96:	2d19      	cmp	r5, #25
 8002c98:	dc15      	bgt.n	8002cc6 <__ieee754_rem_pio2f+0x1a6>
 8002c9a:	46d8      	mov	r8, fp
 8002c9c:	6020      	str	r0, [r4, #0]
 8002c9e:	6825      	ldr	r5, [r4, #0]
 8002ca0:	4640      	mov	r0, r8
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	f7fd fea6 	bl	80009f4 <__aeabi_fsub>
 8002ca8:	4649      	mov	r1, r9
 8002caa:	f7fd fea3 	bl	80009f4 <__aeabi_fsub>
 8002cae:	2f00      	cmp	r7, #0
 8002cb0:	6060      	str	r0, [r4, #4]
 8002cb2:	f6bf af5f 	bge.w	8002b74 <__ieee754_rem_pio2f+0x54>
 8002cb6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002cba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002cbe:	6025      	str	r5, [r4, #0]
 8002cc0:	6060      	str	r0, [r4, #4]
 8002cc2:	4276      	negs	r6, r6
 8002cc4:	e756      	b.n	8002b74 <__ieee754_rem_pio2f+0x54>
 8002cc6:	493f      	ldr	r1, [pc, #252]	; (8002dc4 <__ieee754_rem_pio2f+0x2a4>)
 8002cc8:	4650      	mov	r0, sl
 8002cca:	f7fd ff9d 	bl	8000c08 <__aeabi_fmul>
 8002cce:	4605      	mov	r5, r0
 8002cd0:	4601      	mov	r1, r0
 8002cd2:	4658      	mov	r0, fp
 8002cd4:	f7fd fe8e 	bl	80009f4 <__aeabi_fsub>
 8002cd8:	4601      	mov	r1, r0
 8002cda:	4680      	mov	r8, r0
 8002cdc:	4658      	mov	r0, fp
 8002cde:	f7fd fe89 	bl	80009f4 <__aeabi_fsub>
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	f7fd fe86 	bl	80009f4 <__aeabi_fsub>
 8002ce8:	4605      	mov	r5, r0
 8002cea:	4937      	ldr	r1, [pc, #220]	; (8002dc8 <__ieee754_rem_pio2f+0x2a8>)
 8002cec:	4650      	mov	r0, sl
 8002cee:	f7fd ff8b 	bl	8000c08 <__aeabi_fmul>
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	f7fd fe7e 	bl	80009f4 <__aeabi_fsub>
 8002cf8:	4681      	mov	r9, r0
 8002cfa:	e79a      	b.n	8002c32 <__ieee754_rem_pio2f+0x112>
 8002cfc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8002d00:	db05      	blt.n	8002d0e <__ieee754_rem_pio2f+0x1ee>
 8002d02:	4601      	mov	r1, r0
 8002d04:	f7fd fe76 	bl	80009f4 <__aeabi_fsub>
 8002d08:	6060      	str	r0, [r4, #4]
 8002d0a:	6020      	str	r0, [r4, #0]
 8002d0c:	e715      	b.n	8002b3a <__ieee754_rem_pio2f+0x1a>
 8002d0e:	15ee      	asrs	r6, r5, #23
 8002d10:	3e86      	subs	r6, #134	; 0x86
 8002d12:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8002d16:	4628      	mov	r0, r5
 8002d18:	f7fe f93c 	bl	8000f94 <__aeabi_f2iz>
 8002d1c:	f7fd ff20 	bl	8000b60 <__aeabi_i2f>
 8002d20:	4601      	mov	r1, r0
 8002d22:	9003      	str	r0, [sp, #12]
 8002d24:	4628      	mov	r0, r5
 8002d26:	f7fd fe65 	bl	80009f4 <__aeabi_fsub>
 8002d2a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8002d2e:	f7fd ff6b 	bl	8000c08 <__aeabi_fmul>
 8002d32:	4680      	mov	r8, r0
 8002d34:	f7fe f92e 	bl	8000f94 <__aeabi_f2iz>
 8002d38:	f7fd ff12 	bl	8000b60 <__aeabi_i2f>
 8002d3c:	4601      	mov	r1, r0
 8002d3e:	9004      	str	r0, [sp, #16]
 8002d40:	4605      	mov	r5, r0
 8002d42:	4640      	mov	r0, r8
 8002d44:	f7fd fe56 	bl	80009f4 <__aeabi_fsub>
 8002d48:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8002d4c:	f7fd ff5c 	bl	8000c08 <__aeabi_fmul>
 8002d50:	2100      	movs	r1, #0
 8002d52:	9005      	str	r0, [sp, #20]
 8002d54:	f7fe f8ec 	bl	8000f30 <__aeabi_fcmpeq>
 8002d58:	b1e8      	cbz	r0, 8002d96 <__ieee754_rem_pio2f+0x276>
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	f7fe f8e7 	bl	8000f30 <__aeabi_fcmpeq>
 8002d62:	2800      	cmp	r0, #0
 8002d64:	bf14      	ite	ne
 8002d66:	2301      	movne	r3, #1
 8002d68:	2302      	moveq	r3, #2
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <__ieee754_rem_pio2f+0x2ac>)
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	9201      	str	r2, [sp, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	a803      	add	r0, sp, #12
 8002d74:	9200      	str	r2, [sp, #0]
 8002d76:	4632      	mov	r2, r6
 8002d78:	f000 f8aa 	bl	8002ed0 <__kernel_rem_pio2f>
 8002d7c:	2f00      	cmp	r7, #0
 8002d7e:	4606      	mov	r6, r0
 8002d80:	f6bf aef8 	bge.w	8002b74 <__ieee754_rem_pio2f+0x54>
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002d8a:	6023      	str	r3, [r4, #0]
 8002d8c:	6863      	ldr	r3, [r4, #4]
 8002d8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002d92:	6063      	str	r3, [r4, #4]
 8002d94:	e795      	b.n	8002cc2 <__ieee754_rem_pio2f+0x1a2>
 8002d96:	2303      	movs	r3, #3
 8002d98:	e7e7      	b.n	8002d6a <__ieee754_rem_pio2f+0x24a>
 8002d9a:	bf00      	nop
 8002d9c:	3f490fd8 	.word	0x3f490fd8
 8002da0:	4016cbe3 	.word	0x4016cbe3
 8002da4:	3fc90f80 	.word	0x3fc90f80
 8002da8:	3fc90fd0 	.word	0x3fc90fd0
 8002dac:	37354443 	.word	0x37354443
 8002db0:	37354400 	.word	0x37354400
 8002db4:	2e85a308 	.word	0x2e85a308
 8002db8:	43490f80 	.word	0x43490f80
 8002dbc:	3f22f984 	.word	0x3f22f984
 8002dc0:	08003dac 	.word	0x08003dac
 8002dc4:	2e85a300 	.word	0x2e85a300
 8002dc8:	248d3132 	.word	0x248d3132
 8002dcc:	08003e2c 	.word	0x08003e2c

08002dd0 <__kernel_cosf>:
 8002dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8002dd8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8002ddc:	4606      	mov	r6, r0
 8002dde:	4688      	mov	r8, r1
 8002de0:	da03      	bge.n	8002dea <__kernel_cosf+0x1a>
 8002de2:	f7fe f8d7 	bl	8000f94 <__aeabi_f2iz>
 8002de6:	2800      	cmp	r0, #0
 8002de8:	d05c      	beq.n	8002ea4 <__kernel_cosf+0xd4>
 8002dea:	4631      	mov	r1, r6
 8002dec:	4630      	mov	r0, r6
 8002dee:	f7fd ff0b 	bl	8000c08 <__aeabi_fmul>
 8002df2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002df6:	4605      	mov	r5, r0
 8002df8:	f7fd ff06 	bl	8000c08 <__aeabi_fmul>
 8002dfc:	492b      	ldr	r1, [pc, #172]	; (8002eac <__kernel_cosf+0xdc>)
 8002dfe:	4607      	mov	r7, r0
 8002e00:	4628      	mov	r0, r5
 8002e02:	f7fd ff01 	bl	8000c08 <__aeabi_fmul>
 8002e06:	492a      	ldr	r1, [pc, #168]	; (8002eb0 <__kernel_cosf+0xe0>)
 8002e08:	f7fd fdf6 	bl	80009f8 <__addsf3>
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	f7fd fefb 	bl	8000c08 <__aeabi_fmul>
 8002e12:	4928      	ldr	r1, [pc, #160]	; (8002eb4 <__kernel_cosf+0xe4>)
 8002e14:	f7fd fdee 	bl	80009f4 <__aeabi_fsub>
 8002e18:	4629      	mov	r1, r5
 8002e1a:	f7fd fef5 	bl	8000c08 <__aeabi_fmul>
 8002e1e:	4926      	ldr	r1, [pc, #152]	; (8002eb8 <__kernel_cosf+0xe8>)
 8002e20:	f7fd fdea 	bl	80009f8 <__addsf3>
 8002e24:	4629      	mov	r1, r5
 8002e26:	f7fd feef 	bl	8000c08 <__aeabi_fmul>
 8002e2a:	4924      	ldr	r1, [pc, #144]	; (8002ebc <__kernel_cosf+0xec>)
 8002e2c:	f7fd fde2 	bl	80009f4 <__aeabi_fsub>
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd fee9 	bl	8000c08 <__aeabi_fmul>
 8002e36:	4922      	ldr	r1, [pc, #136]	; (8002ec0 <__kernel_cosf+0xf0>)
 8002e38:	f7fd fdde 	bl	80009f8 <__addsf3>
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	f7fd fee3 	bl	8000c08 <__aeabi_fmul>
 8002e42:	4629      	mov	r1, r5
 8002e44:	f7fd fee0 	bl	8000c08 <__aeabi_fmul>
 8002e48:	4641      	mov	r1, r8
 8002e4a:	4605      	mov	r5, r0
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	f7fd fedb 	bl	8000c08 <__aeabi_fmul>
 8002e52:	4601      	mov	r1, r0
 8002e54:	4628      	mov	r0, r5
 8002e56:	f7fd fdcd 	bl	80009f4 <__aeabi_fsub>
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <__kernel_cosf+0xf4>)
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	dc0a      	bgt.n	8002e78 <__kernel_cosf+0xa8>
 8002e62:	4601      	mov	r1, r0
 8002e64:	4638      	mov	r0, r7
 8002e66:	f7fd fdc5 	bl	80009f4 <__aeabi_fsub>
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002e70:	f7fd fdc0 	bl	80009f4 <__aeabi_fsub>
 8002e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <__kernel_cosf+0xf8>)
 8002e7a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002e7e:	429c      	cmp	r4, r3
 8002e80:	bfcc      	ite	gt
 8002e82:	4c12      	ldrgt	r4, [pc, #72]	; (8002ecc <__kernel_cosf+0xfc>)
 8002e84:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8002e88:	4621      	mov	r1, r4
 8002e8a:	f7fd fdb3 	bl	80009f4 <__aeabi_fsub>
 8002e8e:	4621      	mov	r1, r4
 8002e90:	4606      	mov	r6, r0
 8002e92:	4638      	mov	r0, r7
 8002e94:	f7fd fdae 	bl	80009f4 <__aeabi_fsub>
 8002e98:	4629      	mov	r1, r5
 8002e9a:	f7fd fdab 	bl	80009f4 <__aeabi_fsub>
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	e7e5      	b.n	8002e70 <__kernel_cosf+0xa0>
 8002ea4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002ea8:	e7e4      	b.n	8002e74 <__kernel_cosf+0xa4>
 8002eaa:	bf00      	nop
 8002eac:	ad47d74e 	.word	0xad47d74e
 8002eb0:	310f74f6 	.word	0x310f74f6
 8002eb4:	3493f27c 	.word	0x3493f27c
 8002eb8:	37d00d01 	.word	0x37d00d01
 8002ebc:	3ab60b61 	.word	0x3ab60b61
 8002ec0:	3d2aaaab 	.word	0x3d2aaaab
 8002ec4:	3e999999 	.word	0x3e999999
 8002ec8:	3f480000 	.word	0x3f480000
 8002ecc:	3e900000 	.word	0x3e900000

08002ed0 <__kernel_rem_pio2f>:
 8002ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed4:	b0d9      	sub	sp, #356	; 0x164
 8002ed6:	9304      	str	r3, [sp, #16]
 8002ed8:	9101      	str	r1, [sp, #4]
 8002eda:	4bc3      	ldr	r3, [pc, #780]	; (80031e8 <__kernel_rem_pio2f+0x318>)
 8002edc:	9962      	ldr	r1, [sp, #392]	; 0x188
 8002ede:	1ed4      	subs	r4, r2, #3
 8002ee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ee4:	2500      	movs	r5, #0
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	9b04      	ldr	r3, [sp, #16]
 8002eea:	f04f 0a00 	mov.w	sl, #0
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	9303      	str	r3, [sp, #12]
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	fb94 f4f3 	sdiv	r4, r4, r3
 8002ef8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8002efc:	1c66      	adds	r6, r4, #1
 8002efe:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8002f02:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8002f06:	eb03 0802 	add.w	r8, r3, r2
 8002f0a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8002f0c:	1aa7      	subs	r7, r4, r2
 8002f0e:	9005      	str	r0, [sp, #20]
 8002f10:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002f14:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8002f18:	4545      	cmp	r5, r8
 8002f1a:	dd7f      	ble.n	800301c <__kernel_rem_pio2f+0x14c>
 8002f1c:	f04f 0800 	mov.w	r8, #0
 8002f20:	f04f 0a00 	mov.w	sl, #0
 8002f24:	f06f 0b03 	mvn.w	fp, #3
 8002f28:	9b04      	ldr	r3, [sp, #16]
 8002f2a:	aa1c      	add	r2, sp, #112	; 0x70
 8002f2c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8002f30:	ab44      	add	r3, sp, #272	; 0x110
 8002f32:	9a02      	ldr	r2, [sp, #8]
 8002f34:	4590      	cmp	r8, r2
 8002f36:	f340 8097 	ble.w	8003068 <__kernel_rem_pio2f+0x198>
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	aa08      	add	r2, sp, #32
 8002f3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002f42:	9307      	str	r3, [sp, #28]
 8002f44:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8002f46:	9f02      	ldr	r7, [sp, #8]
 8002f48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002f4c:	9306      	str	r3, [sp, #24]
 8002f4e:	46ba      	mov	sl, r7
 8002f50:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8002f54:	ab58      	add	r3, sp, #352	; 0x160
 8002f56:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002f5a:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8002f5e:	ad07      	add	r5, sp, #28
 8002f60:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8002f64:	f1ba 0f00 	cmp.w	sl, #0
 8002f68:	f300 8081 	bgt.w	800306e <__kernel_rem_pio2f+0x19e>
 8002f6c:	4631      	mov	r1, r6
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f000 fb06 	bl	8003580 <scalbnf>
 8002f74:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8002f78:	4604      	mov	r4, r0
 8002f7a:	f7fd fe45 	bl	8000c08 <__aeabi_fmul>
 8002f7e:	f000 fabf 	bl	8003500 <floorf>
 8002f82:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002f86:	f7fd fe3f 	bl	8000c08 <__aeabi_fmul>
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7fd fd31 	bl	80009f4 <__aeabi_fsub>
 8002f92:	4604      	mov	r4, r0
 8002f94:	f7fd fffe 	bl	8000f94 <__aeabi_f2iz>
 8002f98:	4681      	mov	r9, r0
 8002f9a:	f7fd fde1 	bl	8000b60 <__aeabi_i2f>
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7fd fd27 	bl	80009f4 <__aeabi_fsub>
 8002fa6:	2e00      	cmp	r6, #0
 8002fa8:	4604      	mov	r4, r0
 8002faa:	dd7e      	ble.n	80030aa <__kernel_rem_pio2f+0x1da>
 8002fac:	1e7b      	subs	r3, r7, #1
 8002fae:	aa08      	add	r2, sp, #32
 8002fb0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8002fb4:	f1c6 0208 	rsb	r2, r6, #8
 8002fb8:	fa45 f002 	asr.w	r0, r5, r2
 8002fbc:	4481      	add	r9, r0
 8002fbe:	4090      	lsls	r0, r2
 8002fc0:	1a2d      	subs	r5, r5, r0
 8002fc2:	aa08      	add	r2, sp, #32
 8002fc4:	f1c6 0007 	rsb	r0, r6, #7
 8002fc8:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8002fcc:	4105      	asrs	r5, r0
 8002fce:	2d00      	cmp	r5, #0
 8002fd0:	dd79      	ble.n	80030c6 <__kernel_rem_pio2f+0x1f6>
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	4690      	mov	r8, r2
 8002fd6:	f109 0901 	add.w	r9, r9, #1
 8002fda:	4297      	cmp	r7, r2
 8002fdc:	f300 80ae 	bgt.w	800313c <__kernel_rem_pio2f+0x26c>
 8002fe0:	2e00      	cmp	r6, #0
 8002fe2:	dd05      	ble.n	8002ff0 <__kernel_rem_pio2f+0x120>
 8002fe4:	2e01      	cmp	r6, #1
 8002fe6:	f000 80c0 	beq.w	800316a <__kernel_rem_pio2f+0x29a>
 8002fea:	2e02      	cmp	r6, #2
 8002fec:	f000 80c7 	beq.w	800317e <__kernel_rem_pio2f+0x2ae>
 8002ff0:	2d02      	cmp	r5, #2
 8002ff2:	d168      	bne.n	80030c6 <__kernel_rem_pio2f+0x1f6>
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002ffa:	f7fd fcfb 	bl	80009f4 <__aeabi_fsub>
 8002ffe:	4604      	mov	r4, r0
 8003000:	f1b8 0f00 	cmp.w	r8, #0
 8003004:	d05f      	beq.n	80030c6 <__kernel_rem_pio2f+0x1f6>
 8003006:	4631      	mov	r1, r6
 8003008:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800300c:	f000 fab8 	bl	8003580 <scalbnf>
 8003010:	4601      	mov	r1, r0
 8003012:	4620      	mov	r0, r4
 8003014:	f7fd fcee 	bl	80009f4 <__aeabi_fsub>
 8003018:	4604      	mov	r4, r0
 800301a:	e054      	b.n	80030c6 <__kernel_rem_pio2f+0x1f6>
 800301c:	42ef      	cmn	r7, r5
 800301e:	d407      	bmi.n	8003030 <__kernel_rem_pio2f+0x160>
 8003020:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003024:	f7fd fd9c 	bl	8000b60 <__aeabi_i2f>
 8003028:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800302c:	3501      	adds	r5, #1
 800302e:	e773      	b.n	8002f18 <__kernel_rem_pio2f+0x48>
 8003030:	4650      	mov	r0, sl
 8003032:	e7f9      	b.n	8003028 <__kernel_rem_pio2f+0x158>
 8003034:	fb0b 5207 	mla	r2, fp, r7, r5
 8003038:	9306      	str	r3, [sp, #24]
 800303a:	9b05      	ldr	r3, [sp, #20]
 800303c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8003040:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8003044:	f7fd fde0 	bl	8000c08 <__aeabi_fmul>
 8003048:	4601      	mov	r1, r0
 800304a:	4648      	mov	r0, r9
 800304c:	f7fd fcd4 	bl	80009f8 <__addsf3>
 8003050:	4681      	mov	r9, r0
 8003052:	9b06      	ldr	r3, [sp, #24]
 8003054:	3701      	adds	r7, #1
 8003056:	9a03      	ldr	r2, [sp, #12]
 8003058:	4297      	cmp	r7, r2
 800305a:	ddeb      	ble.n	8003034 <__kernel_rem_pio2f+0x164>
 800305c:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 8003060:	3504      	adds	r5, #4
 8003062:	f108 0801 	add.w	r8, r8, #1
 8003066:	e764      	b.n	8002f32 <__kernel_rem_pio2f+0x62>
 8003068:	46d1      	mov	r9, sl
 800306a:	2700      	movs	r7, #0
 800306c:	e7f3      	b.n	8003056 <__kernel_rem_pio2f+0x186>
 800306e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8003072:	4620      	mov	r0, r4
 8003074:	f7fd fdc8 	bl	8000c08 <__aeabi_fmul>
 8003078:	f7fd ff8c 	bl	8000f94 <__aeabi_f2iz>
 800307c:	f7fd fd70 	bl	8000b60 <__aeabi_i2f>
 8003080:	4641      	mov	r1, r8
 8003082:	4683      	mov	fp, r0
 8003084:	f7fd fdc0 	bl	8000c08 <__aeabi_fmul>
 8003088:	4601      	mov	r1, r0
 800308a:	4620      	mov	r0, r4
 800308c:	f7fd fcb2 	bl	80009f4 <__aeabi_fsub>
 8003090:	f7fd ff80 	bl	8000f94 <__aeabi_f2iz>
 8003094:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003098:	f845 0f04 	str.w	r0, [r5, #4]!
 800309c:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 80030a0:	4658      	mov	r0, fp
 80030a2:	f7fd fca9 	bl	80009f8 <__addsf3>
 80030a6:	4604      	mov	r4, r0
 80030a8:	e75c      	b.n	8002f64 <__kernel_rem_pio2f+0x94>
 80030aa:	d105      	bne.n	80030b8 <__kernel_rem_pio2f+0x1e8>
 80030ac:	1e7b      	subs	r3, r7, #1
 80030ae:	aa08      	add	r2, sp, #32
 80030b0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80030b4:	122d      	asrs	r5, r5, #8
 80030b6:	e78a      	b.n	8002fce <__kernel_rem_pio2f+0xfe>
 80030b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80030bc:	f7fd ff56 	bl	8000f6c <__aeabi_fcmpge>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d139      	bne.n	8003138 <__kernel_rem_pio2f+0x268>
 80030c4:	4605      	mov	r5, r0
 80030c6:	2100      	movs	r1, #0
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7fd ff31 	bl	8000f30 <__aeabi_fcmpeq>
 80030ce:	2800      	cmp	r0, #0
 80030d0:	f000 80a0 	beq.w	8003214 <__kernel_rem_pio2f+0x344>
 80030d4:	1e7c      	subs	r4, r7, #1
 80030d6:	4623      	mov	r3, r4
 80030d8:	2200      	movs	r2, #0
 80030da:	9902      	ldr	r1, [sp, #8]
 80030dc:	428b      	cmp	r3, r1
 80030de:	da55      	bge.n	800318c <__kernel_rem_pio2f+0x2bc>
 80030e0:	2a00      	cmp	r2, #0
 80030e2:	d07e      	beq.n	80031e2 <__kernel_rem_pio2f+0x312>
 80030e4:	ab08      	add	r3, sp, #32
 80030e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80030ea:	3e08      	subs	r6, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 808f 	beq.w	8003210 <__kernel_rem_pio2f+0x340>
 80030f2:	4631      	mov	r1, r6
 80030f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80030f8:	f000 fa42 	bl	8003580 <scalbnf>
 80030fc:	46a0      	mov	r8, r4
 80030fe:	4682      	mov	sl, r0
 8003100:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8003104:	af44      	add	r7, sp, #272	; 0x110
 8003106:	f1b8 0f00 	cmp.w	r8, #0
 800310a:	f280 80b5 	bge.w	8003278 <__kernel_rem_pio2f+0x3a8>
 800310e:	f04f 0a00 	mov.w	sl, #0
 8003112:	2300      	movs	r3, #0
 8003114:	00a6      	lsls	r6, r4, #2
 8003116:	4a35      	ldr	r2, [pc, #212]	; (80031ec <__kernel_rem_pio2f+0x31c>)
 8003118:	4437      	add	r7, r6
 800311a:	eba4 010a 	sub.w	r1, r4, sl
 800311e:	2900      	cmp	r1, #0
 8003120:	f280 80db 	bge.w	80032da <__kernel_rem_pio2f+0x40a>
 8003124:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8003126:	2b03      	cmp	r3, #3
 8003128:	f200 80ff 	bhi.w	800332a <__kernel_rem_pio2f+0x45a>
 800312c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003130:	01200102 	.word	0x01200102
 8003134:	00d90120 	.word	0x00d90120
 8003138:	2502      	movs	r5, #2
 800313a:	e74a      	b.n	8002fd2 <__kernel_rem_pio2f+0x102>
 800313c:	ab08      	add	r3, sp, #32
 800313e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003142:	f1b8 0f00 	cmp.w	r8, #0
 8003146:	d109      	bne.n	800315c <__kernel_rem_pio2f+0x28c>
 8003148:	b12b      	cbz	r3, 8003156 <__kernel_rem_pio2f+0x286>
 800314a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800314e:	a908      	add	r1, sp, #32
 8003150:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003154:	2301      	movs	r3, #1
 8003156:	3201      	adds	r2, #1
 8003158:	4698      	mov	r8, r3
 800315a:	e73e      	b.n	8002fda <__kernel_rem_pio2f+0x10a>
 800315c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003160:	a908      	add	r1, sp, #32
 8003162:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003166:	4643      	mov	r3, r8
 8003168:	e7f5      	b.n	8003156 <__kernel_rem_pio2f+0x286>
 800316a:	1e7a      	subs	r2, r7, #1
 800316c:	ab08      	add	r3, sp, #32
 800316e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003176:	a908      	add	r1, sp, #32
 8003178:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800317c:	e738      	b.n	8002ff0 <__kernel_rem_pio2f+0x120>
 800317e:	1e7a      	subs	r2, r7, #1
 8003180:	ab08      	add	r3, sp, #32
 8003182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003186:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800318a:	e7f4      	b.n	8003176 <__kernel_rem_pio2f+0x2a6>
 800318c:	a908      	add	r1, sp, #32
 800318e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003192:	3b01      	subs	r3, #1
 8003194:	430a      	orrs	r2, r1
 8003196:	e7a0      	b.n	80030da <__kernel_rem_pio2f+0x20a>
 8003198:	3301      	adds	r3, #1
 800319a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800319e:	2900      	cmp	r1, #0
 80031a0:	d0fa      	beq.n	8003198 <__kernel_rem_pio2f+0x2c8>
 80031a2:	f06f 0803 	mvn.w	r8, #3
 80031a6:	9a04      	ldr	r2, [sp, #16]
 80031a8:	1c7d      	adds	r5, r7, #1
 80031aa:	18bc      	adds	r4, r7, r2
 80031ac:	aa1c      	add	r2, sp, #112	; 0x70
 80031ae:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80031b2:	441f      	add	r7, r3
 80031b4:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80031b8:	42af      	cmp	r7, r5
 80031ba:	f6ff aec8 	blt.w	8002f4e <__kernel_rem_pio2f+0x7e>
 80031be:	9b06      	ldr	r3, [sp, #24]
 80031c0:	f04f 0a00 	mov.w	sl, #0
 80031c4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80031c8:	f7fd fcca 	bl	8000b60 <__aeabi_i2f>
 80031cc:	f04f 0b00 	mov.w	fp, #0
 80031d0:	6020      	str	r0, [r4, #0]
 80031d2:	9b03      	ldr	r3, [sp, #12]
 80031d4:	459a      	cmp	sl, r3
 80031d6:	dd0b      	ble.n	80031f0 <__kernel_rem_pio2f+0x320>
 80031d8:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 80031dc:	3404      	adds	r4, #4
 80031de:	3501      	adds	r5, #1
 80031e0:	e7ea      	b.n	80031b8 <__kernel_rem_pio2f+0x2e8>
 80031e2:	9a07      	ldr	r2, [sp, #28]
 80031e4:	2301      	movs	r3, #1
 80031e6:	e7d8      	b.n	800319a <__kernel_rem_pio2f+0x2ca>
 80031e8:	08004170 	.word	0x08004170
 80031ec:	08004144 	.word	0x08004144
 80031f0:	fb08 f30a 	mul.w	r3, r8, sl
 80031f4:	9a05      	ldr	r2, [sp, #20]
 80031f6:	58e0      	ldr	r0, [r4, r3]
 80031f8:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 80031fc:	f7fd fd04 	bl	8000c08 <__aeabi_fmul>
 8003200:	4601      	mov	r1, r0
 8003202:	4658      	mov	r0, fp
 8003204:	f7fd fbf8 	bl	80009f8 <__addsf3>
 8003208:	f10a 0a01 	add.w	sl, sl, #1
 800320c:	4683      	mov	fp, r0
 800320e:	e7e0      	b.n	80031d2 <__kernel_rem_pio2f+0x302>
 8003210:	3c01      	subs	r4, #1
 8003212:	e767      	b.n	80030e4 <__kernel_rem_pio2f+0x214>
 8003214:	4271      	negs	r1, r6
 8003216:	4620      	mov	r0, r4
 8003218:	f000 f9b2 	bl	8003580 <scalbnf>
 800321c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003220:	4604      	mov	r4, r0
 8003222:	f7fd fea3 	bl	8000f6c <__aeabi_fcmpge>
 8003226:	b1f8      	cbz	r0, 8003268 <__kernel_rem_pio2f+0x398>
 8003228:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800322c:	4620      	mov	r0, r4
 800322e:	f7fd fceb 	bl	8000c08 <__aeabi_fmul>
 8003232:	f7fd feaf 	bl	8000f94 <__aeabi_f2iz>
 8003236:	f7fd fc93 	bl	8000b60 <__aeabi_i2f>
 800323a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800323e:	4680      	mov	r8, r0
 8003240:	f7fd fce2 	bl	8000c08 <__aeabi_fmul>
 8003244:	4601      	mov	r1, r0
 8003246:	4620      	mov	r0, r4
 8003248:	f7fd fbd4 	bl	80009f4 <__aeabi_fsub>
 800324c:	f7fd fea2 	bl	8000f94 <__aeabi_f2iz>
 8003250:	ab08      	add	r3, sp, #32
 8003252:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003256:	4640      	mov	r0, r8
 8003258:	f7fd fe9c 	bl	8000f94 <__aeabi_f2iz>
 800325c:	1c7c      	adds	r4, r7, #1
 800325e:	ab08      	add	r3, sp, #32
 8003260:	3608      	adds	r6, #8
 8003262:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003266:	e744      	b.n	80030f2 <__kernel_rem_pio2f+0x222>
 8003268:	4620      	mov	r0, r4
 800326a:	f7fd fe93 	bl	8000f94 <__aeabi_f2iz>
 800326e:	ab08      	add	r3, sp, #32
 8003270:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003274:	463c      	mov	r4, r7
 8003276:	e73c      	b.n	80030f2 <__kernel_rem_pio2f+0x222>
 8003278:	ab08      	add	r3, sp, #32
 800327a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800327e:	f7fd fc6f 	bl	8000b60 <__aeabi_i2f>
 8003282:	4651      	mov	r1, sl
 8003284:	f7fd fcc0 	bl	8000c08 <__aeabi_fmul>
 8003288:	4631      	mov	r1, r6
 800328a:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800328e:	4650      	mov	r0, sl
 8003290:	f7fd fcba 	bl	8000c08 <__aeabi_fmul>
 8003294:	f108 38ff 	add.w	r8, r8, #4294967295
 8003298:	4682      	mov	sl, r0
 800329a:	e734      	b.n	8003106 <__kernel_rem_pio2f+0x236>
 800329c:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 80032a0:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80032a4:	9304      	str	r3, [sp, #16]
 80032a6:	9203      	str	r2, [sp, #12]
 80032a8:	f7fd fcae 	bl	8000c08 <__aeabi_fmul>
 80032ac:	4601      	mov	r1, r0
 80032ae:	4658      	mov	r0, fp
 80032b0:	f7fd fba2 	bl	80009f8 <__addsf3>
 80032b4:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80032b8:	4683      	mov	fp, r0
 80032ba:	f108 0801 	add.w	r8, r8, #1
 80032be:	9902      	ldr	r1, [sp, #8]
 80032c0:	4588      	cmp	r8, r1
 80032c2:	dc01      	bgt.n	80032c8 <__kernel_rem_pio2f+0x3f8>
 80032c4:	45c2      	cmp	sl, r8
 80032c6:	dae9      	bge.n	800329c <__kernel_rem_pio2f+0x3cc>
 80032c8:	a958      	add	r1, sp, #352	; 0x160
 80032ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80032ce:	f841 bca0 	str.w	fp, [r1, #-160]
 80032d2:	f10a 0a01 	add.w	sl, sl, #1
 80032d6:	3f04      	subs	r7, #4
 80032d8:	e71f      	b.n	800311a <__kernel_rem_pio2f+0x24a>
 80032da:	469b      	mov	fp, r3
 80032dc:	f04f 0800 	mov.w	r8, #0
 80032e0:	e7ed      	b.n	80032be <__kernel_rem_pio2f+0x3ee>
 80032e2:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 80032e6:	4456      	add	r6, sl
 80032e8:	4637      	mov	r7, r6
 80032ea:	46a0      	mov	r8, r4
 80032ec:	f1b8 0f00 	cmp.w	r8, #0
 80032f0:	dc4a      	bgt.n	8003388 <__kernel_rem_pio2f+0x4b8>
 80032f2:	4627      	mov	r7, r4
 80032f4:	2f01      	cmp	r7, #1
 80032f6:	dc60      	bgt.n	80033ba <__kernel_rem_pio2f+0x4ea>
 80032f8:	2000      	movs	r0, #0
 80032fa:	2c01      	cmp	r4, #1
 80032fc:	dc74      	bgt.n	80033e8 <__kernel_rem_pio2f+0x518>
 80032fe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8003300:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8003302:	2d00      	cmp	r5, #0
 8003304:	d176      	bne.n	80033f4 <__kernel_rem_pio2f+0x524>
 8003306:	9901      	ldr	r1, [sp, #4]
 8003308:	600a      	str	r2, [r1, #0]
 800330a:	460a      	mov	r2, r1
 800330c:	604b      	str	r3, [r1, #4]
 800330e:	6090      	str	r0, [r2, #8]
 8003310:	e00b      	b.n	800332a <__kernel_rem_pio2f+0x45a>
 8003312:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8003316:	f7fd fb6f 	bl	80009f8 <__addsf3>
 800331a:	3c01      	subs	r4, #1
 800331c:	2c00      	cmp	r4, #0
 800331e:	daf8      	bge.n	8003312 <__kernel_rem_pio2f+0x442>
 8003320:	b10d      	cbz	r5, 8003326 <__kernel_rem_pio2f+0x456>
 8003322:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003326:	9b01      	ldr	r3, [sp, #4]
 8003328:	6018      	str	r0, [r3, #0]
 800332a:	f009 0007 	and.w	r0, r9, #7
 800332e:	b059      	add	sp, #356	; 0x164
 8003330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003334:	2000      	movs	r0, #0
 8003336:	ae30      	add	r6, sp, #192	; 0xc0
 8003338:	e7f0      	b.n	800331c <__kernel_rem_pio2f+0x44c>
 800333a:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800333e:	f7fd fb5b 	bl	80009f8 <__addsf3>
 8003342:	3e01      	subs	r6, #1
 8003344:	2e00      	cmp	r6, #0
 8003346:	daf8      	bge.n	800333a <__kernel_rem_pio2f+0x46a>
 8003348:	b1b5      	cbz	r5, 8003378 <__kernel_rem_pio2f+0x4a8>
 800334a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800334e:	9a01      	ldr	r2, [sp, #4]
 8003350:	af58      	add	r7, sp, #352	; 0x160
 8003352:	4601      	mov	r1, r0
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800335a:	f7fd fb4b 	bl	80009f4 <__aeabi_fsub>
 800335e:	2601      	movs	r6, #1
 8003360:	42b4      	cmp	r4, r6
 8003362:	da0b      	bge.n	800337c <__kernel_rem_pio2f+0x4ac>
 8003364:	b10d      	cbz	r5, 800336a <__kernel_rem_pio2f+0x49a>
 8003366:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800336a:	9b01      	ldr	r3, [sp, #4]
 800336c:	6058      	str	r0, [r3, #4]
 800336e:	e7dc      	b.n	800332a <__kernel_rem_pio2f+0x45a>
 8003370:	4626      	mov	r6, r4
 8003372:	2000      	movs	r0, #0
 8003374:	af30      	add	r7, sp, #192	; 0xc0
 8003376:	e7e5      	b.n	8003344 <__kernel_rem_pio2f+0x474>
 8003378:	4603      	mov	r3, r0
 800337a:	e7e8      	b.n	800334e <__kernel_rem_pio2f+0x47e>
 800337c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8003380:	f7fd fb3a 	bl	80009f8 <__addsf3>
 8003384:	3601      	adds	r6, #1
 8003386:	e7eb      	b.n	8003360 <__kernel_rem_pio2f+0x490>
 8003388:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 800338c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	9303      	str	r3, [sp, #12]
 8003398:	9202      	str	r2, [sp, #8]
 800339a:	f7fd fb2d 	bl	80009f8 <__addsf3>
 800339e:	9a02      	ldr	r2, [sp, #8]
 80033a0:	4601      	mov	r1, r0
 80033a2:	4683      	mov	fp, r0
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7fd fb25 	bl	80009f4 <__aeabi_fsub>
 80033aa:	9b03      	ldr	r3, [sp, #12]
 80033ac:	4619      	mov	r1, r3
 80033ae:	f7fd fb23 	bl	80009f8 <__addsf3>
 80033b2:	f8c7 b000 	str.w	fp, [r7]
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	e798      	b.n	80032ec <__kernel_rem_pio2f+0x41c>
 80033ba:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 80033be:	3f01      	subs	r7, #1
 80033c0:	f8d6 b004 	ldr.w	fp, [r6, #4]
 80033c4:	4618      	mov	r0, r3
 80033c6:	4659      	mov	r1, fp
 80033c8:	9302      	str	r3, [sp, #8]
 80033ca:	f7fd fb15 	bl	80009f8 <__addsf3>
 80033ce:	9b02      	ldr	r3, [sp, #8]
 80033d0:	4601      	mov	r1, r0
 80033d2:	4680      	mov	r8, r0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd fb0d 	bl	80009f4 <__aeabi_fsub>
 80033da:	4659      	mov	r1, fp
 80033dc:	f7fd fb0c 	bl	80009f8 <__addsf3>
 80033e0:	f8c6 8000 	str.w	r8, [r6]
 80033e4:	6070      	str	r0, [r6, #4]
 80033e6:	e785      	b.n	80032f4 <__kernel_rem_pio2f+0x424>
 80033e8:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 80033ec:	f7fd fb04 	bl	80009f8 <__addsf3>
 80033f0:	3c01      	subs	r4, #1
 80033f2:	e782      	b.n	80032fa <__kernel_rem_pio2f+0x42a>
 80033f4:	9901      	ldr	r1, [sp, #4]
 80033f6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80033fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80033fe:	600a      	str	r2, [r1, #0]
 8003400:	604b      	str	r3, [r1, #4]
 8003402:	460a      	mov	r2, r1
 8003404:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003408:	e781      	b.n	800330e <__kernel_rem_pio2f+0x43e>
 800340a:	bf00      	nop

0800340c <__kernel_sinf>:
 800340c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003410:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003414:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003418:	4604      	mov	r4, r0
 800341a:	460f      	mov	r7, r1
 800341c:	4691      	mov	r9, r2
 800341e:	da03      	bge.n	8003428 <__kernel_sinf+0x1c>
 8003420:	f7fd fdb8 	bl	8000f94 <__aeabi_f2iz>
 8003424:	2800      	cmp	r0, #0
 8003426:	d035      	beq.n	8003494 <__kernel_sinf+0x88>
 8003428:	4621      	mov	r1, r4
 800342a:	4620      	mov	r0, r4
 800342c:	f7fd fbec 	bl	8000c08 <__aeabi_fmul>
 8003430:	4605      	mov	r5, r0
 8003432:	4601      	mov	r1, r0
 8003434:	4620      	mov	r0, r4
 8003436:	f7fd fbe7 	bl	8000c08 <__aeabi_fmul>
 800343a:	4929      	ldr	r1, [pc, #164]	; (80034e0 <__kernel_sinf+0xd4>)
 800343c:	4606      	mov	r6, r0
 800343e:	4628      	mov	r0, r5
 8003440:	f7fd fbe2 	bl	8000c08 <__aeabi_fmul>
 8003444:	4927      	ldr	r1, [pc, #156]	; (80034e4 <__kernel_sinf+0xd8>)
 8003446:	f7fd fad5 	bl	80009f4 <__aeabi_fsub>
 800344a:	4629      	mov	r1, r5
 800344c:	f7fd fbdc 	bl	8000c08 <__aeabi_fmul>
 8003450:	4925      	ldr	r1, [pc, #148]	; (80034e8 <__kernel_sinf+0xdc>)
 8003452:	f7fd fad1 	bl	80009f8 <__addsf3>
 8003456:	4629      	mov	r1, r5
 8003458:	f7fd fbd6 	bl	8000c08 <__aeabi_fmul>
 800345c:	4923      	ldr	r1, [pc, #140]	; (80034ec <__kernel_sinf+0xe0>)
 800345e:	f7fd fac9 	bl	80009f4 <__aeabi_fsub>
 8003462:	4629      	mov	r1, r5
 8003464:	f7fd fbd0 	bl	8000c08 <__aeabi_fmul>
 8003468:	4921      	ldr	r1, [pc, #132]	; (80034f0 <__kernel_sinf+0xe4>)
 800346a:	f7fd fac5 	bl	80009f8 <__addsf3>
 800346e:	4680      	mov	r8, r0
 8003470:	f1b9 0f00 	cmp.w	r9, #0
 8003474:	d111      	bne.n	800349a <__kernel_sinf+0x8e>
 8003476:	4601      	mov	r1, r0
 8003478:	4628      	mov	r0, r5
 800347a:	f7fd fbc5 	bl	8000c08 <__aeabi_fmul>
 800347e:	491d      	ldr	r1, [pc, #116]	; (80034f4 <__kernel_sinf+0xe8>)
 8003480:	f7fd fab8 	bl	80009f4 <__aeabi_fsub>
 8003484:	4631      	mov	r1, r6
 8003486:	f7fd fbbf 	bl	8000c08 <__aeabi_fmul>
 800348a:	4601      	mov	r1, r0
 800348c:	4620      	mov	r0, r4
 800348e:	f7fd fab3 	bl	80009f8 <__addsf3>
 8003492:	4604      	mov	r4, r0
 8003494:	4620      	mov	r0, r4
 8003496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800349a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800349e:	4638      	mov	r0, r7
 80034a0:	f7fd fbb2 	bl	8000c08 <__aeabi_fmul>
 80034a4:	4641      	mov	r1, r8
 80034a6:	4681      	mov	r9, r0
 80034a8:	4630      	mov	r0, r6
 80034aa:	f7fd fbad 	bl	8000c08 <__aeabi_fmul>
 80034ae:	4601      	mov	r1, r0
 80034b0:	4648      	mov	r0, r9
 80034b2:	f7fd fa9f 	bl	80009f4 <__aeabi_fsub>
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fd fba6 	bl	8000c08 <__aeabi_fmul>
 80034bc:	4639      	mov	r1, r7
 80034be:	f7fd fa99 	bl	80009f4 <__aeabi_fsub>
 80034c2:	490c      	ldr	r1, [pc, #48]	; (80034f4 <__kernel_sinf+0xe8>)
 80034c4:	4605      	mov	r5, r0
 80034c6:	4630      	mov	r0, r6
 80034c8:	f7fd fb9e 	bl	8000c08 <__aeabi_fmul>
 80034cc:	4601      	mov	r1, r0
 80034ce:	4628      	mov	r0, r5
 80034d0:	f7fd fa92 	bl	80009f8 <__addsf3>
 80034d4:	4601      	mov	r1, r0
 80034d6:	4620      	mov	r0, r4
 80034d8:	f7fd fa8c 	bl	80009f4 <__aeabi_fsub>
 80034dc:	e7d9      	b.n	8003492 <__kernel_sinf+0x86>
 80034de:	bf00      	nop
 80034e0:	2f2ec9d3 	.word	0x2f2ec9d3
 80034e4:	32d72f34 	.word	0x32d72f34
 80034e8:	3638ef1b 	.word	0x3638ef1b
 80034ec:	39500d01 	.word	0x39500d01
 80034f0:	3c088889 	.word	0x3c088889
 80034f4:	3e2aaaab 	.word	0x3e2aaaab

080034f8 <fabsf>:
 80034f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80034fc:	4770      	bx	lr
	...

08003500 <floorf>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003506:	0df5      	lsrs	r5, r6, #23
 8003508:	3d7f      	subs	r5, #127	; 0x7f
 800350a:	2d16      	cmp	r5, #22
 800350c:	4601      	mov	r1, r0
 800350e:	4604      	mov	r4, r0
 8003510:	dc26      	bgt.n	8003560 <floorf+0x60>
 8003512:	2d00      	cmp	r5, #0
 8003514:	da0e      	bge.n	8003534 <floorf+0x34>
 8003516:	4917      	ldr	r1, [pc, #92]	; (8003574 <floorf+0x74>)
 8003518:	f7fd fa6e 	bl	80009f8 <__addsf3>
 800351c:	2100      	movs	r1, #0
 800351e:	f7fd fd2f 	bl	8000f80 <__aeabi_fcmpgt>
 8003522:	b128      	cbz	r0, 8003530 <floorf+0x30>
 8003524:	2c00      	cmp	r4, #0
 8003526:	da23      	bge.n	8003570 <floorf+0x70>
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <floorf+0x78>)
 800352a:	2e00      	cmp	r6, #0
 800352c:	bf18      	it	ne
 800352e:	461c      	movne	r4, r3
 8003530:	4621      	mov	r1, r4
 8003532:	e01b      	b.n	800356c <floorf+0x6c>
 8003534:	4e11      	ldr	r6, [pc, #68]	; (800357c <floorf+0x7c>)
 8003536:	412e      	asrs	r6, r5
 8003538:	4230      	tst	r0, r6
 800353a:	d017      	beq.n	800356c <floorf+0x6c>
 800353c:	490d      	ldr	r1, [pc, #52]	; (8003574 <floorf+0x74>)
 800353e:	f7fd fa5b 	bl	80009f8 <__addsf3>
 8003542:	2100      	movs	r1, #0
 8003544:	f7fd fd1c 	bl	8000f80 <__aeabi_fcmpgt>
 8003548:	2800      	cmp	r0, #0
 800354a:	d0f1      	beq.n	8003530 <floorf+0x30>
 800354c:	2c00      	cmp	r4, #0
 800354e:	bfbe      	ittt	lt
 8003550:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8003554:	fa43 f505 	asrlt.w	r5, r3, r5
 8003558:	1964      	addlt	r4, r4, r5
 800355a:	ea24 0406 	bic.w	r4, r4, r6
 800355e:	e7e7      	b.n	8003530 <floorf+0x30>
 8003560:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003564:	d302      	bcc.n	800356c <floorf+0x6c>
 8003566:	f7fd fa47 	bl	80009f8 <__addsf3>
 800356a:	4601      	mov	r1, r0
 800356c:	4608      	mov	r0, r1
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	2400      	movs	r4, #0
 8003572:	e7dd      	b.n	8003530 <floorf+0x30>
 8003574:	7149f2ca 	.word	0x7149f2ca
 8003578:	bf800000 	.word	0xbf800000
 800357c:	007fffff 	.word	0x007fffff

08003580 <scalbnf>:
 8003580:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8003584:	b510      	push	{r4, lr}
 8003586:	4602      	mov	r2, r0
 8003588:	460c      	mov	r4, r1
 800358a:	4601      	mov	r1, r0
 800358c:	d027      	beq.n	80035de <scalbnf+0x5e>
 800358e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003592:	d303      	bcc.n	800359c <scalbnf+0x1c>
 8003594:	f7fd fa30 	bl	80009f8 <__addsf3>
 8003598:	4602      	mov	r2, r0
 800359a:	e020      	b.n	80035de <scalbnf+0x5e>
 800359c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035a0:	d215      	bcs.n	80035ce <scalbnf+0x4e>
 80035a2:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80035a6:	f7fd fb2f 	bl	8000c08 <__aeabi_fmul>
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <scalbnf+0x8c>)
 80035ac:	4602      	mov	r2, r0
 80035ae:	429c      	cmp	r4, r3
 80035b0:	db22      	blt.n	80035f8 <scalbnf+0x78>
 80035b2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80035b6:	3b19      	subs	r3, #25
 80035b8:	4423      	add	r3, r4
 80035ba:	2bfe      	cmp	r3, #254	; 0xfe
 80035bc:	dd09      	ble.n	80035d2 <scalbnf+0x52>
 80035be:	4611      	mov	r1, r2
 80035c0:	4813      	ldr	r0, [pc, #76]	; (8003610 <scalbnf+0x90>)
 80035c2:	f000 f829 	bl	8003618 <copysignf>
 80035c6:	4912      	ldr	r1, [pc, #72]	; (8003610 <scalbnf+0x90>)
 80035c8:	f7fd fb1e 	bl	8000c08 <__aeabi_fmul>
 80035cc:	e7e4      	b.n	8003598 <scalbnf+0x18>
 80035ce:	0ddb      	lsrs	r3, r3, #23
 80035d0:	e7f2      	b.n	80035b8 <scalbnf+0x38>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	dd05      	ble.n	80035e2 <scalbnf+0x62>
 80035d6:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80035da:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 80035de:	4610      	mov	r0, r2
 80035e0:	bd10      	pop	{r4, pc}
 80035e2:	f113 0f16 	cmn.w	r3, #22
 80035e6:	da09      	bge.n	80035fc <scalbnf+0x7c>
 80035e8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80035ec:	429c      	cmp	r4, r3
 80035ee:	4611      	mov	r1, r2
 80035f0:	dce6      	bgt.n	80035c0 <scalbnf+0x40>
 80035f2:	4808      	ldr	r0, [pc, #32]	; (8003614 <scalbnf+0x94>)
 80035f4:	f000 f810 	bl	8003618 <copysignf>
 80035f8:	4906      	ldr	r1, [pc, #24]	; (8003614 <scalbnf+0x94>)
 80035fa:	e7e5      	b.n	80035c8 <scalbnf+0x48>
 80035fc:	3319      	adds	r3, #25
 80035fe:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8003602:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8003606:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800360a:	e7dd      	b.n	80035c8 <scalbnf+0x48>
 800360c:	ffff3cb0 	.word	0xffff3cb0
 8003610:	7149f2ca 	.word	0x7149f2ca
 8003614:	0da24260 	.word	0x0da24260

08003618 <copysignf>:
 8003618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800361c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003620:	4308      	orrs	r0, r1
 8003622:	4770      	bx	lr

08003624 <_init>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	bf00      	nop
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr

08003630 <_fini>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	bf00      	nop
 8003634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003636:	bc08      	pop	{r3}
 8003638:	469e      	mov	lr, r3
 800363a:	4770      	bx	lr
