
f103c8t6_MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a1c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b4c  08000b4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b4c  08000b4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b4c  08000b4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b4c  08000b4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b4c  08000b4c  00010b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b50  08000b50  00010b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  08000b60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  20000054  08000b60  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008168  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001658  00000000  00000000  0002819d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002f0  00000000  00000000  000297f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000238  00000000  00000000  00029ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001d4b  00000000  00000000  00029d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006423  00000000  00000000  0002ba6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059a6b  00000000  00000000  00031e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008b8f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000089c  00000000  00000000  0008b974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b34 	.word	0x08000b34

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08000b34 	.word	0x08000b34

08000170 <Blink_Loop>:

//-----------------------------------------------------------------------------
static volatile uint16_t BlinkReg = 0;
//-----------------------------------------------------------------------------
//Процесс для мигания светодиодами.
void Blink_Loop(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	
	static uint16_t blinkCount = 0;
  //--------------------
	++blinkCount;
 8000174:	4b5c      	ldr	r3, [pc, #368]	; (80002e8 <Blink_Loop+0x178>)
 8000176:	881b      	ldrh	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	b29a      	uxth	r2, r3
 800017c:	4b5a      	ldr	r3, [pc, #360]	; (80002e8 <Blink_Loop+0x178>)
 800017e:	801a      	strh	r2, [r3, #0]
	BlinkReg ^= (1 << INTERVAL_1_mS);
 8000180:	4b5a      	ldr	r3, [pc, #360]	; (80002ec <Blink_Loop+0x17c>)
 8000182:	881b      	ldrh	r3, [r3, #0]
 8000184:	b29b      	uxth	r3, r3
 8000186:	f083 0301 	eor.w	r3, r3, #1
 800018a:	b29a      	uxth	r2, r3
 800018c:	4b57      	ldr	r3, [pc, #348]	; (80002ec <Blink_Loop+0x17c>)
 800018e:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 2)    == 0) BlinkReg ^= (1 << INTERVAL_2_mS);
 8000190:	4b55      	ldr	r3, [pc, #340]	; (80002e8 <Blink_Loop+0x178>)
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	f003 0301 	and.w	r3, r3, #1
 8000198:	b29b      	uxth	r3, r3
 800019a:	2b00      	cmp	r3, #0
 800019c:	d107      	bne.n	80001ae <Blink_Loop+0x3e>
 800019e:	4b53      	ldr	r3, [pc, #332]	; (80002ec <Blink_Loop+0x17c>)
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	f083 0302 	eor.w	r3, r3, #2
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	4b50      	ldr	r3, [pc, #320]	; (80002ec <Blink_Loop+0x17c>)
 80001ac:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 5)    == 0) BlinkReg ^= (1 << INTERVAL_5_mS);
 80001ae:	4b4e      	ldr	r3, [pc, #312]	; (80002e8 <Blink_Loop+0x178>)
 80001b0:	881a      	ldrh	r2, [r3, #0]
 80001b2:	4b4f      	ldr	r3, [pc, #316]	; (80002f0 <Blink_Loop+0x180>)
 80001b4:	fba3 1302 	umull	r1, r3, r3, r2
 80001b8:	0899      	lsrs	r1, r3, #2
 80001ba:	460b      	mov	r3, r1
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	440b      	add	r3, r1
 80001c0:	1ad3      	subs	r3, r2, r3
 80001c2:	b29b      	uxth	r3, r3
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d107      	bne.n	80001d8 <Blink_Loop+0x68>
 80001c8:	4b48      	ldr	r3, [pc, #288]	; (80002ec <Blink_Loop+0x17c>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	b29b      	uxth	r3, r3
 80001ce:	f083 0304 	eor.w	r3, r3, #4
 80001d2:	b29a      	uxth	r2, r3
 80001d4:	4b45      	ldr	r3, [pc, #276]	; (80002ec <Blink_Loop+0x17c>)
 80001d6:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 10)   == 0) BlinkReg ^= (1 << INTERVAL_10_mS);
 80001d8:	4b43      	ldr	r3, [pc, #268]	; (80002e8 <Blink_Loop+0x178>)
 80001da:	881a      	ldrh	r2, [r3, #0]
 80001dc:	4b44      	ldr	r3, [pc, #272]	; (80002f0 <Blink_Loop+0x180>)
 80001de:	fba3 1302 	umull	r1, r3, r3, r2
 80001e2:	08d9      	lsrs	r1, r3, #3
 80001e4:	460b      	mov	r3, r1
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	440b      	add	r3, r1
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	1ad3      	subs	r3, r2, r3
 80001ee:	b29b      	uxth	r3, r3
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d107      	bne.n	8000204 <Blink_Loop+0x94>
 80001f4:	4b3d      	ldr	r3, [pc, #244]	; (80002ec <Blink_Loop+0x17c>)
 80001f6:	881b      	ldrh	r3, [r3, #0]
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	f083 0308 	eor.w	r3, r3, #8
 80001fe:	b29a      	uxth	r2, r3
 8000200:	4b3a      	ldr	r3, [pc, #232]	; (80002ec <Blink_Loop+0x17c>)
 8000202:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 50)   == 0) BlinkReg ^= (1 << INTERVAL_50_mS);
 8000204:	4b38      	ldr	r3, [pc, #224]	; (80002e8 <Blink_Loop+0x178>)
 8000206:	881b      	ldrh	r3, [r3, #0]
 8000208:	4a3a      	ldr	r2, [pc, #232]	; (80002f4 <Blink_Loop+0x184>)
 800020a:	fba2 1203 	umull	r1, r2, r2, r3
 800020e:	0912      	lsrs	r2, r2, #4
 8000210:	2132      	movs	r1, #50	; 0x32
 8000212:	fb01 f202 	mul.w	r2, r1, r2
 8000216:	1a9b      	subs	r3, r3, r2
 8000218:	b29b      	uxth	r3, r3
 800021a:	2b00      	cmp	r3, #0
 800021c:	d107      	bne.n	800022e <Blink_Loop+0xbe>
 800021e:	4b33      	ldr	r3, [pc, #204]	; (80002ec <Blink_Loop+0x17c>)
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	b29b      	uxth	r3, r3
 8000224:	f083 0310 	eor.w	r3, r3, #16
 8000228:	b29a      	uxth	r2, r3
 800022a:	4b30      	ldr	r3, [pc, #192]	; (80002ec <Blink_Loop+0x17c>)
 800022c:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 100)  == 0) BlinkReg ^= (1 << INTERVAL_100_mS);
 800022e:	4b2e      	ldr	r3, [pc, #184]	; (80002e8 <Blink_Loop+0x178>)
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	4a30      	ldr	r2, [pc, #192]	; (80002f4 <Blink_Loop+0x184>)
 8000234:	fba2 1203 	umull	r1, r2, r2, r3
 8000238:	0952      	lsrs	r2, r2, #5
 800023a:	2164      	movs	r1, #100	; 0x64
 800023c:	fb01 f202 	mul.w	r2, r1, r2
 8000240:	1a9b      	subs	r3, r3, r2
 8000242:	b29b      	uxth	r3, r3
 8000244:	2b00      	cmp	r3, #0
 8000246:	d107      	bne.n	8000258 <Blink_Loop+0xe8>
 8000248:	4b28      	ldr	r3, [pc, #160]	; (80002ec <Blink_Loop+0x17c>)
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	f083 0320 	eor.w	r3, r3, #32
 8000252:	b29a      	uxth	r2, r3
 8000254:	4b25      	ldr	r3, [pc, #148]	; (80002ec <Blink_Loop+0x17c>)
 8000256:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 250)  == 0) BlinkReg ^= (1 << INTERVAL_250_mS);	
 8000258:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <Blink_Loop+0x178>)
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	4a26      	ldr	r2, [pc, #152]	; (80002f8 <Blink_Loop+0x188>)
 800025e:	fba2 1203 	umull	r1, r2, r2, r3
 8000262:	0912      	lsrs	r2, r2, #4
 8000264:	21fa      	movs	r1, #250	; 0xfa
 8000266:	fb01 f202 	mul.w	r2, r1, r2
 800026a:	1a9b      	subs	r3, r3, r2
 800026c:	b29b      	uxth	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d107      	bne.n	8000282 <Blink_Loop+0x112>
 8000272:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <Blink_Loop+0x17c>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	b29b      	uxth	r3, r3
 8000278:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800027c:	b29a      	uxth	r2, r3
 800027e:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <Blink_Loop+0x17c>)
 8000280:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 500)  == 0) BlinkReg ^= (1 << INTERVAL_500_mS);
 8000282:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <Blink_Loop+0x178>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <Blink_Loop+0x188>)
 8000288:	fba2 1203 	umull	r1, r2, r2, r3
 800028c:	0952      	lsrs	r2, r2, #5
 800028e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000292:	fb01 f202 	mul.w	r2, r1, r2
 8000296:	1a9b      	subs	r3, r3, r2
 8000298:	b29b      	uxth	r3, r3
 800029a:	2b00      	cmp	r3, #0
 800029c:	d107      	bne.n	80002ae <Blink_Loop+0x13e>
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <Blink_Loop+0x17c>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <Blink_Loop+0x17c>)
 80002ac:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 1000) == 0)
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <Blink_Loop+0x178>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <Blink_Loop+0x188>)
 80002b4:	fba2 1203 	umull	r1, r2, r2, r3
 80002b8:	0992      	lsrs	r2, r2, #6
 80002ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002be:	fb01 f202 	mul.w	r2, r1, r2
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d10a      	bne.n	80002e0 <Blink_Loop+0x170>
		{
			BlinkReg  ^= (1 << INTERVAL_1000_mS);
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <Blink_Loop+0x17c>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <Blink_Loop+0x17c>)
 80002d8:	801a      	strh	r2, [r3, #0]
			blinkCount = 0;
 80002da:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <Blink_Loop+0x178>)
 80002dc:	2200      	movs	r2, #0
 80002de:	801a      	strh	r2, [r3, #0]
		}
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	2000002a 	.word	0x2000002a
 80002ec:	20000028 	.word	0x20000028
 80002f0:	cccccccd 	.word	0xcccccccd
 80002f4:	51eb851f 	.word	0x51eb851f
 80002f8:	10624dd3 	.word	0x10624dd3

080002fc <Blink>:
//-----------------------------------------------------------------------------
uint16_t Blink(BlinkIntervalEnum_t interval){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	
	if(BlinkReg & (1 << interval)) return 0xFFFF;
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <Blink+0x34>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	b29b      	uxth	r3, r3
 800030c:	461a      	mov	r2, r3
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	fa42 f303 	asr.w	r3, r2, r3
 8000314:	f003 0301 	and.w	r3, r3, #1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d002      	beq.n	8000322 <Blink+0x26>
 800031c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000320:	e000      	b.n	8000324 <Blink+0x28>
	else											     return 0;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	20000028 	.word	0x20000028

08000334 <msDelay_Loop>:

//*******************************************************************************************
static volatile uint32_t msCounter = 0;
//*******************************************************************************************
//*******************************************************************************************
void msDelay_Loop(void){
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

	msCounter++;
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <msDelay_Loop+0x18>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	4a03      	ldr	r2, [pc, #12]	; (800034c <msDelay_Loop+0x18>)
 8000340:	6013      	str	r3, [r2, #0]
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	2000002c 	.word	0x2000002c

08000350 <msDelay>:
//**********************************************************
void msDelay(volatile uint32_t del){
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]

	msCounter = 0;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <msDelay+0x28>)
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
	while(msCounter < del){__NOP();};
 800035e:	e000      	b.n	8000362 <msDelay+0x12>
 8000360:	bf00      	nop
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <msDelay+0x28>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	429a      	cmp	r2, r3
 800036a:	d3f9      	bcc.n	8000360 <msDelay+0x10>
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	2000002c 	.word	0x2000002c

0800037c <SystemInit>:
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SystemInit+0x5c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SystemInit+0x5c>)
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	6013      	str	r3, [r2, #0]
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <SystemInit+0x5c>)
 800038e:	685a      	ldr	r2, [r3, #4]
 8000390:	4911      	ldr	r1, [pc, #68]	; (80003d8 <SystemInit+0x5c>)
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x60>)
 8000394:	4013      	ands	r3, r2
 8000396:	604b      	str	r3, [r1, #4]
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <SystemInit+0x5c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <SystemInit+0x5c>)
 800039e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003a6:	6013      	str	r3, [r2, #0]
 80003a8:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <SystemInit+0x5c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <SystemInit+0x5c>)
 80003ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003b2:	6013      	str	r3, [r2, #0]
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <SystemInit+0x5c>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <SystemInit+0x5c>)
 80003ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003be:	6053      	str	r3, [r2, #4]
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <SystemInit+0x5c>)
 80003c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SystemInit+0x64>)
 80003ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40021000 	.word	0x40021000
 80003dc:	f8ff0000 	.word	0xf8ff0000
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <Gpio_Init>:
static volatile uint16_t GpioAState = 0; //
static volatile uint16_t GpioBState = 0; //
static volatile uint16_t GpioCState = 0; //
//-----------------------------------------------------------------------------
//Инициализация переферии.
void Gpio_Init (void){
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  
  //Включаем тактирование порта A, B, C, D и модуля альтернативных функций.
  RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN |
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <Gpio_Init+0x54>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a12      	ldr	r2, [pc, #72]	; (8000438 <Gpio_Init+0x54>)
 80003ee:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 80003f2:	6193      	str	r3, [r2, #24]
                   RCC_APB2ENR_IOPBEN |
                   RCC_APB2ENR_IOPCEN |
                   RCC_APB2ENR_IOPDEN |
                   RCC_APB2ENR_AFIOEN);
  //Отключение JTAG-D от порта PA15, отладка через SWD активна.
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE; 
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <Gpio_Init+0x58>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	4a10      	ldr	r2, [pc, #64]	; (800043c <Gpio_Init+0x58>)
 80003fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fe:	6053      	str	r3, [r2, #4]
  //RCC->CFGR |= RCC_CFGR_MCO_HSI;   //Подключение к выводу PA8 частоту HSI.
  //RCC->CFGR |= RCC_CFGR_MCO_HSE;      //Подключение к выводу PA8 частоту HSE.
  //RCC->CFGR |= RCC_CFGR_MCO_PLL;   //Подключение к выводу PA8 частоту PLL/2. 
  //--------------------
  //PC13 - Led.
  GPIOC->CRH &= ~GPIO_CRH_CNF13;//выход, режим - push-pull.
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <Gpio_Init+0x5c>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <Gpio_Init+0x5c>)
 8000406:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800040a:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= GPIO_CRH_MODE13;//тактирование 50МГц.
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <Gpio_Init+0x5c>)
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <Gpio_Init+0x5c>)
 8000412:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000416:	6053      	str	r3, [r2, #4]

  //--------------------
  //PA6 - Led.
  //PA7 - Led.
  GPIOA->CRL &= ~(GPIO_CRL_CNF6  | GPIO_CRL_CNF7); //выход, режим - push-pull.
 8000418:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <Gpio_Init+0x60>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a09      	ldr	r2, [pc, #36]	; (8000444 <Gpio_Init+0x60>)
 800041e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000422:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |=  (GPIO_CRL_MODE6 | GPIO_CRL_MODE7); //PA7(LC2_SOST_Red) - тактирование 50МГц.
 8000424:	4b07      	ldr	r3, [pc, #28]	; (8000444 <Gpio_Init+0x60>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a06      	ldr	r2, [pc, #24]	; (8000444 <Gpio_Init+0x60>)
 800042a:	f043 534c 	orr.w	r3, r3, #855638016	; 0x33000000
 800042e:	6013      	str	r3, [r2, #0]
                  GPIO_CRH_MODE12 );//тактирование 50МГц.
  GPIOD->CRL |= ( GPIO_CRL_MODE2  );
	//--------------------
	 *
	 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000
 8000440:	40011000 	.word	0x40011000
 8000444:	40010800 	.word	0x40010800

08000448 <I2C_Int_Handler>:
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
}
//*******************************************************************************************
//*******************************************************************************************
static void I2C_Int_Handler(I2C_TypeDef *i2c, uint8_t slaveAddr){
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t sr1 = i2c->SR1;//Чтениех этих регистров сбрасывает флаги событий I2C.
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	60fb      	str	r3, [r7, #12]
	//volatile uint32_t sr2 = i2c->SR2;
	//---------------------
	//Start condition generated. Clear: read SR1, write to DR
	if(sr1 & I2C_SR1_SB)
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	2b00      	cmp	r3, #0
 8000462:	d008      	beq.n	8000476 <I2C_Int_Handler+0x2e>
		{
		  i2c->DR = I2C_ADDRESS(slaveAddr, I2C_Mode);
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	4a26      	ldr	r2, [pc, #152]	; (8000504 <I2C_Int_Handler+0xbc>)
 800046a:	7812      	ldrb	r2, [r2, #0]
 800046c:	4313      	orrs	r3, r2
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	611a      	str	r2, [r3, #16]
		  return;
 8000474:	e042      	b.n	80004fc <I2C_Int_Handler+0xb4>
		}
	//Address sent. Clear: read SR1, read SR2
	else if(sr1 & I2C_SR1_ADDR)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	f003 0302 	and.w	r3, r3, #2
 800047c:	2b00      	cmp	r3, #0
 800047e:	d010      	beq.n	80004a2 <I2C_Int_Handler+0x5a>
	   {
	      if(I2C_Mode == I2C_MODE_WRITE)
 8000480:	4b20      	ldr	r3, [pc, #128]	; (8000504 <I2C_Int_Handler+0xbc>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d136      	bne.n	80004f6 <I2C_Int_Handler+0xae>
			  {
	    	  	  i2c->DR = I2C_pBuf[0];
 8000488:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <I2C_Int_Handler+0xc0>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	461a      	mov	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	611a      	str	r2, [r3, #16]
	    	  	  I2C_TxCnt++;
 8000494:	4b1d      	ldr	r3, [pc, #116]	; (800050c <I2C_Int_Handler+0xc4>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	3301      	adds	r3, #1
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <I2C_Int_Handler+0xc4>)
 800049e:	801a      	strh	r2, [r3, #0]
//						// не дописано! не использовать
//						I2C_NUMB->DR = (uint8_t)AddrReg;            // First byte
//						AddrReg>>=8;
//					 }
//			  }
	      return;
 80004a0:	e029      	b.n	80004f6 <I2C_Int_Handler+0xae>
//	else if(sr1 & I2C_SR1_AF)
//		{
//			I2C_TxCnt++;
//		}
	//Data Register Empty (transmitters).
	else if(sr1 & I2C_SR1_TXE)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d01f      	beq.n	80004ec <I2C_Int_Handler+0xa4>
		{
			i2c->DR = I2C_pBuf[I2C_TxCnt];
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <I2C_Int_Handler+0xc0>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a16      	ldr	r2, [pc, #88]	; (800050c <I2C_Int_Handler+0xc4>)
 80004b2:	8812      	ldrh	r2, [r2, #0]
 80004b4:	4413      	add	r3, r2
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	611a      	str	r2, [r3, #16]
			I2C_TxCnt++;
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <I2C_Int_Handler+0xc4>)
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <I2C_Int_Handler+0xc4>)
 80004c8:	801a      	strh	r2, [r3, #0]
			if(I2C_TxCnt >= I2C_TxSize)
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <I2C_Int_Handler+0xc8>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <I2C_Int_Handler+0xc4>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d810      	bhi.n	80004fa <I2C_Int_Handler+0xb2>
				{
					I2C_TxCnt = 0;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <I2C_Int_Handler+0xc4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	801a      	strh	r2, [r3, #0]
					i2c->CR1 |= I2C_CR1_STOP;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]
				}
			return;
 80004ea:	e006      	b.n	80004fa <I2C_Int_Handler+0xb2>
		}
	//Byte Transfer Finished.
	else if(sr1 & I2C_SR1_BTF)
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	e002      	b.n	80004fc <I2C_Int_Handler+0xb4>
	      return;
 80004f6:	bf00      	nop
 80004f8:	e000      	b.n	80004fc <I2C_Int_Handler+0xb4>
			return;
 80004fa:	bf00      	nop
//	if(sr1 & I2C_SR1_TXE)
//		{
//			if(TxCounter < I2C_TxSize) i2c->DR   = I2C_pBuf[TxCounter++];
//			else		               i2c->CR1 |= I2C_CR1_STOP;
//		}
}
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	20000039 	.word	0x20000039
 8000508:	20000034 	.word	0x20000034
 800050c:	20000030 	.word	0x20000030
 8000510:	20000038 	.word	0x20000038

08000514 <I2C1_EV_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание I2C1.
void I2C1_EV_IRQHandler(void){
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

//	I2C_handler(I2C1, addr);
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <I2C2_EV_IRQHandler>:
//**********************************************************
//Прерывание I2C2.
void I2C2_EV_IRQHandler(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	I2C_Int_Handler(I2C2, I2C_SlaveAddr);
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <I2C2_EV_IRQHandler+0x20>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	4806      	ldr	r0, [pc, #24]	; (8000544 <I2C2_EV_IRQHandler+0x24>)
 800052c:	f7ff ff8c 	bl	8000448 <I2C_Int_Handler>
	LedPA7_Toggel();
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <I2C2_EV_IRQHandler+0x28>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <I2C2_EV_IRQHandler+0x28>)
 8000536:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800053a:	60d3      	str	r3, [r2, #12]
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000032 	.word	0x20000032
 8000544:	40005800 	.word	0x40005800
 8000548:	40010800 	.word	0x40010800

0800054c <SPI2_IRQHandler>:
	//--------------------
	return (uint8_t)SPI2->DR;
} 
//-----------------------------------------------------------------------------
//Прерываени от SPI2.
void SPI2_IRQHandler(void){
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  
  //uint16_t tmp;
  //--------------------
  //причина прерывания - окончание передачи байта
  if(SPI2->SR & SPI_SR_TXE)
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <SPI2_IRQHandler+0x34>)
 8000552:	689b      	ldr	r3, [r3, #8]

      //LC2SostGreenLedToggel;//Мигаем для отладки          
    }
  //--------------------
  //причина прерывания - принят байт данных
  if(SPI2->SR &= SPI_SR_RXNE)
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <SPI2_IRQHandler+0x34>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <SPI2_IRQHandler+0x34>)
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	6093      	str	r3, [r2, #8]
      //tmp = SPI1->DR;                //прочитать принятые данные
      //выполняем какие-то действия      
    }
  //--------------------
  //причина прерывания - ошибка режима ведущего
  if(SPI2->SR &= SPI_SR_MODF)
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <SPI2_IRQHandler+0x34>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <SPI2_IRQHandler+0x34>)
 8000566:	f003 0320 	and.w	r3, r3, #32
 800056a:	6093      	str	r3, [r2, #8]
    {
      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
    }
  //--------------------
  //причина прерывания - переполнение приемника данных
  if(SPI2->SR &= SPI_SR_OVR)
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <SPI2_IRQHandler+0x34>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <SPI2_IRQHandler+0x34>)
 8000572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000576:	6093      	str	r3, [r2, #8]
//  if(SPI2->SR &= SSPI_SR_CRCERR)
//    {
//      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
//    }
  //--------------------
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40003800 	.word	0x40003800

08000584 <Init_RCC>:
#include "sys_ST.h"

//**********************************************************************************************
//**********************************************************************************************
//Настройка тактирования 72МГц. Внешний кварц 8 МГц.
static uint32_t Init_RCC(void){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
	//--------------------
	//SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/        
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);//Enable HSE.
 8000592:	4b3a      	ldr	r3, [pc, #232]	; (800067c <Init_RCC+0xf8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a39      	ldr	r2, [pc, #228]	; (800067c <Init_RCC+0xf8>)
 8000598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800059c:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready and if Time out is reached exit */
	do{
			HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800059e:	4b37      	ldr	r3, [pc, #220]	; (800067c <Init_RCC+0xf8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a6:	603b      	str	r3, [r7, #0]
			StartUpCounter++;  
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3301      	adds	r3, #1
 80005ac:	607b      	str	r3, [r7, #4]
	  }
	while((HSEStatus == 0) && (StartUpCounter != 0xFFFF));
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d104      	bne.n	80005be <Init_RCC+0x3a>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d1ef      	bne.n	800059e <Init_RCC+0x1a>
	//--------------------
	if ((RCC->CR & RCC_CR_HSERDY) != 0) HSEStatus = (uint32_t)0x01;
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <Init_RCC+0xf8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <Init_RCC+0x4c>
 80005ca:	2301      	movs	r3, #1
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	e001      	b.n	80005d4 <Init_RCC+0x50>
	else                                HSEStatus = (uint32_t)0x00;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
	//--------------------
	if(HSEStatus == (uint32_t)0x01)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d149      	bne.n	800066e <Init_RCC+0xea>
		{
			/* Enable Prefetch Buffer */
			FLASH->ACR |= FLASH_ACR_PRFTBE;
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <Init_RCC+0xfc>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a28      	ldr	r2, [pc, #160]	; (8000680 <Init_RCC+0xfc>)
 80005e0:	f043 0310 	orr.w	r3, r3, #16
 80005e4:	6013      	str	r3, [r2, #0]
			/* Flash 2 wait state */
			FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80005e6:	4b26      	ldr	r3, [pc, #152]	; (8000680 <Init_RCC+0xfc>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a25      	ldr	r2, [pc, #148]	; (8000680 <Init_RCC+0xfc>)
 80005ec:	f023 0307 	bic.w	r3, r3, #7
 80005f0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;  
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <Init_RCC+0xfc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a22      	ldr	r2, [pc, #136]	; (8000680 <Init_RCC+0xfc>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6013      	str	r3, [r2, #0]
			//--------------------
			//Настройка тактирования шин AHB, APB1 и APB2.
			RCC->CFGR |= (uint32_t)(RCC_CFGR_HPRE_DIV1  | // AHB prescaler. SYSCLK not divided
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <Init_RCC+0xf8>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <Init_RCC+0xf8>)
 8000604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000608:	6053      	str	r3, [r2, #4]
									RCC_CFGR_PPRE2_DIV1 | // APB2 = AHB. APB2 Fmax = 72MHz.
									RCC_CFGR_PPRE1_DIV2); // APB1 = (AHB / 2). APB1 Fmax = 36MHz.

			//--------------------
			//PLL configuration: = HSE * 9 = 72 MHz */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <Init_RCC+0xf8>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4a1b      	ldr	r2, [pc, #108]	; (800067c <Init_RCC+0xf8>)
 8000610:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000614:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_Msk        |  // HSE oscillator clock selected as PLL input clock
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <Init_RCC+0xf8>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <Init_RCC+0xf8>)
 800061c:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000620:	6053      	str	r3, [r2, #4]
															//RCC_CFGR_PLLXTPRE_HSE_Div2 |  // HSE clock divided by 2                                
															RCC_CFGR_PLLMULL9);
			/* Enable PLL */
			RCC->CR |= RCC_CR_PLLON;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <Init_RCC+0xf8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <Init_RCC+0xf8>)
 8000628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800062c:	6013      	str	r3, [r2, #0]
			/* Wait till PLL is ready */
			while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 800062e:	bf00      	nop
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <Init_RCC+0xf8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0f9      	beq.n	8000630 <Init_RCC+0xac>
			/* Select PLL as system clock source */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <Init_RCC+0xf8>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <Init_RCC+0xf8>)
 8000642:	f023 0303 	bic.w	r3, r3, #3
 8000646:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <Init_RCC+0xf8>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <Init_RCC+0xf8>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	6053      	str	r3, [r2, #4]
			/* Wait till PLL is used as system clock source */
			while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)  {}        
 8000654:	bf00      	nop
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <Init_RCC+0xf8>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f003 030c 	and.w	r3, r3, #12
 800065e:	2b08      	cmp	r3, #8
 8000660:	d1f9      	bne.n	8000656 <Init_RCC+0xd2>
			RCC->CR |= RCC_CR_CSSON; //Включаем защиту HSE от сбоев - CSS.
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <Init_RCC+0xf8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <Init_RCC+0xf8>)
 8000668:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800066c:	6013      	str	r3, [r2, #0]
	else
		{
				/* If HSE fails to start-up, the application will have wrong clock 
				 configuration. User can add here some code to deal with this error */
		} 
	return HSEStatus;
 800066e:	683b      	ldr	r3, [r7, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000
 8000680:	40022000 	.word	0x40022000

08000684 <Sys_Init>:
//*****************************************************************************
void Sys_Init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	
  //Reset the RCC clock configuration to the default reset state(for debug purpose).
  RCC->CR 	|= (uint32_t)0x00000001;	/* Set HSION bit */
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <Sys_Init+0x54>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <Sys_Init+0x54>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF0FF0000;	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <Sys_Init+0x54>)
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	490f      	ldr	r1, [pc, #60]	; (80006d8 <Sys_Init+0x54>)
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <Sys_Init+0x58>)
 800069c:	4013      	ands	r3, r2
 800069e:	604b      	str	r3, [r1, #4]
  RCC->CR 	&= (uint32_t)0xFEF6FFFF;  /* Reset HSEON, CSSON and PLLON bits */
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <Sys_Init+0x54>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <Sys_Init+0x54>)
 80006a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006ae:	6013      	str	r3, [r2, #0]
  RCC->CR 	&= (uint32_t)0xFFFBFFFF;  /* Reset HSEBYP bit */
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <Sys_Init+0x54>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <Sys_Init+0x54>)
 80006b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ba:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <Sys_Init+0x54>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <Sys_Init+0x54>)
 80006c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006c6:	6053      	str	r3, [r2, #4]
  RCC->CIR 	 = 0x009F0000;  				  /* Disable all interrupts and clear pending bits  */
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <Sys_Init+0x54>)
 80006ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006ce:	609a      	str	r2, [r3, #8]
  //RCC->CFGR2 = 0x00000000;      			/* Reset CFGR2 register */  
	
  Init_RCC();//Настройка тактирования микроконтроллера. Внешний кварц 8 МГц.
 80006d0:	f7ff ff58 	bl	8000584 <Init_RCC>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	f0ff0000 	.word	0xf0ff0000

080006e0 <NMI_Handler>:
	return (*(__IO uint32_t*)address);
}
//**********************************************************************************************
//**********************************************************************************************
//Прерываени блока CSS. Возникает при сбое тактирования HSE.
void NMI_Handler( void){
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  //RCC->CIR |= RCC_CIR_CSSC;//Очищаем флаг прерывания CSS иначе прерывание будет генерироваться бесконечно.
	//NVIC_SystemReset();
  //LC1SostRedLedOn;
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <HardFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void HardFault_Handler( void){
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
//  if(SCB->HFSR & SCB_HFSR_FORCED)   LC1SostRedLedOn();
//  if(SCB->HFSR & SCB_HFSR_DEBUGEVT) LC2SostRedLedOn();
	
//	LC1SostRedLedOn();
//	LC2SostRedLedOn();
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <MemManage_Handler>:
//*****************************************************************************
//*****************************************************************************
void MemManage_Handler( void){
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

//  LC2SostRedLedOn();
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <BusFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void BusFault_Handler( void){
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

//  LC2SostGreenLedOn();
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <UsageFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void UsageFault_Handler( void){
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <SVC_Handler>:
//*****************************************************************************
//*****************************************************************************
void SVC_Handler( void){
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <SysTick_Init>:

#include "sys_tick_ST.h"

//-----------------------------------------------------------------------------
//Инициализация системного таймера SysTick.
void SysTick_Init(void){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

	SysTick->LOAD = TimerTick;	//Загрузка значения.
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <SysTick_Init+0x20>)
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <SysTick_Init+0x24>)
 8000730:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = TimerTick;	//Обнуление таймера. 
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Init+0x20>)
 8000734:	4a05      	ldr	r2, [pc, #20]	; (800074c <SysTick_Init+0x24>)
 8000736:	609a      	str	r2, [r3, #8]
                              //При записи любого значения этот регист обнуляется, с обнулением флага COUNTFLAG. 
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | //Тактирование частотой процессора (24МГц).
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <SysTick_Init+0x20>)
 800073a:	2207      	movs	r2, #7
 800073c:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk   | //Рразрешение прерывания.
					SysTick_CTRL_ENABLE_Msk;     //Резрешение таймеру считать.
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010
 800074c:	0001193f 	.word	0x0001193f

08000750 <TIM3_InitForPWM>:

#include "timers_ST.h"

//*******************************************************************************************
//*******************************************************************************************
void TIM3_InitForPWM(void){
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

	//Включение тактирования таймера.
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <TIM3_InitForPWM+0x70>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <TIM3_InitForPWM+0x70>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	61d3      	str	r3, [r2, #28]
	//Выбор источника тактирования.

	//Прескаллер.
	//APB1_CLK = 36MHz, TIM3_CLK = APB1_CLK * 2 = 72MHz.
	TIM3->PSC = (720 - 1);//таймер будет тактироваться с частотой 72МГц/1000=72кГц.
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <TIM3_InitForPWM+0x74>)
 8000762:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
	//Auto reload register. - это значение, до которого будет считать таймер.
	TIM3->ARR = (100 - 1);
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <TIM3_InitForPWM+0x74>)
 800076a:	2263      	movs	r2, #99	; 0x63
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
	//Задаем режим работы - PWM mode on OC1
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | //OC1M: Output compare 1 mode - 110: PWM mode 1.
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <TIM3_InitForPWM+0x74>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <TIM3_InitForPWM+0x74>)
 8000774:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000778:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC1PE;						 //OC1PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.
	//Enable CC1 - включение первого канала
	TIM3->CCER |= TIM_CCER_CC1E;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <TIM3_InitForPWM+0x74>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <TIM3_InitForPWM+0x74>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6213      	str	r3, [r2, #32]

	//Настройка ножки микроконтроллера.
	//Используется порт PA6(TIM3_CH1)
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <TIM3_InitForPWM+0x70>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <TIM3_InitForPWM+0x70>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6193      	str	r3, [r2, #24]

	GPIOA->CRL |= GPIO_CRL_CNF6_1;//PA6(TIM3_CH1) - выход, альтернативный режим push-pull.
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <TIM3_InitForPWM+0x78>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <TIM3_InitForPWM+0x78>)
 8000798:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800079c:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE6; //PA6(TIM3_CH1) - тактирование 50МГц.
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <TIM3_InitForPWM+0x78>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <TIM3_InitForPWM+0x78>)
 80007a4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80007a8:	6013      	str	r3, [r2, #0]

	//Включение DMA для работы с таймером.
//	TIM3->DIER |= TIM_DIER_CC1DE;
	//Включение таймера
	TIM3->CR1 |= TIM_CR1_CEN;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <TIM3_InitForPWM+0x74>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <TIM3_InitForPWM+0x74>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6013      	str	r3, [r2, #0]
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40000400 	.word	0x40000400
 80007c8:	40010800 	.word	0x40010800

080007cc <IncrementOnEachPass>:
static uint32_t secCounter = 0;
static uint32_t PWRval	   = 0;
//static uint16_t Temperature = 0;
//*******************************************************************************************
//*******************************************************************************************
void IncrementOnEachPass(uint32_t *var, uint16_t event){
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]

		   uint16_t riseReg  = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	81fb      	strh	r3, [r7, #14]
	static uint16_t oldState = 0;
	//-------------------
	riseReg  = (oldState ^ event) & event;
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <IncrementOnEachPass+0x40>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	43db      	mvns	r3, r3
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	887b      	ldrh	r3, [r7, #2]
 80007e6:	4013      	ands	r3, r2
 80007e8:	81fb      	strh	r3, [r7, #14]
	oldState = event;
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <IncrementOnEachPass+0x40>)
 80007ec:	887b      	ldrh	r3, [r7, #2]
 80007ee:	8013      	strh	r3, [r2, #0]
	if(riseReg) (*var)++;
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <IncrementOnEachPass+0x34>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	601a      	str	r2, [r3, #0]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000040 	.word	0x20000040

08000810 <Led_Blink>:
	Time.hour =  count / 3600;
	Time.min  = (count % 3600) / 60;
	Time.sec  =  count % 60;
}
//************************************************************
void Led_Blink(void){
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

	if(Blink(INTERVAL_50_mS)) LedPC13On();
 8000814:	2004      	movs	r0, #4
 8000816:	f7ff fd71 	bl	80002fc <Blink>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d004      	beq.n	800082a <Led_Blink+0x1a>
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <Led_Blink+0x28>)
 8000822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000826:	611a      	str	r2, [r3, #16]
	else					  LedPC13Off();
}
 8000828:	e003      	b.n	8000832 <Led_Blink+0x22>
	else					  LedPC13Off();
 800082a:	4b03      	ldr	r3, [pc, #12]	; (8000838 <Led_Blink+0x28>)
 800082c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000830:	611a      	str	r2, [r3, #16]
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40011000 	.word	0x40011000

0800083c <main>:
//************************************************************


//*******************************************************************************************
//*******************************************************************************************
int main(void){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

	uint16_t dsRes = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	80fb      	strh	r3, [r7, #6]
//	uint16_t BmiT  = 0;
	//-----------------------------
	//Drivers.
	Sys_Init();
 8000846:	f7ff ff1d 	bl	8000684 <Sys_Init>
	Gpio_Init();
 800084a:	f7ff fdcb 	bl	80003e4 <Gpio_Init>
	//***********************************************
	SysTick_Init();
 800084e:	f7ff ff6b 	bl	8000728 <SysTick_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000852:	b662      	cpsie	i
	__enable_irq();


	TIM3_InitForPWM();
 8000854:	f7ff ff7c 	bl	8000750 <TIM3_InitForPWM>
	TIM3->CCR1 = 50;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <main+0x58>)
 800085a:	2232      	movs	r2, #50	; 0x32
 800085c:	635a      	str	r2, [r3, #52]	; 0x34




//	__disable_irq();
	msDelay(500);
 800085e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000862:	f7ff fd75 	bl	8000350 <msDelay>
	while(1)
		{
			//msDelay(10);
			//***********************************************
			//Мигание светодиодами.
			Led_Blink();
 8000866:	f7ff ffd3 	bl	8000810 <Led_Blink>

			//***********************************************
			//ШИМ.
			if(PWRval <= 100) IncrementOnEachPass(&PWRval, Blink(INTERVAL_10_mS));
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <main+0x5c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b64      	cmp	r3, #100	; 0x64
 8000870:	d808      	bhi.n	8000884 <main+0x48>
 8000872:	2003      	movs	r0, #3
 8000874:	f7ff fd42 	bl	80002fc <Blink>
 8000878:	4603      	mov	r3, r0
 800087a:	4619      	mov	r1, r3
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <main+0x5c>)
 800087e:	f7ff ffa5 	bl	80007cc <IncrementOnEachPass>
 8000882:	e002      	b.n	800088a <main+0x4e>
			else PWRval = 10;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <main+0x5c>)
 8000886:	220a      	movs	r2, #10
 8000888:	601a      	str	r2, [r3, #0]
			TIM3->CCR1 = PWRval;
 800088a:	4a02      	ldr	r2, [pc, #8]	; (8000894 <main+0x58>)
 800088c:	4b02      	ldr	r3, [pc, #8]	; (8000898 <main+0x5c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6353      	str	r3, [r2, #52]	; 0x34
			Led_Blink();
 8000892:	e7e8      	b.n	8000866 <main+0x2a>
 8000894:	40000400 	.word	0x40000400
 8000898:	2000003c 	.word	0x2000003c

0800089c <SysTick_Handler>:
	//************************************************************************************
}
//*******************************************************************************************
//*******************************************************************************************
//Прерывание каждую милисекунду.
void SysTick_Handler(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

	static uint16_t msCountForDS18B20 = 0;
	//-----------------------------
	//Отсчет таймаута для датчика температуры.
	if(++msCountForDS18B20 >= 1000)
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <SysTick_Handler+0x40>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <SysTick_Handler+0x40>)
 80008aa:	801a      	strh	r2, [r3, #0]
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <SysTick_Handler+0x40>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008b4:	d307      	bcc.n	80008c6 <SysTick_Handler+0x2a>
		{
			msCountForDS18B20 = 0;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <SysTick_Handler+0x40>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	801a      	strh	r2, [r3, #0]
			FlagsStr.DS18B20  = 1;
 80008bc:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <SysTick_Handler+0x44>)
 80008be:	7813      	ldrb	r3, [r2, #0]
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	7013      	strb	r3, [r2, #0]
		}
	//-----------------------------
	msDelay_Loop();
 80008c6:	f7ff fd35 	bl	8000334 <msDelay_Loop>
	Blink_Loop();
 80008ca:	f7ff fc51 	bl	8000170 <Blink_Loop>
	Encoder()->Loop();
 80008ce:	f000 f8d9 	bl	8000a84 <Encoder>
 80008d2:	4603      	mov	r3, r0
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	4798      	blx	r3
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000042 	.word	0x20000042
 80008e0:	20000050 	.word	0x20000050

080008e4 <Encoder_Turn>:
							   .Loop          = &Encoder_Loop,
							   .Rotation      = &Encoder_Turn};

static uint8_t EncoderStateReg = ENCODER_NO_TURN;//Регистр состияния энкодера.
//-----------------------------------------------------------------------------
static void Encoder_Turn(uint16_t *parameter, uint16_t min, uint16_t max){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	807b      	strh	r3, [r7, #2]
 80008f0:	4613      	mov	r3, r2
 80008f2:	803b      	strh	r3, [r7, #0]

	//--------------------
	switch(EncoderStateReg){
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <Encoder_Turn+0x74>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d002      	beq.n	8000902 <Encoder_Turn+0x1e>
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d013      	beq.n	8000928 <Encoder_Turn+0x44>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
			EncoderStateReg = ENCODER_NO_TURN;
		break;
		//-----------
		default:
		break;	
 8000900:	e025      	b.n	800094e <Encoder_Turn+0x6a>
			if ((*parameter) < max)(*parameter)++;    //Проверка на  максимум.
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	883a      	ldrh	r2, [r7, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	d906      	bls.n	800091a <Encoder_Turn+0x36>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	b29a      	uxth	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	e002      	b.n	8000920 <Encoder_Turn+0x3c>
			else                   (*parameter) = min;//Закольцовывание редактирования параметра.
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	887a      	ldrh	r2, [r7, #2]
 800091e:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <Encoder_Turn+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
		break;
 8000926:	e012      	b.n	800094e <Encoder_Turn+0x6a>
			if ((*parameter) > min)(*parameter)--;    //Проверка на минимум.
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	887a      	ldrh	r2, [r7, #2]
 800092e:	429a      	cmp	r2, r3
 8000930:	d206      	bcs.n	8000940 <Encoder_Turn+0x5c>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	3b01      	subs	r3, #1
 8000938:	b29a      	uxth	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e002      	b.n	8000946 <Encoder_Turn+0x62>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	883a      	ldrh	r2, [r7, #0]
 8000944:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <Encoder_Turn+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
		break;
 800094c:	bf00      	nop
		//-----------
	}
	//--------------------	
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000044 	.word	0x20000044

0800095c <Encoder_Loop>:
//-----------------------------------------------------------------------------
/*Когда энкодер не вращают на обоих его выводах(A и В) единицы(внутряння подтяжка МК).Это состояние 3 энкодера - начальное состояние энкодера.
*Так-же начальным состоянием может быть  состояние энкодера когда А и В ровны 0.
*Когда вращаю вправо, то после состояния 3 энкодер передет в состояние 1 (А=1, В=0).
*Когда вращают влево, то после состояния 3 энкодер прердет в состояние 2 (А=0, В=1). */
static void Encoder_Loop(void){
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	static uint8_t  cycle   = 0;
	static uint8_t  msCount = 0;
	static uint16_t but[3]  = {0, 0, 0};
	//--------------------
	//Обработка вращения энкодера.
	switch(EncoderStateReg){
 8000960:	4b42      	ldr	r3, [pc, #264]	; (8000a6c <Encoder_Loop+0x110>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <Encoder_Loop+0x12>
 8000968:	2b01      	cmp	r3, #1
 800096a:	d010      	beq.n	800098e <Encoder_Loop+0x32>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
				} 			
		break;
		//-----------
		default:
		break;	
 800096c:	e031      	b.n	80009d2 <Encoder_Loop+0x76>
			if(!(EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 800096e:	4b40      	ldr	r3, [pc, #256]	; (8000a70 <Encoder_Loop+0x114>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d128      	bne.n	80009cc <Encoder_Loop+0x70>
 800097a:	4b3d      	ldr	r3, [pc, #244]	; (8000a70 <Encoder_Loop+0x114>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000982:	2b00      	cmp	r3, #0
 8000984:	d122      	bne.n	80009cc <Encoder_Loop+0x70>
					EncoderStateReg = ENCODER_TURN;
 8000986:	4b39      	ldr	r3, [pc, #228]	; (8000a6c <Encoder_Loop+0x110>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
		break;
 800098c:	e01e      	b.n	80009cc <Encoder_Loop+0x70>
			if( !(EncoderPORT->IDR & EncoderPinA) && (EncoderPORT->IDR & EncoderPinB))
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <Encoder_Loop+0x114>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d108      	bne.n	80009ac <Encoder_Loop+0x50>
 800099a:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <Encoder_Loop+0x114>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d002      	beq.n	80009ac <Encoder_Loop+0x50>
					EncoderStateReg = ENCODER_TURN_RIGHT;//щелчок вправо.
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <Encoder_Loop+0x110>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	701a      	strb	r2, [r3, #0]
		  if( (EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <Encoder_Loop+0x114>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d00b      	beq.n	80009d0 <Encoder_Loop+0x74>
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <Encoder_Loop+0x114>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d105      	bne.n	80009d0 <Encoder_Loop+0x74>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
 80009c4:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <Encoder_Loop+0x110>)
 80009c6:	2203      	movs	r2, #3
 80009c8:	701a      	strb	r2, [r3, #0]
		break;
 80009ca:	e001      	b.n	80009d0 <Encoder_Loop+0x74>
		break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <Encoder_Loop+0x76>
		break;
 80009d0:	bf00      	nop
		//-----------		
	}
	//--------------------
	//Опрос кнопки энкодера.
	if(++msCount >= ENCODER_BUTTON_TIMEOUT)
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <Encoder_Loop+0x118>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <Encoder_Loop+0x118>)
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <Encoder_Loop+0x118>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b09      	cmp	r3, #9
 80009e4:	d93d      	bls.n	8000a62 <Encoder_Loop+0x106>
		{
		  msCount = 0;//сброс счетчика
 80009e6:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <Encoder_Loop+0x118>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
		  //-----------
			if(cycle < 3)
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <Encoder_Loop+0x11c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d811      	bhi.n	8000a18 <Encoder_Loop+0xbc>
				{
					but[cycle] = EncoderPORT->IDR & EncoderButtonPin;//Считывание состояние вывода.
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <Encoder_Loop+0x114>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <Encoder_Loop+0x11c>)
 80009fc:	7812      	ldrb	r2, [r2, #0]
 80009fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a02:	b299      	uxth	r1, r3
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <Encoder_Loop+0x120>)
 8000a06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					cycle++;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <Encoder_Loop+0x11c>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <Encoder_Loop+0x11c>)
 8000a14:	701a      	strb	r2, [r3, #0]
					else EncoderStr.ButtonIsPress = 0;
				}
			//-----------
		}
	//--------------------
}
 8000a16:	e024      	b.n	8000a62 <Encoder_Loop+0x106>
					cycle = 0;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <Encoder_Loop+0x11c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
					if(~((but[0] & but[1]) | (but[1] & but[2]) | (but[0] & but[2])) & EncoderButtonPin) 
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <Encoder_Loop+0x120>)
 8000a20:	885a      	ldrh	r2, [r3, #2]
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <Encoder_Loop+0x120>)
 8000a24:	8819      	ldrh	r1, [r3, #0]
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <Encoder_Loop+0x120>)
 8000a28:	889b      	ldrh	r3, [r3, #4]
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	4013      	ands	r3, r2
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <Encoder_Loop+0x120>)
 8000a34:	8819      	ldrh	r1, [r3, #0]
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <Encoder_Loop+0x120>)
 8000a38:	889b      	ldrh	r3, [r3, #4]
 8000a3a:	400b      	ands	r3, r1
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d005      	beq.n	8000a58 <Encoder_Loop+0xfc>
							 EncoderStr.ButtonIsPress = 1;
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <Encoder_Loop+0x124>)
 8000a4e:	7813      	ldrb	r3, [r2, #0]
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	7013      	strb	r3, [r2, #0]
}
 8000a56:	e004      	b.n	8000a62 <Encoder_Loop+0x106>
					else EncoderStr.ButtonIsPress = 0;
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <Encoder_Loop+0x124>)
 8000a5a:	7813      	ldrb	r3, [r2, #0]
 8000a5c:	f36f 0300 	bfc	r3, #0, #1
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000044 	.word	0x20000044
 8000a70:	40011000 	.word	0x40011000
 8000a74:	20000045 	.word	0x20000045
 8000a78:	20000046 	.word	0x20000046
 8000a7c:	20000048 	.word	0x20000048
 8000a80:	20000000 	.word	0x20000000

08000a84 <Encoder>:
	//Input pull-up
	GPIOB->CRH |= (GPIO_CRH_CNF12_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_CNF10_1);//
	GPIOB->ODR |= (GPIO_ODR_ODR12   | GPIO_ODR_ODR11   | GPIO_ODR_ODR10);	 //
}
//-----------------------------------------------------------------------------
Encoder_t* Encoder(void){
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

	return &EncoderStr;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <Encoder+0x10>)
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000000 	.word	0x20000000

08000a98 <Reset_Handler>:
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopForever+0x2>)
 8000a9a:	4685      	mov	sp, r0
 8000a9c:	f7ff fc6e 	bl	800037c <SystemInit>
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <LoopForever+0x6>)
 8000aa2:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LoopForever+0xa>)
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <LoopForever+0xe>)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:
 8000aaa:	58d4      	ldr	r4, [r2, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:
 8000ab0:	18c4      	adds	r4, r0, r3
 8000ab2:	428c      	cmp	r4, r1
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <LoopForever+0x12>)
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	; (8000ae4 <LoopForever+0x16>)
 8000aba:	2300      	movs	r3, #0
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:
 8000ac2:	42a2      	cmp	r2, r4
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>
 8000ac6:	f000 f811 	bl	8000aec <__libc_init_array>
 8000aca:	f7ff feb7 	bl	800083c <main>

08000ace <LoopForever>:
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
 8000ad0:	20005000 	.word	0x20005000
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	2000000c 	.word	0x2000000c
 8000adc:	08000b54 	.word	0x08000b54
 8000ae0:	2000000c 	.word	0x2000000c
 8000ae4:	20000054 	.word	0x20000054

08000ae8 <ADC1_2_IRQHandler>:
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_2_IRQHandler>
	...

08000aec <__libc_init_array>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	2500      	movs	r5, #0
 8000af0:	4e0c      	ldr	r6, [pc, #48]	; (8000b24 <__libc_init_array+0x38>)
 8000af2:	4c0d      	ldr	r4, [pc, #52]	; (8000b28 <__libc_init_array+0x3c>)
 8000af4:	1ba4      	subs	r4, r4, r6
 8000af6:	10a4      	asrs	r4, r4, #2
 8000af8:	42a5      	cmp	r5, r4
 8000afa:	d109      	bne.n	8000b10 <__libc_init_array+0x24>
 8000afc:	f000 f81a 	bl	8000b34 <_init>
 8000b00:	2500      	movs	r5, #0
 8000b02:	4e0a      	ldr	r6, [pc, #40]	; (8000b2c <__libc_init_array+0x40>)
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <__libc_init_array+0x44>)
 8000b06:	1ba4      	subs	r4, r4, r6
 8000b08:	10a4      	asrs	r4, r4, #2
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	d105      	bne.n	8000b1a <__libc_init_array+0x2e>
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b14:	4798      	blx	r3
 8000b16:	3501      	adds	r5, #1
 8000b18:	e7ee      	b.n	8000af8 <__libc_init_array+0xc>
 8000b1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b1e:	4798      	blx	r3
 8000b20:	3501      	adds	r5, #1
 8000b22:	e7f2      	b.n	8000b0a <__libc_init_array+0x1e>
 8000b24:	08000b4c 	.word	0x08000b4c
 8000b28:	08000b4c 	.word	0x08000b4c
 8000b2c:	08000b4c 	.word	0x08000b4c
 8000b30:	08000b50 	.word	0x08000b50

08000b34 <_init>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	bf00      	nop
 8000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3a:	bc08      	pop	{r3}
 8000b3c:	469e      	mov	lr, r3
 8000b3e:	4770      	bx	lr

08000b40 <_fini>:
 8000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b42:	bf00      	nop
 8000b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b46:	bc08      	pop	{r3}
 8000b48:	469e      	mov	lr, r3
 8000b4a:	4770      	bx	lr
