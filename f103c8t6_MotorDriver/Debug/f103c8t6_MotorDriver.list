
f103c8t6_MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002960  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08002a90  08002a90  00012a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c68  08002c68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c68  08002c68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c68  08002c68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08002c7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  20000110  08002c7c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008493  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001750  00000000  00000000  000284c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000330  00000000  00000000  00029c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000278  00000000  00000000  00029f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001e02  00000000  00000000  0002a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000654b  00000000  00000000  0002bfc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059e90  00000000  00000000  0003250d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008c39d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e24  00000000  00000000  0008c418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08002a78 	.word	0x08002a78

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08002a78 	.word	0x08002a78

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b68:	f1a2 0201 	sub.w	r2, r2, #1
 8000b6c:	d1ed      	bne.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fmul>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d06f      	beq.n	8000dc0 <__aeabi_fmul+0xf8>
 8000ce0:	441a      	add	r2, r3
 8000ce2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce6:	0240      	lsls	r0, r0, #9
 8000ce8:	bf18      	it	ne
 8000cea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cee:	d01e      	beq.n	8000d2e <__aeabi_fmul+0x66>
 8000cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000d00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d08:	bf3e      	ittt	cc
 8000d0a:	0049      	lslcc	r1, r1, #1
 8000d0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d10:	005b      	lslcc	r3, r3, #1
 8000d12:	ea40 0001 	orr.w	r0, r0, r1
 8000d16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d1a:	2afd      	cmp	r2, #253	; 0xfd
 8000d1c:	d81d      	bhi.n	8000d5a <__aeabi_fmul+0x92>
 8000d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d26:	bf08      	it	eq
 8000d28:	f020 0001 	biceq.w	r0, r0, #1
 8000d2c:	4770      	bx	lr
 8000d2e:	f090 0f00 	teq	r0, #0
 8000d32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d36:	bf08      	it	eq
 8000d38:	0249      	lsleq	r1, r1, #9
 8000d3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d42:	3a7f      	subs	r2, #127	; 0x7f
 8000d44:	bfc2      	ittt	gt
 8000d46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4e:	4770      	bxgt	lr
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	dc5d      	bgt.n	8000e18 <__aeabi_fmul+0x150>
 8000d5c:	f112 0f19 	cmn.w	r2, #25
 8000d60:	bfdc      	itt	le
 8000d62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d66:	4770      	bxle	lr
 8000d68:	f1c2 0200 	rsb	r2, r2, #0
 8000d6c:	0041      	lsls	r1, r0, #1
 8000d6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d72:	f1c2 0220 	rsb	r2, r2, #32
 8000d76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7e:	f140 0000 	adc.w	r0, r0, #0
 8000d82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d86:	bf08      	it	eq
 8000d88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8c:	4770      	bx	lr
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0040      	lsleq	r0, r0, #1
 8000d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9e:	3a01      	subeq	r2, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xce>
 8000da2:	ea40 000c 	orr.w	r0, r0, ip
 8000da6:	f093 0f00 	teq	r3, #0
 8000daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0049      	lsleq	r1, r1, #1
 8000db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db6:	3b01      	subeq	r3, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xe6>
 8000dba:	ea41 010c 	orr.w	r1, r1, ip
 8000dbe:	e78f      	b.n	8000ce0 <__aeabi_fmul+0x18>
 8000dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	bf18      	it	ne
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d00a      	beq.n	8000de6 <__aeabi_fmul+0x11e>
 8000dd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd4:	bf18      	it	ne
 8000dd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	d1d8      	bne.n	8000d8e <__aeabi_fmul+0xc6>
 8000ddc:	ea80 0001 	eor.w	r0, r0, r1
 8000de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	bf17      	itett	ne
 8000dec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000df0:	4608      	moveq	r0, r1
 8000df2:	f091 0f00 	teqne	r1, #0
 8000df6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dfa:	d014      	beq.n	8000e26 <__aeabi_fmul+0x15e>
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d101      	bne.n	8000e06 <__aeabi_fmul+0x13e>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	d10f      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e06:	ea93 0f0c 	teq	r3, ip
 8000e0a:	d103      	bne.n	8000e14 <__aeabi_fmul+0x14c>
 8000e0c:	024b      	lsls	r3, r1, #9
 8000e0e:	bf18      	it	ne
 8000e10:	4608      	movne	r0, r1
 8000e12:	d108      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e14:	ea80 0001 	eor.w	r0, r0, r1
 8000e18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	4770      	bx	lr
 8000e26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2e:	4770      	bx	lr

08000e30 <__aeabi_fdiv>:
 8000e30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e38:	bf1e      	ittt	ne
 8000e3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3e:	ea92 0f0c 	teqne	r2, ip
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d069      	beq.n	8000f1c <__aeabi_fdiv+0xec>
 8000e48:	eba2 0203 	sub.w	r2, r2, r3
 8000e4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e50:	0249      	lsls	r1, r1, #9
 8000e52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e56:	d037      	beq.n	8000ec8 <__aeabi_fdiv+0x98>
 8000e58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	bf38      	it	cc
 8000e6c:	005b      	lslcc	r3, r3, #1
 8000e6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e76:	428b      	cmp	r3, r1
 8000e78:	bf24      	itt	cs
 8000e7a:	1a5b      	subcs	r3, r3, r1
 8000e7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e84:	bf24      	itt	cs
 8000e86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e92:	bf24      	itt	cs
 8000e94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	bf18      	it	ne
 8000eae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eb2:	d1e0      	bne.n	8000e76 <__aeabi_fdiv+0x46>
 8000eb4:	2afd      	cmp	r2, #253	; 0xfd
 8000eb6:	f63f af50 	bhi.w	8000d5a <__aeabi_fmul+0x92>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec0:	bf08      	it	eq
 8000ec2:	f020 0001 	biceq.w	r0, r0, #1
 8000ec6:	4770      	bx	lr
 8000ec8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ecc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed0:	327f      	adds	r2, #127	; 0x7f
 8000ed2:	bfc2      	ittt	gt
 8000ed4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000edc:	4770      	bxgt	lr
 8000ede:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	e737      	b.n	8000d5a <__aeabi_fmul+0x92>
 8000eea:	f092 0f00 	teq	r2, #0
 8000eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0040      	lsleq	r0, r0, #1
 8000ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000efa:	3a01      	subeq	r2, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xc2>
 8000efe:	ea40 000c 	orr.w	r0, r0, ip
 8000f02:	f093 0f00 	teq	r3, #0
 8000f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0049      	lsleq	r1, r1, #1
 8000f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f12:	3b01      	subeq	r3, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xda>
 8000f16:	ea41 010c 	orr.w	r1, r1, ip
 8000f1a:	e795      	b.n	8000e48 <__aeabi_fdiv+0x18>
 8000f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f20:	ea92 0f0c 	teq	r2, ip
 8000f24:	d108      	bne.n	8000f38 <__aeabi_fdiv+0x108>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	f47f af7d 	bne.w	8000e26 <__aeabi_fmul+0x15e>
 8000f2c:	ea93 0f0c 	teq	r3, ip
 8000f30:	f47f af70 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e776      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	d104      	bne.n	8000f48 <__aeabi_fdiv+0x118>
 8000f3e:	024b      	lsls	r3, r1, #9
 8000f40:	f43f af4c 	beq.w	8000ddc <__aeabi_fmul+0x114>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e76e      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f4c:	bf18      	it	ne
 8000f4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f52:	d1ca      	bne.n	8000eea <__aeabi_fdiv+0xba>
 8000f54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f58:	f47f af5c 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f60:	f47f af3c 	bne.w	8000ddc <__aeabi_fmul+0x114>
 8000f64:	e75f      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f66:	bf00      	nop

08000f68 <Blink_Loop>:

//-----------------------------------------------------------------------------
static volatile uint16_t BlinkReg = 0;
//-----------------------------------------------------------------------------
//Процесс для мигания светодиодами.
void Blink_Loop(void){
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	
	static uint16_t blinkCount = 0;
  //--------------------
	++blinkCount;
 8000f6c:	4b5c      	ldr	r3, [pc, #368]	; (80010e0 <Blink_Loop+0x178>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b5a      	ldr	r3, [pc, #360]	; (80010e0 <Blink_Loop+0x178>)
 8000f76:	801a      	strh	r2, [r3, #0]
	BlinkReg ^= (1 << INTERVAL_1_mS);
 8000f78:	4b5a      	ldr	r3, [pc, #360]	; (80010e4 <Blink_Loop+0x17c>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	f083 0301 	eor.w	r3, r3, #1
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b57      	ldr	r3, [pc, #348]	; (80010e4 <Blink_Loop+0x17c>)
 8000f86:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 2)    == 0) BlinkReg ^= (1 << INTERVAL_2_mS);
 8000f88:	4b55      	ldr	r3, [pc, #340]	; (80010e0 <Blink_Loop+0x178>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d107      	bne.n	8000fa6 <Blink_Loop+0x3e>
 8000f96:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <Blink_Loop+0x17c>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f083 0302 	eor.w	r3, r3, #2
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <Blink_Loop+0x17c>)
 8000fa4:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 5)    == 0) BlinkReg ^= (1 << INTERVAL_5_mS);
 8000fa6:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <Blink_Loop+0x178>)
 8000fa8:	881a      	ldrh	r2, [r3, #0]
 8000faa:	4b4f      	ldr	r3, [pc, #316]	; (80010e8 <Blink_Loop+0x180>)
 8000fac:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb0:	0899      	lsrs	r1, r3, #2
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d107      	bne.n	8000fd0 <Blink_Loop+0x68>
 8000fc0:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <Blink_Loop+0x17c>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f083 0304 	eor.w	r3, r3, #4
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b45      	ldr	r3, [pc, #276]	; (80010e4 <Blink_Loop+0x17c>)
 8000fce:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 10)   == 0) BlinkReg ^= (1 << INTERVAL_10_mS);
 8000fd0:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <Blink_Loop+0x178>)
 8000fd2:	881a      	ldrh	r2, [r3, #0]
 8000fd4:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <Blink_Loop+0x180>)
 8000fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8000fda:	08d9      	lsrs	r1, r3, #3
 8000fdc:	460b      	mov	r3, r1
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d107      	bne.n	8000ffc <Blink_Loop+0x94>
 8000fec:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <Blink_Loop+0x17c>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	f083 0308 	eor.w	r3, r3, #8
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <Blink_Loop+0x17c>)
 8000ffa:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 50)   == 0) BlinkReg ^= (1 << INTERVAL_50_mS);
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <Blink_Loop+0x178>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	4a3a      	ldr	r2, [pc, #232]	; (80010ec <Blink_Loop+0x184>)
 8001002:	fba2 1203 	umull	r1, r2, r2, r3
 8001006:	0912      	lsrs	r2, r2, #4
 8001008:	2132      	movs	r1, #50	; 0x32
 800100a:	fb01 f202 	mul.w	r2, r1, r2
 800100e:	1a9b      	subs	r3, r3, r2
 8001010:	b29b      	uxth	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <Blink_Loop+0xbe>
 8001016:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <Blink_Loop+0x17c>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	f083 0310 	eor.w	r3, r3, #16
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <Blink_Loop+0x17c>)
 8001024:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 100)  == 0) BlinkReg ^= (1 << INTERVAL_100_mS);
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <Blink_Loop+0x178>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	4a30      	ldr	r2, [pc, #192]	; (80010ec <Blink_Loop+0x184>)
 800102c:	fba2 1203 	umull	r1, r2, r2, r3
 8001030:	0952      	lsrs	r2, r2, #5
 8001032:	2164      	movs	r1, #100	; 0x64
 8001034:	fb01 f202 	mul.w	r2, r1, r2
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d107      	bne.n	8001050 <Blink_Loop+0xe8>
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <Blink_Loop+0x17c>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	f083 0320 	eor.w	r3, r3, #32
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <Blink_Loop+0x17c>)
 800104e:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 250)  == 0) BlinkReg ^= (1 << INTERVAL_250_mS);	
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <Blink_Loop+0x178>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	4a26      	ldr	r2, [pc, #152]	; (80010f0 <Blink_Loop+0x188>)
 8001056:	fba2 1203 	umull	r1, r2, r2, r3
 800105a:	0912      	lsrs	r2, r2, #4
 800105c:	21fa      	movs	r1, #250	; 0xfa
 800105e:	fb01 f202 	mul.w	r2, r1, r2
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	b29b      	uxth	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d107      	bne.n	800107a <Blink_Loop+0x112>
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <Blink_Loop+0x17c>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <Blink_Loop+0x17c>)
 8001078:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 500)  == 0) BlinkReg ^= (1 << INTERVAL_500_mS);
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <Blink_Loop+0x178>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <Blink_Loop+0x188>)
 8001080:	fba2 1203 	umull	r1, r2, r2, r3
 8001084:	0952      	lsrs	r2, r2, #5
 8001086:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800108a:	fb01 f202 	mul.w	r2, r1, r2
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	b29b      	uxth	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d107      	bne.n	80010a6 <Blink_Loop+0x13e>
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <Blink_Loop+0x17c>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <Blink_Loop+0x17c>)
 80010a4:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 1000) == 0)
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <Blink_Loop+0x178>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <Blink_Loop+0x188>)
 80010ac:	fba2 1203 	umull	r1, r2, r2, r3
 80010b0:	0992      	lsrs	r2, r2, #6
 80010b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010b6:	fb01 f202 	mul.w	r2, r1, r2
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	b29b      	uxth	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10a      	bne.n	80010d8 <Blink_Loop+0x170>
		{
			BlinkReg  ^= (1 << INTERVAL_1000_mS);
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <Blink_Loop+0x17c>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <Blink_Loop+0x17c>)
 80010d0:	801a      	strh	r2, [r3, #0]
			blinkCount = 0;
 80010d2:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <Blink_Loop+0x178>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	801a      	strh	r2, [r3, #0]
		}
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	2000002a 	.word	0x2000002a
 80010e4:	20000028 	.word	0x20000028
 80010e8:	cccccccd 	.word	0xcccccccd
 80010ec:	51eb851f 	.word	0x51eb851f
 80010f0:	10624dd3 	.word	0x10624dd3

080010f4 <Blink>:
//-----------------------------------------------------------------------------
uint16_t Blink(BlinkIntervalEnum_t interval){
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	
	if(BlinkReg & (1 << interval)) return 0xFFFF;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <Blink+0x34>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	fa42 f303 	asr.w	r3, r2, r3
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <Blink+0x26>
 8001114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001118:	e000      	b.n	800111c <Blink+0x28>
	else											     return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000028 	.word	0x20000028

0800112c <msDelay_Loop>:

//*******************************************************************************************
static volatile uint32_t msCounter = 0;
//*******************************************************************************************
//*******************************************************************************************
void msDelay_Loop(void){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

	msCounter++;
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <msDelay_Loop+0x18>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a03      	ldr	r2, [pc, #12]	; (8001144 <msDelay_Loop+0x18>)
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000002c 	.word	0x2000002c

08001148 <msDelay>:
//**********************************************************
void msDelay(volatile uint32_t del){
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

	if(del == 0) return;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00a      	beq.n	800116c <msDelay+0x24>
	msCounter = 0;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <msDelay+0x30>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
	while(msCounter < del){__NOP();};
 800115c:	e000      	b.n	8001160 <msDelay+0x18>
 800115e:	bf00      	nop
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <msDelay+0x30>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	d3f9      	bcc.n	800115e <msDelay+0x16>
 800116a:	e000      	b.n	800116e <msDelay+0x26>
	if(del == 0) return;
 800116c:	bf00      	nop
}
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000002c 	.word	0x2000002c

0800117c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <SystemInit+0x5c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <SystemInit+0x5c>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <SystemInit+0x5c>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	4911      	ldr	r1, [pc, #68]	; (80011d8 <SystemInit+0x5c>)
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <SystemInit+0x60>)
 8001194:	4013      	ands	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <SystemInit+0x5c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <SystemInit+0x5c>)
 800119e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <SystemInit+0x5c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <SystemInit+0x5c>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <SystemInit+0x5c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <SystemInit+0x5c>)
 80011ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80011be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SystemInit+0x5c>)
 80011c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SystemInit+0x64>)
 80011ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000
 80011dc:	f8ff0000 	.word	0xf8ff0000
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <Gpio_Init>:
static volatile uint16_t GpioAState = 0; //
static volatile uint16_t GpioBState = 0; //
static volatile uint16_t GpioCState = 0; //
//-----------------------------------------------------------------------------
//Инициализация переферии.
void Gpio_Init (void){
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  
  //Включаем тактирование порта A, B, C, D и модуля альтернативных функций.
  RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN |
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <Gpio_Init+0x5c>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <Gpio_Init+0x5c>)
 80011ee:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 80011f2:	6193      	str	r3, [r2, #24]
                   RCC_APB2ENR_IOPBEN |
                   RCC_APB2ENR_IOPCEN |
                   RCC_APB2ENR_IOPDEN |
                   RCC_APB2ENR_AFIOEN);
  //Отключение JTAG-D от порта PA15, отладка через SWD активна.
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE; 
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <Gpio_Init+0x60>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <Gpio_Init+0x60>)
 80011fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011fe:	6053      	str	r3, [r2, #4]
  //RCC->CFGR |= RCC_CFGR_MCO_HSI;   //Подключение к выводу PA8 частоту HSI.
  //RCC->CFGR |= RCC_CFGR_MCO_HSE;      //Подключение к выводу PA8 частоту HSE.
  //RCC->CFGR |= RCC_CFGR_MCO_PLL;   //Подключение к выводу PA8 частоту PLL/2. 
  //--------------------
  //PC13 - Led.
  GPIOC->CRH &= ~GPIO_CRH_CNF13;//выход, режим - push-pull.
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <Gpio_Init+0x64>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a10      	ldr	r2, [pc, #64]	; (8001248 <Gpio_Init+0x64>)
 8001206:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800120a:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= GPIO_CRH_MODE13;//тактирование 50МГц.
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <Gpio_Init+0x64>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <Gpio_Init+0x64>)
 8001212:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001216:	6053      	str	r3, [r2, #4]
  //--------------------
  //Управление двигателем.
  //IN1 - PA5
  //IN2 - PA4
  //IN3 - PA3
  GPIOA->CRL &= ~(GPIO_CRL_CNF5  |GPIO_CRL_CNF4   | GPIO_CRL_CNF3 |
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <Gpio_Init+0x68>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <Gpio_Init+0x68>)
 800121e:	f023 13cc 	bic.w	r3, r3, #13369548	; 0xcc00cc
 8001222:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 8001226:	6013      	str	r3, [r2, #0]
		  	  	  GPIO_CRL_CNF2  |GPIO_CRL_CNF1   | GPIO_CRL_CNF0); //выход, режим - push-pull.

  GPIOA->CRL |=  (GPIO_CRL_MODE5 | GPIO_CRL_MODE4 | GPIO_CRL_MODE3 |
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <Gpio_Init+0x68>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <Gpio_Init+0x68>)
 800122e:	f043 1333 	orr.w	r3, r3, #3342387	; 0x330033
 8001232:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8001236:	6013      	str	r3, [r2, #0]
                  GPIO_CRH_MODE12 );//тактирование 50МГц.
  GPIOD->CRL |= ( GPIO_CRL_MODE2  );
	//--------------------
	 *
	 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	40011000 	.word	0x40011000
 800124c:	40010800 	.word	0x40010800

08001250 <I2C_Int_Handler>:
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
}
//*******************************************************************************************
//*******************************************************************************************
static void I2C_Int_Handler(I2C_TypeDef *i2c, uint8_t slaveAddr){
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t sr1 = i2c->SR1;//Чтениех этих регистров сбрасывает флаги событий I2C.
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	60fb      	str	r3, [r7, #12]
	//volatile uint32_t sr2 = i2c->SR2;
	//---------------------
	//Start condition generated. Clear: read SR1, write to DR
	if(sr1 & I2C_SR1_SB)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <I2C_Int_Handler+0x2e>
		{
		  i2c->DR = I2C_ADDRESS(slaveAddr, I2C_Mode);
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <I2C_Int_Handler+0xbc>)
 8001272:	7812      	ldrb	r2, [r2, #0]
 8001274:	4313      	orrs	r3, r2
 8001276:	461a      	mov	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	611a      	str	r2, [r3, #16]
		  return;
 800127c:	e042      	b.n	8001304 <I2C_Int_Handler+0xb4>
		}
	//Address sent. Clear: read SR1, read SR2
	else if(sr1 & I2C_SR1_ADDR)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d010      	beq.n	80012aa <I2C_Int_Handler+0x5a>
	   {
	      if(I2C_Mode == I2C_MODE_WRITE)
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <I2C_Int_Handler+0xbc>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d136      	bne.n	80012fe <I2C_Int_Handler+0xae>
			  {
	    	  	  i2c->DR = I2C_pBuf[0];
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <I2C_Int_Handler+0xc0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	611a      	str	r2, [r3, #16]
	    	  	  I2C_TxCnt++;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <I2C_Int_Handler+0xc4>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <I2C_Int_Handler+0xc4>)
 80012a6:	801a      	strh	r2, [r3, #0]
//						// не дописано! не использовать
//						I2C_NUMB->DR = (uint8_t)AddrReg;            // First byte
//						AddrReg>>=8;
//					 }
//			  }
	      return;
 80012a8:	e029      	b.n	80012fe <I2C_Int_Handler+0xae>
//	else if(sr1 & I2C_SR1_AF)
//		{
//			I2C_TxCnt++;
//		}
	//Data Register Empty (transmitters).
	else if(sr1 & I2C_SR1_TXE)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01f      	beq.n	80012f4 <I2C_Int_Handler+0xa4>
		{
			i2c->DR = I2C_pBuf[I2C_TxCnt];
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <I2C_Int_Handler+0xc0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a16      	ldr	r2, [pc, #88]	; (8001314 <I2C_Int_Handler+0xc4>)
 80012ba:	8812      	ldrh	r2, [r2, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	611a      	str	r2, [r3, #16]
			I2C_TxCnt++;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <I2C_Int_Handler+0xc4>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <I2C_Int_Handler+0xc4>)
 80012d0:	801a      	strh	r2, [r3, #0]
			if(I2C_TxCnt >= I2C_TxSize)
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <I2C_Int_Handler+0xc8>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <I2C_Int_Handler+0xc4>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d810      	bhi.n	8001302 <I2C_Int_Handler+0xb2>
				{
					I2C_TxCnt = 0;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <I2C_Int_Handler+0xc4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	801a      	strh	r2, [r3, #0]
					i2c->CR1 |= I2C_CR1_STOP;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	601a      	str	r2, [r3, #0]
				}
			return;
 80012f2:	e006      	b.n	8001302 <I2C_Int_Handler+0xb2>
		}
	//Byte Transfer Finished.
	else if(sr1 & I2C_SR1_BTF)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	e002      	b.n	8001304 <I2C_Int_Handler+0xb4>
	      return;
 80012fe:	bf00      	nop
 8001300:	e000      	b.n	8001304 <I2C_Int_Handler+0xb4>
			return;
 8001302:	bf00      	nop
//	if(sr1 & I2C_SR1_TXE)
//		{
//			if(TxCounter < I2C_TxSize) i2c->DR   = I2C_pBuf[TxCounter++];
//			else		               i2c->CR1 |= I2C_CR1_STOP;
//		}
}
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	20000039 	.word	0x20000039
 8001310:	20000034 	.word	0x20000034
 8001314:	20000030 	.word	0x20000030
 8001318:	20000038 	.word	0x20000038

0800131c <I2C1_EV_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание I2C1.
void I2C1_EV_IRQHandler(void){
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

//	I2C_handler(I2C1, addr);
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <I2C2_EV_IRQHandler>:
//**********************************************************
//Прерывание I2C2.
void I2C2_EV_IRQHandler(void){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

	I2C_Int_Handler(I2C2, I2C_SlaveAddr);
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <I2C2_EV_IRQHandler+0x14>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <I2C2_EV_IRQHandler+0x18>)
 8001334:	f7ff ff8c 	bl	8001250 <I2C_Int_Handler>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000032 	.word	0x20000032
 8001340:	40005800 	.word	0x40005800

08001344 <SPI2_IRQHandler>:
	//--------------------
	return (uint8_t)SPI2->DR;
} 
//-----------------------------------------------------------------------------
//Прерываени от SPI2.
void SPI2_IRQHandler(void){
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  
  //uint16_t tmp;
  //--------------------
  //причина прерывания - окончание передачи байта
  if(SPI2->SR & SPI_SR_TXE)
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <SPI2_IRQHandler+0x34>)
 800134a:	689b      	ldr	r3, [r3, #8]

      //LC2SostGreenLedToggel;//Мигаем для отладки          
    }
  //--------------------
  //причина прерывания - принят байт данных
  if(SPI2->SR &= SPI_SR_RXNE)
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <SPI2_IRQHandler+0x34>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a09      	ldr	r2, [pc, #36]	; (8001378 <SPI2_IRQHandler+0x34>)
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	6093      	str	r3, [r2, #8]
      //tmp = SPI1->DR;                //прочитать принятые данные
      //выполняем какие-то действия      
    }
  //--------------------
  //причина прерывания - ошибка режима ведущего
  if(SPI2->SR &= SPI_SR_MODF)
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SPI2_IRQHandler+0x34>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <SPI2_IRQHandler+0x34>)
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	6093      	str	r3, [r2, #8]
    {
      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
    }
  //--------------------
  //причина прерывания - переполнение приемника данных
  if(SPI2->SR &= SPI_SR_OVR)
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SPI2_IRQHandler+0x34>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4a03      	ldr	r2, [pc, #12]	; (8001378 <SPI2_IRQHandler+0x34>)
 800136a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800136e:	6093      	str	r3, [r2, #8]
//  if(SPI2->SR &= SSPI_SR_CRCERR)
//    {
//      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
//    }
  //--------------------
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40003800 	.word	0x40003800

0800137c <Init_RCC>:
#include "sys_ST.h"

//**********************************************************************************************
//**********************************************************************************************
//Настройка тактирования 72МГц. Внешний кварц 8 МГц.
static uint32_t Init_RCC(void){
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
	
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
	//--------------------
	//SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/        
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);//Enable HSE.
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <Init_RCC+0xf8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a39      	ldr	r2, [pc, #228]	; (8001474 <Init_RCC+0xf8>)
 8001390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001394:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready and if Time out is reached exit */
	do{
			HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <Init_RCC+0xf8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	603b      	str	r3, [r7, #0]
			StartUpCounter++;  
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3301      	adds	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
	  }
	while((HSEStatus == 0) && (StartUpCounter != 0xFFFF));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d104      	bne.n	80013b6 <Init_RCC+0x3a>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d1ef      	bne.n	8001396 <Init_RCC+0x1a>
	//--------------------
	if ((RCC->CR & RCC_CR_HSERDY) != 0) HSEStatus = (uint32_t)0x01;
 80013b6:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <Init_RCC+0xf8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <Init_RCC+0x4c>
 80013c2:	2301      	movs	r3, #1
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	e001      	b.n	80013cc <Init_RCC+0x50>
	else                                HSEStatus = (uint32_t)0x00;
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
	//--------------------
	if(HSEStatus == (uint32_t)0x01)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d149      	bne.n	8001466 <Init_RCC+0xea>
		{
			/* Enable Prefetch Buffer */
			FLASH->ACR |= FLASH_ACR_PRFTBE;
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <Init_RCC+0xfc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a28      	ldr	r2, [pc, #160]	; (8001478 <Init_RCC+0xfc>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	6013      	str	r3, [r2, #0]
			/* Flash 2 wait state */
			FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <Init_RCC+0xfc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a25      	ldr	r2, [pc, #148]	; (8001478 <Init_RCC+0xfc>)
 80013e4:	f023 0307 	bic.w	r3, r3, #7
 80013e8:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;  
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <Init_RCC+0xfc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a22      	ldr	r2, [pc, #136]	; (8001478 <Init_RCC+0xfc>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6013      	str	r3, [r2, #0]
			//--------------------
			//Настройка тактирования шин AHB, APB1 и APB2.
			RCC->CFGR |= (uint32_t)(RCC_CFGR_HPRE_DIV1  | // AHB prescaler. SYSCLK not divided
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <Init_RCC+0xf8>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <Init_RCC+0xf8>)
 80013fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001400:	6053      	str	r3, [r2, #4]
									RCC_CFGR_PPRE2_DIV1 | // APB2 = AHB. APB2 Fmax = 72MHz.
									RCC_CFGR_PPRE1_DIV2); // APB1 = (AHB / 2). APB1 Fmax = 36MHz.
			//--------------------
			//PLL configuration: = HSE * 9 = 72 MHz */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <Init_RCC+0xf8>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <Init_RCC+0xf8>)
 8001408:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800140c:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_Msk        |  // HSE oscillator clock selected as PLL input clock
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <Init_RCC+0xf8>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <Init_RCC+0xf8>)
 8001414:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001418:	6053      	str	r3, [r2, #4]
															//RCC_CFGR_PLLXTPRE_HSE_Div2 |  // HSE clock divided by 2                                
															RCC_CFGR_PLLMULL9);
			/* Enable PLL */
			RCC->CR |= RCC_CR_PLLON;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <Init_RCC+0xf8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <Init_RCC+0xf8>)
 8001420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001424:	6013      	str	r3, [r2, #0]
			/* Wait till PLL is ready */
			while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 8001426:	bf00      	nop
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <Init_RCC+0xf8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f9      	beq.n	8001428 <Init_RCC+0xac>
			/* Select PLL as system clock source */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <Init_RCC+0xf8>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <Init_RCC+0xf8>)
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <Init_RCC+0xf8>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <Init_RCC+0xf8>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	6053      	str	r3, [r2, #4]
			/* Wait till PLL is used as system clock source */
			while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)  {}        
 800144c:	bf00      	nop
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <Init_RCC+0xf8>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d1f9      	bne.n	800144e <Init_RCC+0xd2>
			RCC->CR |= RCC_CR_CSSON; //Включаем защиту HSE от сбоев - CSS.
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <Init_RCC+0xf8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <Init_RCC+0xf8>)
 8001460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001464:	6013      	str	r3, [r2, #0]
	else
		{
				/* If HSE fails to start-up, the application will have wrong clock 
				 configuration. User can add here some code to deal with this error */
		} 
	return HSEStatus;
 8001466:	683b      	ldr	r3, [r7, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	40022000 	.word	0x40022000

0800147c <Sys_Init>:
//*****************************************************************************
void Sys_Init(void){
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	
  //Reset the RCC clock configuration to the default reset state(for debug purpose).
  RCC->CR 	|= (uint32_t)0x00000001;	/* Set HSION bit */
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <Sys_Init+0x54>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <Sys_Init+0x54>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF0FF0000;	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <Sys_Init+0x54>)
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	490f      	ldr	r1, [pc, #60]	; (80014d0 <Sys_Init+0x54>)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <Sys_Init+0x58>)
 8001494:	4013      	ands	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
  RCC->CR 	&= (uint32_t)0xFEF6FFFF;  /* Reset HSEON, CSSON and PLLON bits */
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <Sys_Init+0x54>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <Sys_Init+0x54>)
 800149e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
  RCC->CR 	&= (uint32_t)0xFFFBFFFF;  /* Reset HSEBYP bit */
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <Sys_Init+0x54>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <Sys_Init+0x54>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b2:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <Sys_Init+0x54>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <Sys_Init+0x54>)
 80014ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014be:	6053      	str	r3, [r2, #4]
  RCC->CIR 	 = 0x009F0000;  				  /* Disable all interrupts and clear pending bits  */
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <Sys_Init+0x54>)
 80014c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014c6:	609a      	str	r2, [r3, #8]
  //RCC->CFGR2 = 0x00000000;      			/* Reset CFGR2 register */  
	
  Init_RCC();//Настройка тактирования микроконтроллера. Внешний кварц 8 МГц.
 80014c8:	f7ff ff58 	bl	800137c <Init_RCC>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	f0ff0000 	.word	0xf0ff0000

080014d8 <NMI_Handler>:
	return (*(__IO uint32_t*)address);
}
//**********************************************************************************************
//**********************************************************************************************
//Прерываени блока CSS. Возникает при сбое тактирования HSE.
void NMI_Handler( void){
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  //RCC->CIR |= RCC_CIR_CSSC;//Очищаем флаг прерывания CSS иначе прерывание будет генерироваться бесконечно.
	//NVIC_SystemReset();
  //LC1SostRedLedOn;
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HardFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void HardFault_Handler( void){
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
//  if(SCB->HFSR & SCB_HFSR_FORCED)   LC1SostRedLedOn();
//  if(SCB->HFSR & SCB_HFSR_DEBUGEVT) LC2SostRedLedOn();
	
//	LC1SostRedLedOn();
//	LC2SostRedLedOn();
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <MemManage_Handler>:
//*****************************************************************************
//*****************************************************************************
void MemManage_Handler( void){
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

//  LC2SostRedLedOn();
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <BusFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void BusFault_Handler( void){
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

//  LC2SostGreenLedOn();
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <UsageFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void UsageFault_Handler( void){
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <SVC_Handler>:
//*****************************************************************************
//*****************************************************************************
void SVC_Handler( void){
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <SysTick_Init>:

#include "sys_tick_ST.h"

//-----------------------------------------------------------------------------
//Инициализация системного таймера SysTick.
void SysTick_Init(void){
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

	SysTick->LOAD = TimerTick;	//Загрузка значения.
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SysTick_Init+0x20>)
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <SysTick_Init+0x24>)
 8001528:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = TimerTick;	//Обнуление таймера. 
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Init+0x20>)
 800152c:	4a05      	ldr	r2, [pc, #20]	; (8001544 <SysTick_Init+0x24>)
 800152e:	609a      	str	r2, [r3, #8]
                              //При записи любого значения этот регист обнуляется, с обнулением флага COUNTFLAG. 
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | //Тактирование частотой процессора (24МГц).
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <SysTick_Init+0x20>)
 8001532:	2207      	movs	r2, #7
 8001534:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk   | //Рразрешение прерывания.
					SysTick_CTRL_ENABLE_Msk;     //Резрешение таймеру считать.
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010
 8001544:	0001193f 	.word	0x0001193f

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4906      	ldr	r1, [pc, #24]	; (800157c <__NVIC_EnableIRQ+0x34>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <TIM1_InitForPWM>:

#include "timers_ST.h"

//*******************************************************************************************
//*******************************************************************************************
void TIM1_InitForPWM(void){
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

	//Включение тактирования таймера.
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <TIM1_InitForPWM+0xc4>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <TIM1_InitForPWM+0xc4>)
 80015de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e2:	6193      	str	r3, [r2, #24]
	//Прескаллер.
	//APB2_CLK = 72MHz, TIM1_CLK = APB2_CLK * 1 = 72MHz.
	TIM1->PSC = 0;                //PSC[15:0]: Prescaler value.
 80015e4:	4b2d      	ldr	r3, [pc, #180]	; (800169c <TIM1_InitForPWM+0xc8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
								  //The counter clock frequency (CK_CNT) is equal to fCK_PSC / (PSC[15:0] + 1).
								  //таймер будет тактироваться с частотой 72МГц/(PSC[15:0] + 1) = 72MГц.
	TIM1->ARR = (1800 - 1);       //Auto reload register. - это значение, до которого будет считать таймер.
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <TIM1_InitForPWM+0xc8>)
 80015ec:	f240 7207 	movw	r2, #1799	; 0x707
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CR1  |= TIM_CR1_ARPE;   //Включен режим предварительной записи регистра автоперезагрузки
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <TIM1_InitForPWM+0xc8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a29      	ldr	r2, [pc, #164]	; (800169c <TIM1_InitForPWM+0xc8>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fc:	6013      	str	r3, [r2, #0]
	TIM1->CCER |= TIM_CCER_CC1E | //Enable CC1 - включение первого канала
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a26      	ldr	r2, [pc, #152]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001604:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6213      	str	r3, [r2, #32]
				  TIM_CCER_CC2E | //Enable CC2 - включение второго канала
				  TIM_CCER_CC3E;  //Enable CC3 - включение третьего канала.
	//Задаем режим работы канала 1 - PWM mode on OC1
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | //OC1M : Output compare 1 mode - 110: PWM mode 1.
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a22      	ldr	r2, [pc, #136]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001614:	f043 036c 	orr.w	r3, r3, #108	; 0x6c
 8001618:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC1PE  |					 //OC1PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.
				   TIM_CCMR1_OC1FE;						 //OC1FE: Output Compare 1 fast enable.
	//Задаем режим работы канала 2 - PWM mode on OC2
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | //OC2M : Output compare 1 mode - 110: PWM mode 1.
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <TIM1_InitForPWM+0xc8>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a1f      	ldr	r2, [pc, #124]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001620:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 8001624:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC2PE  |					 //OC2PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.
				   TIM_CCMR1_OC2FE;						 //OC2FE: Output Compare 1 fast enable.
	//Задаем режим работы канала 3 - PWM mode on OC3
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | //OC3M : Output compare 1 mode - 110: PWM mode 1.
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <TIM1_InitForPWM+0xc8>)
 800162c:	f043 036c 	orr.w	r3, r3, #108	; 0x6c
 8001630:	61d3      	str	r3, [r2, #28]
				   TIM_CCMR2_OC3PE  |					 //OC3PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.
				   TIM_CCMR2_OC3FE;						 //OC3FE: Output Compare 1 fast enable.

	//Режимы работы ШИМ. CMS[1:0]: Center-aligned mode selection
	TIM1->CR1 &= ~(TIM_CR1_CMS_0 | TIM_CR1_CMS_1);
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a19      	ldr	r2, [pc, #100]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001638:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800163c:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |=   TIM_CR1_CMS_0; 			  // выравнивания по центру - Режим 1.
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a16      	ldr	r2, [pc, #88]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	6013      	str	r3, [r2, #0]
	//TIM1->CR1 |=   TIM_CR1_CMS_1;				  // выравнивания по центру - Режим 2.
	//TIM1->CR1 |=   TIM_CR1_CMS_0 | TIM_CR1_CMS_1; // выравнивания по центру - Режим 3.

	//TIM1->BDTR |= TIM_BDTR_MOE;// MOE: Main output enable. Разрешаем вывод сигнала на выводы
	TIM1->BDTR |= TIM_BDTR_AOE;//AOE: Automatic output enable
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <TIM1_InitForPWM+0xc8>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
	//TIM1->BDTR |= (7 << 5);         // Мертвое время. Константа расчитана из задержек конкретного железа.

	//Настройка ножки микроконтроллера.
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;	//Включение тактирования PORTA.
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <TIM1_InitForPWM+0xc4>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <TIM1_InitForPWM+0xc4>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6193      	str	r3, [r2, #24]

	GPIOA->CRH |= GPIO_CRH_CNF8_1 | //PA8(TIM1_CH1)  - выход, альтернативный режим push-pull.
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <TIM1_InitForPWM+0xcc>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <TIM1_InitForPWM+0xcc>)
 8001668:	f443 6308 	orr.w	r3, r3, #2176	; 0x880
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6053      	str	r3, [r2, #4]
			      GPIO_CRH_CNF9_1 | //PA9(TIM1_CH2)  - выход, альтернативный режим push-pull.
				  GPIO_CRH_CNF10_1; //PA10(TIM1_CH3) - выход, альтернативный режим push-pull.

	GPIOA->CRH |= GPIO_CRH_MODE8 |  //PA8(TIM1_CH1)  - тактирование 50МГц.
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <TIM1_InitForPWM+0xcc>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <TIM1_InitForPWM+0xcc>)
 8001678:	f443 734c 	orr.w	r3, r3, #816	; 0x330
 800167c:	f043 0303 	orr.w	r3, r3, #3
 8001680:	6053      	str	r3, [r2, #4]
				  GPIO_CRH_MODE9 |  //PA9(TIM1_CH2)  - тактирование 50МГц.
				  GPIO_CRH_MODE10;  //PA10(TIM1_CH3) - тактирование 50МГц.
	//Включение таймера
	TIM1->CR1 |= TIM_CR1_CEN;//CEN: Counter enable
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <TIM1_InitForPWM+0xc8>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6013      	str	r3, [r2, #0]
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40012c00 	.word	0x40012c00
 80016a0:	40010800 	.word	0x40010800

080016a4 <TIM4_Init>:
	//Включение таймера
	TIM3->CR1 |= TIM_CR1_CEN;
}
//*******************************************************************************************
//*******************************************************************************************
void TIM4_Init(void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0

	//Включение тактирования таймера.
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <TIM4_Init+0x40>)
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <TIM4_Init+0x40>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	61d3      	str	r3, [r2, #28]

	//Прескаллер.
	//APB1_CLK = 36MHz, TIM4_CLK = APB1_CLK * 2 = 72MHz.
	TIM4->PSC = (72 - 1);  //таймер будет тактироваться с частотой 72МГц/72 = 1МГц.
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <TIM4_Init+0x44>)
 80016b6:	2247      	movs	r2, #71	; 0x47
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = (100000 - 1);//Auto reload register - это значение, до которого будет считать таймер.
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <TIM4_Init+0x44>)
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <TIM4_Init+0x48>)
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->DIER |= TIM_DIER_UIE; //Update interrupt enable
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <TIM4_Init+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <TIM4_Init+0x44>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	60d3      	str	r3, [r2, #12]
	TIM4->CR1   = TIM_CR1_ARPE |//Auto-reload preload enable
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <TIM4_Init+0x44>)
 80016ce:	2281      	movs	r2, #129	; 0x81
 80016d0:	601a      	str	r2, [r3, #0]
				  TIM_CR1_CEN;  //Counter enable
	//Разрешение прерывания от TIM4.
	NVIC_SetPriority(TIM4_IRQn, 15);
 80016d2:	210f      	movs	r1, #15
 80016d4:	201e      	movs	r0, #30
 80016d6:	f7ff ff53 	bl	8001580 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 80016da:	201e      	movs	r0, #30
 80016dc:	f7ff ff34 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40000800 	.word	0x40000800
 80016ec:	0001869f 	.word	0x0001869f

080016f0 <Led_Blink>:
	riseReg  = (oldState ^ event) & event;
	oldState = event;
	if(riseReg) (*var)--;
}
//************************************************************
void Led_Blink(void){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

	if(Blink(INTERVAL_50_mS)) Led_PC13_On();
 80016f4:	2004      	movs	r0, #4
 80016f6:	f7ff fcfd 	bl	80010f4 <Blink>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <Led_Blink+0x1a>
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <Led_Blink+0x28>)
 8001702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001706:	611a      	str	r2, [r3, #16]
	else					  Led_PC13_Off();
}
 8001708:	e003      	b.n	8001712 <Led_Blink+0x22>
	else					  Led_PC13_Off();
 800170a:	4b03      	ldr	r3, [pc, #12]	; (8001718 <Led_Blink+0x28>)
 800170c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001710:	611a      	str	r2, [r3, #16]
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40011000 	.word	0x40011000

0800171c <FillSinTable>:

static uint16_t sin_arr[STEPS];

//************************************************************
//************************************************************
void FillSinTable(void){
 800171c:	b5b0      	push	{r4, r5, r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0

	float arg = (PI / STEPS);
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <FillSinTable+0x70>)
 8001724:	603b      	str	r3, [r7, #0]
	//--------------------------
	for(int i = 0; i < STEPS; i++)
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	e028      	b.n	800177e <FillSinTable+0x62>
		{
			sin_arr[i] = (uint16_t)( fabs(PRECISION * sin(i * arg)) );
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fa77 	bl	8000c20 <__aeabi_i2f>
 8001732:	4603      	mov	r3, r0
 8001734:	6839      	ldr	r1, [r7, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fac6 	bl	8000cc8 <__aeabi_fmul>
 800173c:	4603      	mov	r3, r0
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fe7a 	bl	8000438 <__aeabi_f2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f000 f9aa 	bl	8001aa4 <sin>
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <FillSinTable+0x74>)
 8001756:	f7fe fec7 	bl	80004e8 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4614      	mov	r4, r2
 8001760:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001764:	4620      	mov	r0, r4
 8001766:	4629      	mov	r1, r5
 8001768:	f7ff f980 	bl	8000a6c <__aeabi_d2uiz>
 800176c:	4603      	mov	r3, r0
 800176e:	b299      	uxth	r1, r3
 8001770:	4a08      	ldr	r2, [pc, #32]	; (8001794 <FillSinTable+0x78>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < STEPS; i++)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b63      	cmp	r3, #99	; 0x63
 8001782:	ddd3      	ble.n	800172c <FillSinTable+0x10>
		}
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bdb0      	pop	{r4, r5, r7, pc}
 800178c:	3c00adfd 	.word	0x3c00adfd
 8001790:	409c2000 	.word	0x409c2000
 8001794:	2000003c 	.word	0x2000003c

08001798 <main>:
//*******************************************************************************************
//*******************************************************************************************

int main(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0


	//--------------------------
	//Drivers.
	Sys_Init();
 800179c:	f7ff fe6e 	bl	800147c <Sys_Init>
	Gpio_Init();
 80017a0:	f7ff fd20 	bl	80011e4 <Gpio_Init>
	SysTick_Init();
 80017a4:	f7ff febc 	bl	8001520 <SysTick_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80017a8:	b662      	cpsie	i
	__enable_irq();
	//***********************************************
	TIM1_InitForPWM();
 80017aa:	f7ff ff13 	bl	80015d4 <TIM1_InitForPWM>
	//TIM3_InitForPWM();//TIM3 генерирует ШИМ для трех каналов.
	TIM4_Init();      //TIM4 настривается для периодической генерации прерывания.
 80017ae:	f7ff ff79 	bl	80016a4 <TIM4_Init>

	//Заполнение таблицы сиинуса.
	FillSinTable();
 80017b2:	f7ff ffb3 	bl	800171c <FillSinTable>

	//__disable_irq();
	msDelay(500);
 80017b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ba:	f7ff fcc5 	bl	8001148 <msDelay>
	while(1)
		{
			//msDelay(10);
			//***********************************************
			//Мигание светодиодами.
			Led_Blink();
 80017be:	f7ff ff97 	bl	80016f0 <Led_Blink>
 80017c2:	e7fc      	b.n	80017be <main+0x26>

080017c4 <SysTick_Handler>:
	//************************************************************************************
}
//*******************************************************************************************
//*******************************************************************************************
//Прерывание каждую милисекунду.
void SysTick_Handler(void){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
//		{
//			msCountForDS18B20 = 0;
//			FlagsStr.DS18B20  = 1;
//		}
	//--------------------------
	msDelay_Loop();
 80017c8:	f7ff fcb0 	bl	800112c <msDelay_Loop>
	Blink_Loop();
 80017cc:	f7ff fbcc 	bl	8000f68 <Blink_Loop>
	Encoder()->Loop();
 80017d0:	f000 f910 	bl	80019f4 <Encoder>
 80017d4:	4603      	mov	r3, r0
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4798      	blx	r3
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <TIM4_IRQHandler>:
#define PMSM_PWM 1500 //Коэфф-т заполнения от 0 до 1800



//Прерывание TIM4.
void TIM4_IRQHandler(void){
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0

	uint16_t pwm1, pwm2, pwm3;
	//--------------------------
	TIM4->SR &= ~TIM_SR_UIF;//Сброс флага прерывания.
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <TIM4_IRQHandler+0x60>)
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <TIM4_IRQHandler+0x60>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6113      	str	r3, [r2, #16]
//	TIM1->CCR3 = pwm3;
//	// Increment position in sine table
//	sinTableIndex++;
//	if(sinTableIndex > PMSM_SINTABLESIZE-1) sinTableIndex = 0;
	//--------------------------
	pwm1 = (uint16_t)((uint32_t)(PMSM_PWM * sin_arr[sinTableIndex]) / 1800);
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <TIM4_IRQHandler+0x64>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <TIM4_IRQHandler+0x68>)
 80017fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017fe:	461a      	mov	r2, r3
 8001800:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001804:	fb03 f302 	mul.w	r3, r3, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <TIM4_IRQHandler+0x6c>)
 800180c:	fba3 2302 	umull	r2, r3, r3, r2
 8001810:	0a9b      	lsrs	r3, r3, #10
 8001812:	80fb      	strh	r3, [r7, #6]


	//Set PWM
	TIM1->CCR1 = pwm1;
 8001814:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <TIM4_IRQHandler+0x70>)
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	6353      	str	r3, [r2, #52]	; 0x34
//	TIM1->CCR2 = pwm2;
//	TIM1->CCR3 = pwm3;
	// Increment position in sine table
	sinTableIndex++;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <TIM4_IRQHandler+0x64>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <TIM4_IRQHandler+0x64>)
 8001824:	801a      	strh	r2, [r3, #0]
	if(sinTableIndex > PRECISION-1) sinTableIndex = 0;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <TIM4_IRQHandler+0x64>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800182e:	d302      	bcc.n	8001836 <TIM4_IRQHandler+0x56>
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <TIM4_IRQHandler+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	801a      	strh	r2, [r3, #0]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40000800 	.word	0x40000800
 8001844:	2000003a 	.word	0x2000003a
 8001848:	2000003c 	.word	0x2000003c
 800184c:	91a2b3c5 	.word	0x91a2b3c5
 8001850:	40012c00 	.word	0x40012c00

08001854 <Encoder_Turn>:
							   .Loop          = &Encoder_Loop,
							   .Rotation      = &Encoder_Turn};

static uint8_t EncoderStateReg = ENCODER_NO_TURN;//Регистр состияния энкодера.
//-----------------------------------------------------------------------------
static void Encoder_Turn(uint16_t *parameter, uint16_t min, uint16_t max){
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	803b      	strh	r3, [r7, #0]

	//--------------------
	switch(EncoderStateReg){
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <Encoder_Turn+0x74>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d002      	beq.n	8001872 <Encoder_Turn+0x1e>
 800186c:	2b03      	cmp	r3, #3
 800186e:	d013      	beq.n	8001898 <Encoder_Turn+0x44>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
			EncoderStateReg = ENCODER_NO_TURN;
		break;
		//-----------
		default:
		break;	
 8001870:	e025      	b.n	80018be <Encoder_Turn+0x6a>
			if ((*parameter) < max)(*parameter)++;    //Проверка на  максимум.
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	883a      	ldrh	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d906      	bls.n	800188a <Encoder_Turn+0x36>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	801a      	strh	r2, [r3, #0]
 8001888:	e002      	b.n	8001890 <Encoder_Turn+0x3c>
			else                   (*parameter) = min;//Закольцовывание редактирования параметра.
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <Encoder_Turn+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
		break;
 8001896:	e012      	b.n	80018be <Encoder_Turn+0x6a>
			if ((*parameter) > min)(*parameter)--;    //Проверка на минимум.
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	887a      	ldrh	r2, [r7, #2]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d206      	bcs.n	80018b0 <Encoder_Turn+0x5c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	801a      	strh	r2, [r3, #0]
 80018ae:	e002      	b.n	80018b6 <Encoder_Turn+0x62>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	883a      	ldrh	r2, [r7, #0]
 80018b4:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <Encoder_Turn+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
		break;
 80018bc:	bf00      	nop
		//-----------
	}
	//--------------------	
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000104 	.word	0x20000104

080018cc <Encoder_Loop>:
//-----------------------------------------------------------------------------
/*Когда энкодер не вращают на обоих его выводах(A и В) единицы(внутряння подтяжка МК).Это состояние 3 энкодера - начальное состояние энкодера.
*Так-же начальным состоянием может быть  состояние энкодера когда А и В ровны 0.
*Когда вращаю вправо, то после состояния 3 энкодер передет в состояние 1 (А=1, В=0).
*Когда вращают влево, то после состояния 3 энкодер прердет в состояние 2 (А=0, В=1). */
static void Encoder_Loop(void){
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	static uint8_t  cycle   = 0;
	static uint8_t  msCount = 0;
	static uint16_t but[3]  = {0, 0, 0};
	//--------------------
	//Обработка вращения энкодера.
	switch(EncoderStateReg){
 80018d0:	4b42      	ldr	r3, [pc, #264]	; (80019dc <Encoder_Loop+0x110>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <Encoder_Loop+0x12>
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d010      	beq.n	80018fe <Encoder_Loop+0x32>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
				} 			
		break;
		//-----------
		default:
		break;	
 80018dc:	e031      	b.n	8001942 <Encoder_Loop+0x76>
			if(!(EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 80018de:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <Encoder_Loop+0x114>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d128      	bne.n	800193c <Encoder_Loop+0x70>
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <Encoder_Loop+0x114>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d122      	bne.n	800193c <Encoder_Loop+0x70>
					EncoderStateReg = ENCODER_TURN;
 80018f6:	4b39      	ldr	r3, [pc, #228]	; (80019dc <Encoder_Loop+0x110>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
		break;
 80018fc:	e01e      	b.n	800193c <Encoder_Loop+0x70>
			if( !(EncoderPORT->IDR & EncoderPinA) && (EncoderPORT->IDR & EncoderPinB))
 80018fe:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <Encoder_Loop+0x114>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d108      	bne.n	800191c <Encoder_Loop+0x50>
 800190a:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <Encoder_Loop+0x114>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <Encoder_Loop+0x50>
					EncoderStateReg = ENCODER_TURN_RIGHT;//щелчок вправо.
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <Encoder_Loop+0x110>)
 8001918:	2202      	movs	r2, #2
 800191a:	701a      	strb	r2, [r3, #0]
		  if( (EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <Encoder_Loop+0x114>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <Encoder_Loop+0x74>
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <Encoder_Loop+0x114>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <Encoder_Loop+0x74>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <Encoder_Loop+0x110>)
 8001936:	2203      	movs	r2, #3
 8001938:	701a      	strb	r2, [r3, #0]
		break;
 800193a:	e001      	b.n	8001940 <Encoder_Loop+0x74>
		break;
 800193c:	bf00      	nop
 800193e:	e000      	b.n	8001942 <Encoder_Loop+0x76>
		break;
 8001940:	bf00      	nop
		//-----------		
	}
	//--------------------
	//Опрос кнопки энкодера.
	if(++msCount >= ENCODER_BUTTON_TIMEOUT)
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <Encoder_Loop+0x118>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <Encoder_Loop+0x118>)
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <Encoder_Loop+0x118>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b09      	cmp	r3, #9
 8001954:	d93d      	bls.n	80019d2 <Encoder_Loop+0x106>
		{
		  msCount = 0;//сброс счетчика
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <Encoder_Loop+0x118>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
		  //-----------
			if(cycle < 3)
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <Encoder_Loop+0x11c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d811      	bhi.n	8001988 <Encoder_Loop+0xbc>
				{
					but[cycle] = EncoderPORT->IDR & EncoderButtonPin;//Считывание состояние вывода.
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <Encoder_Loop+0x114>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <Encoder_Loop+0x11c>)
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001972:	b299      	uxth	r1, r3
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <Encoder_Loop+0x120>)
 8001976:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					cycle++;
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <Encoder_Loop+0x11c>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <Encoder_Loop+0x11c>)
 8001984:	701a      	strb	r2, [r3, #0]
					else EncoderStr.ButtonIsPress = 0;
				}
			//-----------
		}
	//--------------------
}
 8001986:	e024      	b.n	80019d2 <Encoder_Loop+0x106>
					cycle = 0;
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <Encoder_Loop+0x11c>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
					if(~((but[0] & but[1]) | (but[1] & but[2]) | (but[0] & but[2])) & EncoderButtonPin) 
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <Encoder_Loop+0x120>)
 8001990:	885a      	ldrh	r2, [r3, #2]
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <Encoder_Loop+0x120>)
 8001994:	8819      	ldrh	r1, [r3, #0]
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <Encoder_Loop+0x120>)
 8001998:	889b      	ldrh	r3, [r3, #4]
 800199a:	430b      	orrs	r3, r1
 800199c:	b29b      	uxth	r3, r3
 800199e:	4013      	ands	r3, r2
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <Encoder_Loop+0x120>)
 80019a4:	8819      	ldrh	r1, [r3, #0]
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <Encoder_Loop+0x120>)
 80019a8:	889b      	ldrh	r3, [r3, #4]
 80019aa:	400b      	ands	r3, r1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <Encoder_Loop+0xfc>
							 EncoderStr.ButtonIsPress = 1;
 80019bc:	4a0c      	ldr	r2, [pc, #48]	; (80019f0 <Encoder_Loop+0x124>)
 80019be:	7813      	ldrb	r3, [r2, #0]
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	7013      	strb	r3, [r2, #0]
}
 80019c6:	e004      	b.n	80019d2 <Encoder_Loop+0x106>
					else EncoderStr.ButtonIsPress = 0;
 80019c8:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <Encoder_Loop+0x124>)
 80019ca:	7813      	ldrb	r3, [r2, #0]
 80019cc:	f36f 0300 	bfc	r3, #0, #1
 80019d0:	7013      	strb	r3, [r2, #0]
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000104 	.word	0x20000104
 80019e0:	40011000 	.word	0x40011000
 80019e4:	20000105 	.word	0x20000105
 80019e8:	20000106 	.word	0x20000106
 80019ec:	20000108 	.word	0x20000108
 80019f0:	20000000 	.word	0x20000000

080019f4 <Encoder>:
	//Input pull-up
	GPIOB->CRH |= (GPIO_CRH_CNF12_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_CNF10_1);//
	GPIOB->ODR |= (GPIO_ODR_ODR12   | GPIO_ODR_ODR11   | GPIO_ODR_ODR10);	 //
}
//-----------------------------------------------------------------------------
Encoder_t* Encoder(void){
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

	return &EncoderStr;
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <Encoder+0x10>)
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000000 	.word	0x20000000

08001a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a0a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a0c:	f7ff fbb6 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	; (8001a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <LoopForever+0xe>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	; (8001a54 <LoopForever+0x16>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a36:	f000 f811 	bl	8001a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a3a:	f7ff fead 	bl	8001798 <main>

08001a3e <LoopForever>:

LoopForever:
    b LoopForever
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
  ldr   r0, =_estack
 8001a40:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a4c:	08002c70 	.word	0x08002c70
  ldr r2, =_sbss
 8001a50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a54:	20000110 	.word	0x20000110

08001a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC1_2_IRQHandler>
	...

08001a5c <__libc_init_array>:
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	2500      	movs	r5, #0
 8001a60:	4e0c      	ldr	r6, [pc, #48]	; (8001a94 <__libc_init_array+0x38>)
 8001a62:	4c0d      	ldr	r4, [pc, #52]	; (8001a98 <__libc_init_array+0x3c>)
 8001a64:	1ba4      	subs	r4, r4, r6
 8001a66:	10a4      	asrs	r4, r4, #2
 8001a68:	42a5      	cmp	r5, r4
 8001a6a:	d109      	bne.n	8001a80 <__libc_init_array+0x24>
 8001a6c:	f001 f804 	bl	8002a78 <_init>
 8001a70:	2500      	movs	r5, #0
 8001a72:	4e0a      	ldr	r6, [pc, #40]	; (8001a9c <__libc_init_array+0x40>)
 8001a74:	4c0a      	ldr	r4, [pc, #40]	; (8001aa0 <__libc_init_array+0x44>)
 8001a76:	1ba4      	subs	r4, r4, r6
 8001a78:	10a4      	asrs	r4, r4, #2
 8001a7a:	42a5      	cmp	r5, r4
 8001a7c:	d105      	bne.n	8001a8a <__libc_init_array+0x2e>
 8001a7e:	bd70      	pop	{r4, r5, r6, pc}
 8001a80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a84:	4798      	blx	r3
 8001a86:	3501      	adds	r5, #1
 8001a88:	e7ee      	b.n	8001a68 <__libc_init_array+0xc>
 8001a8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a8e:	4798      	blx	r3
 8001a90:	3501      	adds	r5, #1
 8001a92:	e7f2      	b.n	8001a7a <__libc_init_array+0x1e>
 8001a94:	08002c68 	.word	0x08002c68
 8001a98:	08002c68 	.word	0x08002c68
 8001a9c:	08002c68 	.word	0x08002c68
 8001aa0:	08002c6c 	.word	0x08002c6c

08001aa4 <sin>:
 8001aa4:	b530      	push	{r4, r5, lr}
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <sin+0x6c>)
 8001aa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001aac:	4293      	cmp	r3, r2
 8001aae:	b087      	sub	sp, #28
 8001ab0:	dc06      	bgt.n	8001ac0 <sin+0x1c>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f000 fe25 	bl	8002708 <__kernel_sin>
 8001abe:	e006      	b.n	8001ace <sin+0x2a>
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <sin+0x70>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	dd05      	ble.n	8001ad2 <sin+0x2e>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	f7fe fb55 	bl	8000178 <__aeabi_dsub>
 8001ace:	b007      	add	sp, #28
 8001ad0:	bd30      	pop	{r4, r5, pc}
 8001ad2:	aa02      	add	r2, sp, #8
 8001ad4:	f000 f820 	bl	8001b18 <__ieee754_rem_pio2>
 8001ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001adc:	f000 0403 	and.w	r4, r0, #3
 8001ae0:	2c01      	cmp	r4, #1
 8001ae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001ae6:	d005      	beq.n	8001af4 <sin+0x50>
 8001ae8:	2c02      	cmp	r4, #2
 8001aea:	d006      	beq.n	8001afa <sin+0x56>
 8001aec:	b964      	cbnz	r4, 8001b08 <sin+0x64>
 8001aee:	2401      	movs	r4, #1
 8001af0:	9400      	str	r4, [sp, #0]
 8001af2:	e7e2      	b.n	8001aba <sin+0x16>
 8001af4:	f000 fa00 	bl	8001ef8 <__kernel_cos>
 8001af8:	e7e9      	b.n	8001ace <sin+0x2a>
 8001afa:	2401      	movs	r4, #1
 8001afc:	9400      	str	r4, [sp, #0]
 8001afe:	f000 fe03 	bl	8002708 <__kernel_sin>
 8001b02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8001b06:	e7e2      	b.n	8001ace <sin+0x2a>
 8001b08:	f000 f9f6 	bl	8001ef8 <__kernel_cos>
 8001b0c:	e7f9      	b.n	8001b02 <sin+0x5e>
 8001b0e:	bf00      	nop
 8001b10:	3fe921fb 	.word	0x3fe921fb
 8001b14:	7fefffff 	.word	0x7fefffff

08001b18 <__ieee754_rem_pio2>:
 8001b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	4ac2      	ldr	r2, [pc, #776]	; (8001e28 <__ieee754_rem_pio2+0x310>)
 8001b20:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8001b24:	4592      	cmp	sl, r2
 8001b26:	b08d      	sub	sp, #52	; 0x34
 8001b28:	468b      	mov	fp, r1
 8001b2a:	dc07      	bgt.n	8001b3c <__ieee754_rem_pio2+0x24>
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e9c4 0100 	strd	r0, r1, [r4]
 8001b34:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8001b38:	2500      	movs	r5, #0
 8001b3a:	e023      	b.n	8001b84 <__ieee754_rem_pio2+0x6c>
 8001b3c:	4abb      	ldr	r2, [pc, #748]	; (8001e2c <__ieee754_rem_pio2+0x314>)
 8001b3e:	4592      	cmp	sl, r2
 8001b40:	dc71      	bgt.n	8001c26 <__ieee754_rem_pio2+0x10e>
 8001b42:	a3ab      	add	r3, pc, #684	; (adr r3, 8001df0 <__ieee754_rem_pio2+0x2d8>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	2900      	cmp	r1, #0
 8001b4a:	4db9      	ldr	r5, [pc, #740]	; (8001e30 <__ieee754_rem_pio2+0x318>)
 8001b4c:	dd36      	ble.n	8001bbc <__ieee754_rem_pio2+0xa4>
 8001b4e:	f7fe fb13 	bl	8000178 <__aeabi_dsub>
 8001b52:	45aa      	cmp	sl, r5
 8001b54:	4606      	mov	r6, r0
 8001b56:	460f      	mov	r7, r1
 8001b58:	d018      	beq.n	8001b8c <__ieee754_rem_pio2+0x74>
 8001b5a:	a3a7      	add	r3, pc, #668	; (adr r3, 8001df8 <__ieee754_rem_pio2+0x2e0>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fb0a 	bl	8000178 <__aeabi_dsub>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4630      	mov	r0, r6
 8001b6a:	e9c4 2300 	strd	r2, r3, [r4]
 8001b6e:	4639      	mov	r1, r7
 8001b70:	f7fe fb02 	bl	8000178 <__aeabi_dsub>
 8001b74:	a3a0      	add	r3, pc, #640	; (adr r3, 8001df8 <__ieee754_rem_pio2+0x2e0>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe fafd 	bl	8000178 <__aeabi_dsub>
 8001b7e:	2501      	movs	r5, #1
 8001b80:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8001b84:	4628      	mov	r0, r5
 8001b86:	b00d      	add	sp, #52	; 0x34
 8001b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b8c:	a39c      	add	r3, pc, #624	; (adr r3, 8001e00 <__ieee754_rem_pio2+0x2e8>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe faf1 	bl	8000178 <__aeabi_dsub>
 8001b96:	a39c      	add	r3, pc, #624	; (adr r3, 8001e08 <__ieee754_rem_pio2+0x2f0>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	4606      	mov	r6, r0
 8001b9e:	460f      	mov	r7, r1
 8001ba0:	f7fe faea 	bl	8000178 <__aeabi_dsub>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4630      	mov	r0, r6
 8001baa:	e9c4 2300 	strd	r2, r3, [r4]
 8001bae:	4639      	mov	r1, r7
 8001bb0:	f7fe fae2 	bl	8000178 <__aeabi_dsub>
 8001bb4:	a394      	add	r3, pc, #592	; (adr r3, 8001e08 <__ieee754_rem_pio2+0x2f0>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	e7de      	b.n	8001b7a <__ieee754_rem_pio2+0x62>
 8001bbc:	f7fe fade 	bl	800017c <__adddf3>
 8001bc0:	45aa      	cmp	sl, r5
 8001bc2:	4606      	mov	r6, r0
 8001bc4:	460f      	mov	r7, r1
 8001bc6:	d016      	beq.n	8001bf6 <__ieee754_rem_pio2+0xde>
 8001bc8:	a38b      	add	r3, pc, #556	; (adr r3, 8001df8 <__ieee754_rem_pio2+0x2e0>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fad5 	bl	800017c <__adddf3>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4630      	mov	r0, r6
 8001bd8:	e9c4 2300 	strd	r2, r3, [r4]
 8001bdc:	4639      	mov	r1, r7
 8001bde:	f7fe facb 	bl	8000178 <__aeabi_dsub>
 8001be2:	a385      	add	r3, pc, #532	; (adr r3, 8001df8 <__ieee754_rem_pio2+0x2e0>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fac8 	bl	800017c <__adddf3>
 8001bec:	f04f 35ff 	mov.w	r5, #4294967295
 8001bf0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8001bf4:	e7c6      	b.n	8001b84 <__ieee754_rem_pio2+0x6c>
 8001bf6:	a382      	add	r3, pc, #520	; (adr r3, 8001e00 <__ieee754_rem_pio2+0x2e8>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fabe 	bl	800017c <__adddf3>
 8001c00:	a381      	add	r3, pc, #516	; (adr r3, 8001e08 <__ieee754_rem_pio2+0x2f0>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	4606      	mov	r6, r0
 8001c08:	460f      	mov	r7, r1
 8001c0a:	f7fe fab7 	bl	800017c <__adddf3>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4630      	mov	r0, r6
 8001c14:	e9c4 2300 	strd	r2, r3, [r4]
 8001c18:	4639      	mov	r1, r7
 8001c1a:	f7fe faad 	bl	8000178 <__aeabi_dsub>
 8001c1e:	a37a      	add	r3, pc, #488	; (adr r3, 8001e08 <__ieee754_rem_pio2+0x2f0>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	e7e0      	b.n	8001be8 <__ieee754_rem_pio2+0xd0>
 8001c26:	4a83      	ldr	r2, [pc, #524]	; (8001e34 <__ieee754_rem_pio2+0x31c>)
 8001c28:	4592      	cmp	sl, r2
 8001c2a:	f300 80d2 	bgt.w	8001dd2 <__ieee754_rem_pio2+0x2ba>
 8001c2e:	f000 fe21 	bl	8002874 <fabs>
 8001c32:	a377      	add	r3, pc, #476	; (adr r3, 8001e10 <__ieee754_rem_pio2+0x2f8>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	4606      	mov	r6, r0
 8001c3a:	460f      	mov	r7, r1
 8001c3c:	f7fe fc54 	bl	80004e8 <__aeabi_dmul>
 8001c40:	2200      	movs	r2, #0
 8001c42:	4b7d      	ldr	r3, [pc, #500]	; (8001e38 <__ieee754_rem_pio2+0x320>)
 8001c44:	f7fe fa9a 	bl	800017c <__adddf3>
 8001c48:	f7fe fee8 	bl	8000a1c <__aeabi_d2iz>
 8001c4c:	4605      	mov	r5, r0
 8001c4e:	f7fe fbe1 	bl	8000414 <__aeabi_i2d>
 8001c52:	a367      	add	r3, pc, #412	; (adr r3, 8001df0 <__ieee754_rem_pio2+0x2d8>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c5c:	f7fe fc44 	bl	80004e8 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4630      	mov	r0, r6
 8001c66:	4639      	mov	r1, r7
 8001c68:	f7fe fa86 	bl	8000178 <__aeabi_dsub>
 8001c6c:	a362      	add	r3, pc, #392	; (adr r3, 8001df8 <__ieee754_rem_pio2+0x2e0>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	4606      	mov	r6, r0
 8001c74:	460f      	mov	r7, r1
 8001c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001c7a:	f7fe fc35 	bl	80004e8 <__aeabi_dmul>
 8001c7e:	2d1f      	cmp	r5, #31
 8001c80:	4680      	mov	r8, r0
 8001c82:	4689      	mov	r9, r1
 8001c84:	dc0e      	bgt.n	8001ca4 <__ieee754_rem_pio2+0x18c>
 8001c86:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <__ieee754_rem_pio2+0x324>)
 8001c88:	1e6a      	subs	r2, r5, #1
 8001c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8e:	4553      	cmp	r3, sl
 8001c90:	d008      	beq.n	8001ca4 <__ieee754_rem_pio2+0x18c>
 8001c92:	4642      	mov	r2, r8
 8001c94:	464b      	mov	r3, r9
 8001c96:	4630      	mov	r0, r6
 8001c98:	4639      	mov	r1, r7
 8001c9a:	f7fe fa6d 	bl	8000178 <__aeabi_dsub>
 8001c9e:	e9c4 0100 	strd	r0, r1, [r4]
 8001ca2:	e011      	b.n	8001cc8 <__ieee754_rem_pio2+0x1b0>
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	4642      	mov	r2, r8
 8001ca8:	4630      	mov	r0, r6
 8001caa:	4639      	mov	r1, r7
 8001cac:	f7fe fa64 	bl	8000178 <__aeabi_dsub>
 8001cb0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8001cb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8001cb8:	ebaa 0303 	sub.w	r3, sl, r3
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	dc1f      	bgt.n	8001d00 <__ieee754_rem_pio2+0x1e8>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	e9c4 2300 	strd	r2, r3, [r4]
 8001cc8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8001ccc:	4630      	mov	r0, r6
 8001cce:	4653      	mov	r3, sl
 8001cd0:	4639      	mov	r1, r7
 8001cd2:	f7fe fa51 	bl	8000178 <__aeabi_dsub>
 8001cd6:	4642      	mov	r2, r8
 8001cd8:	464b      	mov	r3, r9
 8001cda:	f7fe fa4d 	bl	8000178 <__aeabi_dsub>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	f1bb 0f00 	cmp.w	fp, #0
 8001ce6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8001cea:	f6bf af4b 	bge.w	8001b84 <__ieee754_rem_pio2+0x6c>
 8001cee:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8001cf2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8001cf6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8001cfa:	60e1      	str	r1, [r4, #12]
 8001cfc:	426d      	negs	r5, r5
 8001cfe:	e741      	b.n	8001b84 <__ieee754_rem_pio2+0x6c>
 8001d00:	a33f      	add	r3, pc, #252	; (adr r3, 8001e00 <__ieee754_rem_pio2+0x2e8>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001d0a:	f7fe fbed 	bl	80004e8 <__aeabi_dmul>
 8001d0e:	4680      	mov	r8, r0
 8001d10:	4689      	mov	r9, r1
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4630      	mov	r0, r6
 8001d18:	4639      	mov	r1, r7
 8001d1a:	f7fe fa2d 	bl	8000178 <__aeabi_dsub>
 8001d1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4630      	mov	r0, r6
 8001d28:	4639      	mov	r1, r7
 8001d2a:	f7fe fa25 	bl	8000178 <__aeabi_dsub>
 8001d2e:	4642      	mov	r2, r8
 8001d30:	464b      	mov	r3, r9
 8001d32:	f7fe fa21 	bl	8000178 <__aeabi_dsub>
 8001d36:	a334      	add	r3, pc, #208	; (adr r3, 8001e08 <__ieee754_rem_pio2+0x2f0>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	4606      	mov	r6, r0
 8001d3e:	460f      	mov	r7, r1
 8001d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001d44:	f7fe fbd0 	bl	80004e8 <__aeabi_dmul>
 8001d48:	4632      	mov	r2, r6
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	f7fe fa14 	bl	8000178 <__aeabi_dsub>
 8001d50:	460b      	mov	r3, r1
 8001d52:	4602      	mov	r2, r0
 8001d54:	4680      	mov	r8, r0
 8001d56:	4689      	mov	r9, r1
 8001d58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001d5c:	f7fe fa0c 	bl	8000178 <__aeabi_dsub>
 8001d60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8001d64:	ebaa 0a03 	sub.w	sl, sl, r3
 8001d68:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8001d6c:	dc06      	bgt.n	8001d7c <__ieee754_rem_pio2+0x264>
 8001d6e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	e9c4 2300 	strd	r2, r3, [r4]
 8001d7a:	e7a5      	b.n	8001cc8 <__ieee754_rem_pio2+0x1b0>
 8001d7c:	a326      	add	r3, pc, #152	; (adr r3, 8001e18 <__ieee754_rem_pio2+0x300>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001d86:	f7fe fbaf 	bl	80004e8 <__aeabi_dmul>
 8001d8a:	4680      	mov	r8, r0
 8001d8c:	4689      	mov	r9, r1
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001d96:	f7fe f9ef 	bl	8000178 <__aeabi_dsub>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4606      	mov	r6, r0
 8001da0:	460f      	mov	r7, r1
 8001da2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001da6:	f7fe f9e7 	bl	8000178 <__aeabi_dsub>
 8001daa:	4642      	mov	r2, r8
 8001dac:	464b      	mov	r3, r9
 8001dae:	f7fe f9e3 	bl	8000178 <__aeabi_dsub>
 8001db2:	a31b      	add	r3, pc, #108	; (adr r3, 8001e20 <__ieee754_rem_pio2+0x308>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	4680      	mov	r8, r0
 8001dba:	4689      	mov	r9, r1
 8001dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001dc0:	f7fe fb92 	bl	80004e8 <__aeabi_dmul>
 8001dc4:	4642      	mov	r2, r8
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	f7fe f9d6 	bl	8000178 <__aeabi_dsub>
 8001dcc:	4680      	mov	r8, r0
 8001dce:	4689      	mov	r9, r1
 8001dd0:	e75f      	b.n	8001c92 <__ieee754_rem_pio2+0x17a>
 8001dd2:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <__ieee754_rem_pio2+0x328>)
 8001dd4:	4592      	cmp	sl, r2
 8001dd6:	dd35      	ble.n	8001e44 <__ieee754_rem_pio2+0x32c>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	f7fe f9cc 	bl	8000178 <__aeabi_dsub>
 8001de0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8001de4:	e9c4 0100 	strd	r0, r1, [r4]
 8001de8:	e6a6      	b.n	8001b38 <__ieee754_rem_pio2+0x20>
 8001dea:	bf00      	nop
 8001dec:	f3af 8000 	nop.w
 8001df0:	54400000 	.word	0x54400000
 8001df4:	3ff921fb 	.word	0x3ff921fb
 8001df8:	1a626331 	.word	0x1a626331
 8001dfc:	3dd0b461 	.word	0x3dd0b461
 8001e00:	1a600000 	.word	0x1a600000
 8001e04:	3dd0b461 	.word	0x3dd0b461
 8001e08:	2e037073 	.word	0x2e037073
 8001e0c:	3ba3198a 	.word	0x3ba3198a
 8001e10:	6dc9c883 	.word	0x6dc9c883
 8001e14:	3fe45f30 	.word	0x3fe45f30
 8001e18:	2e000000 	.word	0x2e000000
 8001e1c:	3ba3198a 	.word	0x3ba3198a
 8001e20:	252049c1 	.word	0x252049c1
 8001e24:	397b839a 	.word	0x397b839a
 8001e28:	3fe921fb 	.word	0x3fe921fb
 8001e2c:	4002d97b 	.word	0x4002d97b
 8001e30:	3ff921fb 	.word	0x3ff921fb
 8001e34:	413921fb 	.word	0x413921fb
 8001e38:	3fe00000 	.word	0x3fe00000
 8001e3c:	08002a90 	.word	0x08002a90
 8001e40:	7fefffff 	.word	0x7fefffff
 8001e44:	ea4f 552a 	mov.w	r5, sl, asr #20
 8001e48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8001e4c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8001e50:	460f      	mov	r7, r1
 8001e52:	4606      	mov	r6, r0
 8001e54:	f7fe fde2 	bl	8000a1c <__aeabi_d2iz>
 8001e58:	f7fe fadc 	bl	8000414 <__aeabi_i2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4630      	mov	r0, r6
 8001e62:	4639      	mov	r1, r7
 8001e64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e68:	f7fe f986 	bl	8000178 <__aeabi_dsub>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <__ieee754_rem_pio2+0x3d8>)
 8001e70:	f7fe fb3a 	bl	80004e8 <__aeabi_dmul>
 8001e74:	460f      	mov	r7, r1
 8001e76:	4606      	mov	r6, r0
 8001e78:	f7fe fdd0 	bl	8000a1c <__aeabi_d2iz>
 8001e7c:	f7fe faca 	bl	8000414 <__aeabi_i2d>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4630      	mov	r0, r6
 8001e86:	4639      	mov	r1, r7
 8001e88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001e8c:	f7fe f974 	bl	8000178 <__aeabi_dsub>
 8001e90:	2200      	movs	r2, #0
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <__ieee754_rem_pio2+0x3d8>)
 8001e94:	f7fe fb28 	bl	80004e8 <__aeabi_dmul>
 8001e98:	f04f 0803 	mov.w	r8, #3
 8001e9c:	2600      	movs	r6, #0
 8001e9e:	2700      	movs	r7, #0
 8001ea0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001ea4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8001ea8:	4632      	mov	r2, r6
 8001eaa:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8001eae:	463b      	mov	r3, r7
 8001eb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8001eb4:	f7fe fd80 	bl	80009b8 <__aeabi_dcmpeq>
 8001eb8:	b9b8      	cbnz	r0, 8001eea <__ieee754_rem_pio2+0x3d2>
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <__ieee754_rem_pio2+0x3dc>)
 8001ebc:	462a      	mov	r2, r5
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	a806      	add	r0, sp, #24
 8001ec8:	4643      	mov	r3, r8
 8001eca:	f000 f8d3 	bl	8002074 <__kernel_rem_pio2>
 8001ece:	f1bb 0f00 	cmp.w	fp, #0
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	f6bf ae56 	bge.w	8001b84 <__ieee754_rem_pio2+0x6c>
 8001ed8:	6863      	ldr	r3, [r4, #4]
 8001eda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001ede:	6063      	str	r3, [r4, #4]
 8001ee0:	68e3      	ldr	r3, [r4, #12]
 8001ee2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001ee6:	60e3      	str	r3, [r4, #12]
 8001ee8:	e708      	b.n	8001cfc <__ieee754_rem_pio2+0x1e4>
 8001eea:	46d0      	mov	r8, sl
 8001eec:	e7dc      	b.n	8001ea8 <__ieee754_rem_pio2+0x390>
 8001eee:	bf00      	nop
 8001ef0:	41700000 	.word	0x41700000
 8001ef4:	08002b10 	.word	0x08002b10

08001ef8 <__kernel_cos>:
 8001ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001efc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8001f00:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8001f04:	4680      	mov	r8, r0
 8001f06:	460f      	mov	r7, r1
 8001f08:	e9cd 2300 	strd	r2, r3, [sp]
 8001f0c:	da04      	bge.n	8001f18 <__kernel_cos+0x20>
 8001f0e:	f7fe fd85 	bl	8000a1c <__aeabi_d2iz>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	f000 8086 	beq.w	8002024 <__kernel_cos+0x12c>
 8001f18:	4642      	mov	r2, r8
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	4639      	mov	r1, r7
 8001f20:	f7fe fae2 	bl	80004e8 <__aeabi_dmul>
 8001f24:	2200      	movs	r2, #0
 8001f26:	4b4e      	ldr	r3, [pc, #312]	; (8002060 <__kernel_cos+0x168>)
 8001f28:	4604      	mov	r4, r0
 8001f2a:	460d      	mov	r5, r1
 8001f2c:	f7fe fadc 	bl	80004e8 <__aeabi_dmul>
 8001f30:	a33f      	add	r3, pc, #252	; (adr r3, 8002030 <__kernel_cos+0x138>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	4682      	mov	sl, r0
 8001f38:	468b      	mov	fp, r1
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	f7fe fad3 	bl	80004e8 <__aeabi_dmul>
 8001f42:	a33d      	add	r3, pc, #244	; (adr r3, 8002038 <__kernel_cos+0x140>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe f918 	bl	800017c <__adddf3>
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	462b      	mov	r3, r5
 8001f50:	f7fe faca 	bl	80004e8 <__aeabi_dmul>
 8001f54:	a33a      	add	r3, pc, #232	; (adr r3, 8002040 <__kernel_cos+0x148>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe f90d 	bl	8000178 <__aeabi_dsub>
 8001f5e:	4622      	mov	r2, r4
 8001f60:	462b      	mov	r3, r5
 8001f62:	f7fe fac1 	bl	80004e8 <__aeabi_dmul>
 8001f66:	a338      	add	r3, pc, #224	; (adr r3, 8002048 <__kernel_cos+0x150>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe f906 	bl	800017c <__adddf3>
 8001f70:	4622      	mov	r2, r4
 8001f72:	462b      	mov	r3, r5
 8001f74:	f7fe fab8 	bl	80004e8 <__aeabi_dmul>
 8001f78:	a335      	add	r3, pc, #212	; (adr r3, 8002050 <__kernel_cos+0x158>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe f8fb 	bl	8000178 <__aeabi_dsub>
 8001f82:	4622      	mov	r2, r4
 8001f84:	462b      	mov	r3, r5
 8001f86:	f7fe faaf 	bl	80004e8 <__aeabi_dmul>
 8001f8a:	a333      	add	r3, pc, #204	; (adr r3, 8002058 <__kernel_cos+0x160>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe f8f4 	bl	800017c <__adddf3>
 8001f94:	4622      	mov	r2, r4
 8001f96:	462b      	mov	r3, r5
 8001f98:	f7fe faa6 	bl	80004e8 <__aeabi_dmul>
 8001f9c:	4622      	mov	r2, r4
 8001f9e:	462b      	mov	r3, r5
 8001fa0:	f7fe faa2 	bl	80004e8 <__aeabi_dmul>
 8001fa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001fa8:	4604      	mov	r4, r0
 8001faa:	460d      	mov	r5, r1
 8001fac:	4640      	mov	r0, r8
 8001fae:	4639      	mov	r1, r7
 8001fb0:	f7fe fa9a 	bl	80004e8 <__aeabi_dmul>
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4629      	mov	r1, r5
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f7fe f8dc 	bl	8000178 <__aeabi_dsub>
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <__kernel_cos+0x16c>)
 8001fc2:	4680      	mov	r8, r0
 8001fc4:	429e      	cmp	r6, r3
 8001fc6:	4689      	mov	r9, r1
 8001fc8:	dc0e      	bgt.n	8001fe8 <__kernel_cos+0xf0>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4650      	mov	r0, sl
 8001fd0:	4659      	mov	r1, fp
 8001fd2:	f7fe f8d1 	bl	8000178 <__aeabi_dsub>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	2000      	movs	r0, #0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4922      	ldr	r1, [pc, #136]	; (8002068 <__kernel_cos+0x170>)
 8001fde:	f7fe f8cb 	bl	8000178 <__aeabi_dsub>
 8001fe2:	b003      	add	sp, #12
 8001fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fe8:	2400      	movs	r4, #0
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <__kernel_cos+0x174>)
 8001fec:	4622      	mov	r2, r4
 8001fee:	429e      	cmp	r6, r3
 8001ff0:	bfcc      	ite	gt
 8001ff2:	4d1f      	ldrgt	r5, [pc, #124]	; (8002070 <__kernel_cos+0x178>)
 8001ff4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8001ff8:	462b      	mov	r3, r5
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	491a      	ldr	r1, [pc, #104]	; (8002068 <__kernel_cos+0x170>)
 8001ffe:	f7fe f8bb 	bl	8000178 <__aeabi_dsub>
 8002002:	4622      	mov	r2, r4
 8002004:	4606      	mov	r6, r0
 8002006:	460f      	mov	r7, r1
 8002008:	462b      	mov	r3, r5
 800200a:	4650      	mov	r0, sl
 800200c:	4659      	mov	r1, fp
 800200e:	f7fe f8b3 	bl	8000178 <__aeabi_dsub>
 8002012:	4642      	mov	r2, r8
 8002014:	464b      	mov	r3, r9
 8002016:	f7fe f8af 	bl	8000178 <__aeabi_dsub>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4630      	mov	r0, r6
 8002020:	4639      	mov	r1, r7
 8002022:	e7dc      	b.n	8001fde <__kernel_cos+0xe6>
 8002024:	2000      	movs	r0, #0
 8002026:	4910      	ldr	r1, [pc, #64]	; (8002068 <__kernel_cos+0x170>)
 8002028:	e7db      	b.n	8001fe2 <__kernel_cos+0xea>
 800202a:	bf00      	nop
 800202c:	f3af 8000 	nop.w
 8002030:	be8838d4 	.word	0xbe8838d4
 8002034:	bda8fae9 	.word	0xbda8fae9
 8002038:	bdb4b1c4 	.word	0xbdb4b1c4
 800203c:	3e21ee9e 	.word	0x3e21ee9e
 8002040:	809c52ad 	.word	0x809c52ad
 8002044:	3e927e4f 	.word	0x3e927e4f
 8002048:	19cb1590 	.word	0x19cb1590
 800204c:	3efa01a0 	.word	0x3efa01a0
 8002050:	16c15177 	.word	0x16c15177
 8002054:	3f56c16c 	.word	0x3f56c16c
 8002058:	5555554c 	.word	0x5555554c
 800205c:	3fa55555 	.word	0x3fa55555
 8002060:	3fe00000 	.word	0x3fe00000
 8002064:	3fd33332 	.word	0x3fd33332
 8002068:	3ff00000 	.word	0x3ff00000
 800206c:	3fe90000 	.word	0x3fe90000
 8002070:	3fd20000 	.word	0x3fd20000

08002074 <__kernel_rem_pio2>:
 8002074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002078:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800207c:	9307      	str	r3, [sp, #28]
 800207e:	9104      	str	r1, [sp, #16]
 8002080:	4bbf      	ldr	r3, [pc, #764]	; (8002380 <__kernel_rem_pio2+0x30c>)
 8002082:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8002084:	1ed4      	subs	r4, r2, #3
 8002086:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800208a:	2500      	movs	r5, #0
 800208c:	9302      	str	r3, [sp, #8]
 800208e:	9b07      	ldr	r3, [sp, #28]
 8002090:	9008      	str	r0, [sp, #32]
 8002092:	3b01      	subs	r3, #1
 8002094:	9306      	str	r3, [sp, #24]
 8002096:	2318      	movs	r3, #24
 8002098:	fb94 f4f3 	sdiv	r4, r4, r3
 800209c:	f06f 0317 	mvn.w	r3, #23
 80020a0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80020a4:	fb04 3303 	mla	r3, r4, r3, r3
 80020a8:	eb03 0a02 	add.w	sl, r3, r2
 80020ac:	9a06      	ldr	r2, [sp, #24]
 80020ae:	9b02      	ldr	r3, [sp, #8]
 80020b0:	1aa7      	subs	r7, r4, r2
 80020b2:	eb03 0802 	add.w	r8, r3, r2
 80020b6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80020b8:	2200      	movs	r2, #0
 80020ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80020be:	2300      	movs	r3, #0
 80020c0:	ae1e      	add	r6, sp, #120	; 0x78
 80020c2:	4545      	cmp	r5, r8
 80020c4:	dd14      	ble.n	80020f0 <__kernel_rem_pio2+0x7c>
 80020c6:	2600      	movs	r6, #0
 80020c8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 80020cc:	9b02      	ldr	r3, [sp, #8]
 80020ce:	429e      	cmp	r6, r3
 80020d0:	dc39      	bgt.n	8002146 <__kernel_rem_pio2+0xd2>
 80020d2:	9b08      	ldr	r3, [sp, #32]
 80020d4:	f04f 0800 	mov.w	r8, #0
 80020d8:	3b08      	subs	r3, #8
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	9b07      	ldr	r3, [sp, #28]
 80020de:	f04f 0900 	mov.w	r9, #0
 80020e2:	199d      	adds	r5, r3, r6
 80020e4:	ab20      	add	r3, sp, #128	; 0x80
 80020e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80020ea:	9305      	str	r3, [sp, #20]
 80020ec:	2700      	movs	r7, #0
 80020ee:	e023      	b.n	8002138 <__kernel_rem_pio2+0xc4>
 80020f0:	42ef      	cmn	r7, r5
 80020f2:	d40b      	bmi.n	800210c <__kernel_rem_pio2+0x98>
 80020f4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80020f8:	e9cd 2300 	strd	r2, r3, [sp]
 80020fc:	f7fe f98a 	bl	8000414 <__aeabi_i2d>
 8002100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002104:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8002108:	3501      	adds	r5, #1
 800210a:	e7da      	b.n	80020c2 <__kernel_rem_pio2+0x4e>
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	e7f8      	b.n	8002104 <__kernel_rem_pio2+0x90>
 8002112:	9905      	ldr	r1, [sp, #20]
 8002114:	9d00      	ldr	r5, [sp, #0]
 8002116:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800211a:	9105      	str	r1, [sp, #20]
 800211c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8002120:	9500      	str	r5, [sp, #0]
 8002122:	f7fe f9e1 	bl	80004e8 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4640      	mov	r0, r8
 800212c:	4649      	mov	r1, r9
 800212e:	f7fe f825 	bl	800017c <__adddf3>
 8002132:	4680      	mov	r8, r0
 8002134:	4689      	mov	r9, r1
 8002136:	3701      	adds	r7, #1
 8002138:	9b06      	ldr	r3, [sp, #24]
 800213a:	429f      	cmp	r7, r3
 800213c:	dde9      	ble.n	8002112 <__kernel_rem_pio2+0x9e>
 800213e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8002142:	3601      	adds	r6, #1
 8002144:	e7c2      	b.n	80020cc <__kernel_rem_pio2+0x58>
 8002146:	9b02      	ldr	r3, [sp, #8]
 8002148:	aa0c      	add	r2, sp, #48	; 0x30
 800214a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800214e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002150:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002152:	9f02      	ldr	r7, [sp, #8]
 8002154:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002158:	930a      	str	r3, [sp, #40]	; 0x28
 800215a:	2600      	movs	r6, #0
 800215c:	ab98      	add	r3, sp, #608	; 0x260
 800215e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8002162:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002166:	f10b 3bff 	add.w	fp, fp, #4294967295
 800216a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800216e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8002172:	ab98      	add	r3, sp, #608	; 0x260
 8002174:	445b      	add	r3, fp
 8002176:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800217a:	1bbb      	subs	r3, r7, r6
 800217c:	2b00      	cmp	r3, #0
 800217e:	dc71      	bgt.n	8002264 <__kernel_rem_pio2+0x1f0>
 8002180:	4652      	mov	r2, sl
 8002182:	4640      	mov	r0, r8
 8002184:	4649      	mov	r1, r9
 8002186:	f000 fbff 	bl	8002988 <scalbn>
 800218a:	2200      	movs	r2, #0
 800218c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002190:	4604      	mov	r4, r0
 8002192:	460d      	mov	r5, r1
 8002194:	f7fe f9a8 	bl	80004e8 <__aeabi_dmul>
 8002198:	f000 fb72 	bl	8002880 <floor>
 800219c:	2200      	movs	r2, #0
 800219e:	4b79      	ldr	r3, [pc, #484]	; (8002384 <__kernel_rem_pio2+0x310>)
 80021a0:	f7fe f9a2 	bl	80004e8 <__aeabi_dmul>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4620      	mov	r0, r4
 80021aa:	4629      	mov	r1, r5
 80021ac:	f7fd ffe4 	bl	8000178 <__aeabi_dsub>
 80021b0:	460d      	mov	r5, r1
 80021b2:	4604      	mov	r4, r0
 80021b4:	f7fe fc32 	bl	8000a1c <__aeabi_d2iz>
 80021b8:	9005      	str	r0, [sp, #20]
 80021ba:	f7fe f92b 	bl	8000414 <__aeabi_i2d>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4620      	mov	r0, r4
 80021c4:	4629      	mov	r1, r5
 80021c6:	f7fd ffd7 	bl	8000178 <__aeabi_dsub>
 80021ca:	f1ba 0f00 	cmp.w	sl, #0
 80021ce:	4680      	mov	r8, r0
 80021d0:	4689      	mov	r9, r1
 80021d2:	dd6c      	ble.n	80022ae <__kernel_rem_pio2+0x23a>
 80021d4:	1e7a      	subs	r2, r7, #1
 80021d6:	ab0c      	add	r3, sp, #48	; 0x30
 80021d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80021dc:	f1ca 0118 	rsb	r1, sl, #24
 80021e0:	9c05      	ldr	r4, [sp, #20]
 80021e2:	fa40 f301 	asr.w	r3, r0, r1
 80021e6:	441c      	add	r4, r3
 80021e8:	408b      	lsls	r3, r1
 80021ea:	1ac0      	subs	r0, r0, r3
 80021ec:	ab0c      	add	r3, sp, #48	; 0x30
 80021ee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80021f2:	f1ca 0317 	rsb	r3, sl, #23
 80021f6:	9405      	str	r4, [sp, #20]
 80021f8:	fa40 f303 	asr.w	r3, r0, r3
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	9b00      	ldr	r3, [sp, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	dd62      	ble.n	80022ca <__kernel_rem_pio2+0x256>
 8002204:	2200      	movs	r2, #0
 8002206:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800220a:	4614      	mov	r4, r2
 800220c:	9b05      	ldr	r3, [sp, #20]
 800220e:	3301      	adds	r3, #1
 8002210:	9305      	str	r3, [sp, #20]
 8002212:	4297      	cmp	r7, r2
 8002214:	f300 809f 	bgt.w	8002356 <__kernel_rem_pio2+0x2e2>
 8002218:	f1ba 0f00 	cmp.w	sl, #0
 800221c:	dd07      	ble.n	800222e <__kernel_rem_pio2+0x1ba>
 800221e:	f1ba 0f01 	cmp.w	sl, #1
 8002222:	f000 80bb 	beq.w	800239c <__kernel_rem_pio2+0x328>
 8002226:	f1ba 0f02 	cmp.w	sl, #2
 800222a:	f000 80c1 	beq.w	80023b0 <__kernel_rem_pio2+0x33c>
 800222e:	9b00      	ldr	r3, [sp, #0]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d14a      	bne.n	80022ca <__kernel_rem_pio2+0x256>
 8002234:	4642      	mov	r2, r8
 8002236:	464b      	mov	r3, r9
 8002238:	2000      	movs	r0, #0
 800223a:	4953      	ldr	r1, [pc, #332]	; (8002388 <__kernel_rem_pio2+0x314>)
 800223c:	f7fd ff9c 	bl	8000178 <__aeabi_dsub>
 8002240:	4680      	mov	r8, r0
 8002242:	4689      	mov	r9, r1
 8002244:	2c00      	cmp	r4, #0
 8002246:	d040      	beq.n	80022ca <__kernel_rem_pio2+0x256>
 8002248:	4652      	mov	r2, sl
 800224a:	2000      	movs	r0, #0
 800224c:	494e      	ldr	r1, [pc, #312]	; (8002388 <__kernel_rem_pio2+0x314>)
 800224e:	f000 fb9b 	bl	8002988 <scalbn>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4640      	mov	r0, r8
 8002258:	4649      	mov	r1, r9
 800225a:	f7fd ff8d 	bl	8000178 <__aeabi_dsub>
 800225e:	4680      	mov	r8, r0
 8002260:	4689      	mov	r9, r1
 8002262:	e032      	b.n	80022ca <__kernel_rem_pio2+0x256>
 8002264:	2200      	movs	r2, #0
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <__kernel_rem_pio2+0x318>)
 8002268:	4640      	mov	r0, r8
 800226a:	4649      	mov	r1, r9
 800226c:	f7fe f93c 	bl	80004e8 <__aeabi_dmul>
 8002270:	f7fe fbd4 	bl	8000a1c <__aeabi_d2iz>
 8002274:	f7fe f8ce 	bl	8000414 <__aeabi_i2d>
 8002278:	2200      	movs	r2, #0
 800227a:	4b45      	ldr	r3, [pc, #276]	; (8002390 <__kernel_rem_pio2+0x31c>)
 800227c:	e9cd 0100 	strd	r0, r1, [sp]
 8002280:	f7fe f932 	bl	80004e8 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4640      	mov	r0, r8
 800228a:	4649      	mov	r1, r9
 800228c:	f7fd ff74 	bl	8000178 <__aeabi_dsub>
 8002290:	f7fe fbc4 	bl	8000a1c <__aeabi_d2iz>
 8002294:	ab0c      	add	r3, sp, #48	; 0x30
 8002296:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800229a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800229e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80022a2:	f7fd ff6b 	bl	800017c <__adddf3>
 80022a6:	3601      	adds	r6, #1
 80022a8:	4680      	mov	r8, r0
 80022aa:	4689      	mov	r9, r1
 80022ac:	e765      	b.n	800217a <__kernel_rem_pio2+0x106>
 80022ae:	d105      	bne.n	80022bc <__kernel_rem_pio2+0x248>
 80022b0:	1e7b      	subs	r3, r7, #1
 80022b2:	aa0c      	add	r2, sp, #48	; 0x30
 80022b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022b8:	15c3      	asrs	r3, r0, #23
 80022ba:	e79f      	b.n	80021fc <__kernel_rem_pio2+0x188>
 80022bc:	2200      	movs	r2, #0
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <__kernel_rem_pio2+0x320>)
 80022c0:	f7fe fb98 	bl	80009f4 <__aeabi_dcmpge>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d143      	bne.n	8002350 <__kernel_rem_pio2+0x2dc>
 80022c8:	9000      	str	r0, [sp, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	2300      	movs	r3, #0
 80022ce:	4640      	mov	r0, r8
 80022d0:	4649      	mov	r1, r9
 80022d2:	f7fe fb71 	bl	80009b8 <__aeabi_dcmpeq>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	f000 80c3 	beq.w	8002462 <__kernel_rem_pio2+0x3ee>
 80022dc:	1e7c      	subs	r4, r7, #1
 80022de:	4623      	mov	r3, r4
 80022e0:	2200      	movs	r2, #0
 80022e2:	9902      	ldr	r1, [sp, #8]
 80022e4:	428b      	cmp	r3, r1
 80022e6:	da6a      	bge.n	80023be <__kernel_rem_pio2+0x34a>
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	f000 8084 	beq.w	80023f6 <__kernel_rem_pio2+0x382>
 80022ee:	ab0c      	add	r3, sp, #48	; 0x30
 80022f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80022f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80b0 	beq.w	800245e <__kernel_rem_pio2+0x3ea>
 80022fe:	4652      	mov	r2, sl
 8002300:	2000      	movs	r0, #0
 8002302:	4921      	ldr	r1, [pc, #132]	; (8002388 <__kernel_rem_pio2+0x314>)
 8002304:	f000 fb40 	bl	8002988 <scalbn>
 8002308:	4625      	mov	r5, r4
 800230a:	4606      	mov	r6, r0
 800230c:	460f      	mov	r7, r1
 800230e:	f04f 0a00 	mov.w	sl, #0
 8002312:	00e3      	lsls	r3, r4, #3
 8002314:	aa98      	add	r2, sp, #608	; 0x260
 8002316:	eb02 0803 	add.w	r8, r2, r3
 800231a:	f8df b070 	ldr.w	fp, [pc, #112]	; 800238c <__kernel_rem_pio2+0x318>
 800231e:	9306      	str	r3, [sp, #24]
 8002320:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8002324:	2d00      	cmp	r5, #0
 8002326:	f280 80d2 	bge.w	80024ce <__kernel_rem_pio2+0x45a>
 800232a:	2500      	movs	r5, #0
 800232c:	9a06      	ldr	r2, [sp, #24]
 800232e:	ab98      	add	r3, sp, #608	; 0x260
 8002330:	189e      	adds	r6, r3, r2
 8002332:	3ea8      	subs	r6, #168	; 0xa8
 8002334:	1b63      	subs	r3, r4, r5
 8002336:	2b00      	cmp	r3, #0
 8002338:	f2c0 80f9 	blt.w	800252e <__kernel_rem_pio2+0x4ba>
 800233c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8002398 <__kernel_rem_pio2+0x324>
 8002340:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8002344:	f04f 0a00 	mov.w	sl, #0
 8002348:	f04f 0b00 	mov.w	fp, #0
 800234c:	2700      	movs	r7, #0
 800234e:	e0e2      	b.n	8002516 <__kernel_rem_pio2+0x4a2>
 8002350:	2302      	movs	r3, #2
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	e756      	b.n	8002204 <__kernel_rem_pio2+0x190>
 8002356:	ab0c      	add	r3, sp, #48	; 0x30
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	b94c      	cbnz	r4, 8002372 <__kernel_rem_pio2+0x2fe>
 800235e:	b12b      	cbz	r3, 800236c <__kernel_rem_pio2+0x2f8>
 8002360:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002364:	a80c      	add	r0, sp, #48	; 0x30
 8002366:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800236a:	2301      	movs	r3, #1
 800236c:	3201      	adds	r2, #1
 800236e:	461c      	mov	r4, r3
 8002370:	e74f      	b.n	8002212 <__kernel_rem_pio2+0x19e>
 8002372:	1acb      	subs	r3, r1, r3
 8002374:	a80c      	add	r0, sp, #48	; 0x30
 8002376:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800237a:	4623      	mov	r3, r4
 800237c:	e7f6      	b.n	800236c <__kernel_rem_pio2+0x2f8>
 800237e:	bf00      	nop
 8002380:	08002c58 	.word	0x08002c58
 8002384:	40200000 	.word	0x40200000
 8002388:	3ff00000 	.word	0x3ff00000
 800238c:	3e700000 	.word	0x3e700000
 8002390:	41700000 	.word	0x41700000
 8002394:	3fe00000 	.word	0x3fe00000
 8002398:	08002c10 	.word	0x08002c10
 800239c:	1e7a      	subs	r2, r7, #1
 800239e:	ab0c      	add	r3, sp, #48	; 0x30
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80023a8:	a90c      	add	r1, sp, #48	; 0x30
 80023aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80023ae:	e73e      	b.n	800222e <__kernel_rem_pio2+0x1ba>
 80023b0:	1e7a      	subs	r2, r7, #1
 80023b2:	ab0c      	add	r3, sp, #48	; 0x30
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80023bc:	e7f4      	b.n	80023a8 <__kernel_rem_pio2+0x334>
 80023be:	a90c      	add	r1, sp, #48	; 0x30
 80023c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	430a      	orrs	r2, r1
 80023c8:	e78b      	b.n	80022e2 <__kernel_rem_pio2+0x26e>
 80023ca:	3401      	adds	r4, #1
 80023cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80023d0:	2a00      	cmp	r2, #0
 80023d2:	d0fa      	beq.n	80023ca <__kernel_rem_pio2+0x356>
 80023d4:	ab98      	add	r3, sp, #608	; 0x260
 80023d6:	449b      	add	fp, r3
 80023d8:	9b07      	ldr	r3, [sp, #28]
 80023da:	1c7e      	adds	r6, r7, #1
 80023dc:	19dd      	adds	r5, r3, r7
 80023de:	ab98      	add	r3, sp, #608	; 0x260
 80023e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80023e4:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 80023e8:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 80023ec:	443c      	add	r4, r7
 80023ee:	42b4      	cmp	r4, r6
 80023f0:	da04      	bge.n	80023fc <__kernel_rem_pio2+0x388>
 80023f2:	4627      	mov	r7, r4
 80023f4:	e6b1      	b.n	800215a <__kernel_rem_pio2+0xe6>
 80023f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80023f8:	2401      	movs	r4, #1
 80023fa:	e7e7      	b.n	80023cc <__kernel_rem_pio2+0x358>
 80023fc:	f105 0308 	add.w	r3, r5, #8
 8002400:	9309      	str	r3, [sp, #36]	; 0x24
 8002402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002404:	2700      	movs	r7, #0
 8002406:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800240a:	f7fe f803 	bl	8000414 <__aeabi_i2d>
 800240e:	f04f 0800 	mov.w	r8, #0
 8002412:	f04f 0900 	mov.w	r9, #0
 8002416:	9b08      	ldr	r3, [sp, #32]
 8002418:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800241c:	3b08      	subs	r3, #8
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f105 0310 	add.w	r3, r5, #16
 8002424:	9305      	str	r3, [sp, #20]
 8002426:	9b06      	ldr	r3, [sp, #24]
 8002428:	429f      	cmp	r7, r3
 800242a:	dd04      	ble.n	8002436 <__kernel_rem_pio2+0x3c2>
 800242c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8002430:	3601      	adds	r6, #1
 8002432:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002434:	e7db      	b.n	80023ee <__kernel_rem_pio2+0x37a>
 8002436:	9905      	ldr	r1, [sp, #20]
 8002438:	9d00      	ldr	r5, [sp, #0]
 800243a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800243e:	9105      	str	r1, [sp, #20]
 8002440:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8002444:	9500      	str	r5, [sp, #0]
 8002446:	f7fe f84f 	bl	80004e8 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4640      	mov	r0, r8
 8002450:	4649      	mov	r1, r9
 8002452:	f7fd fe93 	bl	800017c <__adddf3>
 8002456:	3701      	adds	r7, #1
 8002458:	4680      	mov	r8, r0
 800245a:	4689      	mov	r9, r1
 800245c:	e7e3      	b.n	8002426 <__kernel_rem_pio2+0x3b2>
 800245e:	3c01      	subs	r4, #1
 8002460:	e745      	b.n	80022ee <__kernel_rem_pio2+0x27a>
 8002462:	f1ca 0200 	rsb	r2, sl, #0
 8002466:	4640      	mov	r0, r8
 8002468:	4649      	mov	r1, r9
 800246a:	f000 fa8d 	bl	8002988 <scalbn>
 800246e:	2200      	movs	r2, #0
 8002470:	4ba3      	ldr	r3, [pc, #652]	; (8002700 <__kernel_rem_pio2+0x68c>)
 8002472:	4604      	mov	r4, r0
 8002474:	460d      	mov	r5, r1
 8002476:	f7fe fabd 	bl	80009f4 <__aeabi_dcmpge>
 800247a:	b1f8      	cbz	r0, 80024bc <__kernel_rem_pio2+0x448>
 800247c:	2200      	movs	r2, #0
 800247e:	4ba1      	ldr	r3, [pc, #644]	; (8002704 <__kernel_rem_pio2+0x690>)
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	f7fe f830 	bl	80004e8 <__aeabi_dmul>
 8002488:	f7fe fac8 	bl	8000a1c <__aeabi_d2iz>
 800248c:	4606      	mov	r6, r0
 800248e:	f7fd ffc1 	bl	8000414 <__aeabi_i2d>
 8002492:	2200      	movs	r2, #0
 8002494:	4b9a      	ldr	r3, [pc, #616]	; (8002700 <__kernel_rem_pio2+0x68c>)
 8002496:	f7fe f827 	bl	80004e8 <__aeabi_dmul>
 800249a:	460b      	mov	r3, r1
 800249c:	4602      	mov	r2, r0
 800249e:	4629      	mov	r1, r5
 80024a0:	4620      	mov	r0, r4
 80024a2:	f7fd fe69 	bl	8000178 <__aeabi_dsub>
 80024a6:	f7fe fab9 	bl	8000a1c <__aeabi_d2iz>
 80024aa:	1c7c      	adds	r4, r7, #1
 80024ac:	ab0c      	add	r3, sp, #48	; 0x30
 80024ae:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80024b2:	f10a 0a18 	add.w	sl, sl, #24
 80024b6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80024ba:	e720      	b.n	80022fe <__kernel_rem_pio2+0x28a>
 80024bc:	4620      	mov	r0, r4
 80024be:	4629      	mov	r1, r5
 80024c0:	f7fe faac 	bl	8000a1c <__aeabi_d2iz>
 80024c4:	ab0c      	add	r3, sp, #48	; 0x30
 80024c6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80024ca:	463c      	mov	r4, r7
 80024cc:	e717      	b.n	80022fe <__kernel_rem_pio2+0x28a>
 80024ce:	ab0c      	add	r3, sp, #48	; 0x30
 80024d0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80024d4:	f7fd ff9e 	bl	8000414 <__aeabi_i2d>
 80024d8:	4632      	mov	r2, r6
 80024da:	463b      	mov	r3, r7
 80024dc:	f7fe f804 	bl	80004e8 <__aeabi_dmul>
 80024e0:	4652      	mov	r2, sl
 80024e2:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80024e6:	465b      	mov	r3, fp
 80024e8:	4630      	mov	r0, r6
 80024ea:	4639      	mov	r1, r7
 80024ec:	f7fd fffc 	bl	80004e8 <__aeabi_dmul>
 80024f0:	3d01      	subs	r5, #1
 80024f2:	4606      	mov	r6, r0
 80024f4:	460f      	mov	r7, r1
 80024f6:	e715      	b.n	8002324 <__kernel_rem_pio2+0x2b0>
 80024f8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80024fc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8002500:	f7fd fff2 	bl	80004e8 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4650      	mov	r0, sl
 800250a:	4659      	mov	r1, fp
 800250c:	f7fd fe36 	bl	800017c <__adddf3>
 8002510:	4682      	mov	sl, r0
 8002512:	468b      	mov	fp, r1
 8002514:	3701      	adds	r7, #1
 8002516:	9b02      	ldr	r3, [sp, #8]
 8002518:	429f      	cmp	r7, r3
 800251a:	dc01      	bgt.n	8002520 <__kernel_rem_pio2+0x4ac>
 800251c:	42bd      	cmp	r5, r7
 800251e:	daeb      	bge.n	80024f8 <__kernel_rem_pio2+0x484>
 8002520:	ab48      	add	r3, sp, #288	; 0x120
 8002522:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002526:	e9c3 ab00 	strd	sl, fp, [r3]
 800252a:	3501      	adds	r5, #1
 800252c:	e702      	b.n	8002334 <__kernel_rem_pio2+0x2c0>
 800252e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8002530:	2b03      	cmp	r3, #3
 8002532:	d86c      	bhi.n	800260e <__kernel_rem_pio2+0x59a>
 8002534:	e8df f003 	tbb	[pc, r3]
 8002538:	022f2f59 	.word	0x022f2f59
 800253c:	9a06      	ldr	r2, [sp, #24]
 800253e:	ab48      	add	r3, sp, #288	; 0x120
 8002540:	189d      	adds	r5, r3, r2
 8002542:	46aa      	mov	sl, r5
 8002544:	46a3      	mov	fp, r4
 8002546:	f1bb 0f00 	cmp.w	fp, #0
 800254a:	f300 8087 	bgt.w	800265c <__kernel_rem_pio2+0x5e8>
 800254e:	46a2      	mov	sl, r4
 8002550:	f1ba 0f01 	cmp.w	sl, #1
 8002554:	f300 809f 	bgt.w	8002696 <__kernel_rem_pio2+0x622>
 8002558:	2700      	movs	r7, #0
 800255a:	463e      	mov	r6, r7
 800255c:	9d06      	ldr	r5, [sp, #24]
 800255e:	ab48      	add	r3, sp, #288	; 0x120
 8002560:	3508      	adds	r5, #8
 8002562:	441d      	add	r5, r3
 8002564:	2c01      	cmp	r4, #1
 8002566:	f300 80b3 	bgt.w	80026d0 <__kernel_rem_pio2+0x65c>
 800256a:	9b00      	ldr	r3, [sp, #0]
 800256c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800256e:	9849      	ldr	r0, [sp, #292]	; 0x124
 8002570:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8002572:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8002574:	2b00      	cmp	r3, #0
 8002576:	f040 80b5 	bne.w	80026e4 <__kernel_rem_pio2+0x670>
 800257a:	4603      	mov	r3, r0
 800257c:	462a      	mov	r2, r5
 800257e:	9804      	ldr	r0, [sp, #16]
 8002580:	e9c0 2300 	strd	r2, r3, [r0]
 8002584:	4622      	mov	r2, r4
 8002586:	460b      	mov	r3, r1
 8002588:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800258c:	463a      	mov	r2, r7
 800258e:	4633      	mov	r3, r6
 8002590:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002594:	e03b      	b.n	800260e <__kernel_rem_pio2+0x59a>
 8002596:	f04f 0c00 	mov.w	ip, #0
 800259a:	4626      	mov	r6, r4
 800259c:	4667      	mov	r7, ip
 800259e:	9d06      	ldr	r5, [sp, #24]
 80025a0:	ab48      	add	r3, sp, #288	; 0x120
 80025a2:	3508      	adds	r5, #8
 80025a4:	441d      	add	r5, r3
 80025a6:	2e00      	cmp	r6, #0
 80025a8:	da42      	bge.n	8002630 <__kernel_rem_pio2+0x5bc>
 80025aa:	9b00      	ldr	r3, [sp, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d049      	beq.n	8002644 <__kernel_rem_pio2+0x5d0>
 80025b0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80025b4:	4662      	mov	r2, ip
 80025b6:	460b      	mov	r3, r1
 80025b8:	9904      	ldr	r1, [sp, #16]
 80025ba:	2601      	movs	r6, #1
 80025bc:	e9c1 2300 	strd	r2, r3, [r1]
 80025c0:	a948      	add	r1, sp, #288	; 0x120
 80025c2:	463b      	mov	r3, r7
 80025c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025c8:	f7fd fdd6 	bl	8000178 <__aeabi_dsub>
 80025cc:	4684      	mov	ip, r0
 80025ce:	460f      	mov	r7, r1
 80025d0:	ad48      	add	r5, sp, #288	; 0x120
 80025d2:	42b4      	cmp	r4, r6
 80025d4:	da38      	bge.n	8002648 <__kernel_rem_pio2+0x5d4>
 80025d6:	9b00      	ldr	r3, [sp, #0]
 80025d8:	b10b      	cbz	r3, 80025de <__kernel_rem_pio2+0x56a>
 80025da:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80025de:	4662      	mov	r2, ip
 80025e0:	463b      	mov	r3, r7
 80025e2:	9904      	ldr	r1, [sp, #16]
 80025e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80025e8:	e011      	b.n	800260e <__kernel_rem_pio2+0x59a>
 80025ea:	2700      	movs	r7, #0
 80025ec:	463d      	mov	r5, r7
 80025ee:	9b06      	ldr	r3, [sp, #24]
 80025f0:	aa98      	add	r2, sp, #608	; 0x260
 80025f2:	4413      	add	r3, r2
 80025f4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 80025f8:	2c00      	cmp	r4, #0
 80025fa:	da0f      	bge.n	800261c <__kernel_rem_pio2+0x5a8>
 80025fc:	9b00      	ldr	r3, [sp, #0]
 80025fe:	b10b      	cbz	r3, 8002604 <__kernel_rem_pio2+0x590>
 8002600:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002604:	463a      	mov	r2, r7
 8002606:	462b      	mov	r3, r5
 8002608:	9904      	ldr	r1, [sp, #16]
 800260a:	e9c1 2300 	strd	r2, r3, [r1]
 800260e:	9b05      	ldr	r3, [sp, #20]
 8002610:	f003 0007 	and.w	r0, r3, #7
 8002614:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8002618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800261c:	4638      	mov	r0, r7
 800261e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8002622:	4629      	mov	r1, r5
 8002624:	f7fd fdaa 	bl	800017c <__adddf3>
 8002628:	3c01      	subs	r4, #1
 800262a:	4607      	mov	r7, r0
 800262c:	460d      	mov	r5, r1
 800262e:	e7e3      	b.n	80025f8 <__kernel_rem_pio2+0x584>
 8002630:	4660      	mov	r0, ip
 8002632:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8002636:	4639      	mov	r1, r7
 8002638:	f7fd fda0 	bl	800017c <__adddf3>
 800263c:	3e01      	subs	r6, #1
 800263e:	4684      	mov	ip, r0
 8002640:	460f      	mov	r7, r1
 8002642:	e7b0      	b.n	80025a6 <__kernel_rem_pio2+0x532>
 8002644:	4639      	mov	r1, r7
 8002646:	e7b5      	b.n	80025b4 <__kernel_rem_pio2+0x540>
 8002648:	4660      	mov	r0, ip
 800264a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800264e:	4639      	mov	r1, r7
 8002650:	f7fd fd94 	bl	800017c <__adddf3>
 8002654:	3601      	adds	r6, #1
 8002656:	4684      	mov	ip, r0
 8002658:	460f      	mov	r7, r1
 800265a:	e7ba      	b.n	80025d2 <__kernel_rem_pio2+0x55e>
 800265c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8002660:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8002664:	4640      	mov	r0, r8
 8002666:	4649      	mov	r1, r9
 8002668:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800266c:	f7fd fd86 	bl	800017c <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4606      	mov	r6, r0
 8002676:	460f      	mov	r7, r1
 8002678:	4640      	mov	r0, r8
 800267a:	4649      	mov	r1, r9
 800267c:	f7fd fd7c 	bl	8000178 <__aeabi_dsub>
 8002680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002684:	f7fd fd7a 	bl	800017c <__adddf3>
 8002688:	f10b 3bff 	add.w	fp, fp, #4294967295
 800268c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002690:	e9ca 6700 	strd	r6, r7, [sl]
 8002694:	e757      	b.n	8002546 <__kernel_rem_pio2+0x4d2>
 8002696:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800269a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800269e:	4630      	mov	r0, r6
 80026a0:	4639      	mov	r1, r7
 80026a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026a6:	f7fd fd69 	bl	800017c <__adddf3>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4680      	mov	r8, r0
 80026b0:	4689      	mov	r9, r1
 80026b2:	4630      	mov	r0, r6
 80026b4:	4639      	mov	r1, r7
 80026b6:	f7fd fd5f 	bl	8000178 <__aeabi_dsub>
 80026ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80026be:	f7fd fd5d 	bl	800017c <__adddf3>
 80026c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80026c6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80026ca:	e9c5 8900 	strd	r8, r9, [r5]
 80026ce:	e73f      	b.n	8002550 <__kernel_rem_pio2+0x4dc>
 80026d0:	4638      	mov	r0, r7
 80026d2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80026d6:	4631      	mov	r1, r6
 80026d8:	f7fd fd50 	bl	800017c <__adddf3>
 80026dc:	3c01      	subs	r4, #1
 80026de:	4607      	mov	r7, r0
 80026e0:	460e      	mov	r6, r1
 80026e2:	e73f      	b.n	8002564 <__kernel_rem_pio2+0x4f0>
 80026e4:	9b04      	ldr	r3, [sp, #16]
 80026e6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80026ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80026ee:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80026f2:	601d      	str	r5, [r3, #0]
 80026f4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80026f8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80026fc:	615e      	str	r6, [r3, #20]
 80026fe:	e786      	b.n	800260e <__kernel_rem_pio2+0x59a>
 8002700:	41700000 	.word	0x41700000
 8002704:	3e700000 	.word	0x3e700000

08002708 <__kernel_sin>:
 8002708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	e9cd 2300 	strd	r2, r3, [sp]
 8002712:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002716:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800271a:	4682      	mov	sl, r0
 800271c:	460c      	mov	r4, r1
 800271e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002720:	da03      	bge.n	800272a <__kernel_sin+0x22>
 8002722:	f7fe f97b 	bl	8000a1c <__aeabi_d2iz>
 8002726:	2800      	cmp	r0, #0
 8002728:	d050      	beq.n	80027cc <__kernel_sin+0xc4>
 800272a:	4652      	mov	r2, sl
 800272c:	4623      	mov	r3, r4
 800272e:	4650      	mov	r0, sl
 8002730:	4621      	mov	r1, r4
 8002732:	f7fd fed9 	bl	80004e8 <__aeabi_dmul>
 8002736:	4606      	mov	r6, r0
 8002738:	460f      	mov	r7, r1
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4650      	mov	r0, sl
 8002740:	4621      	mov	r1, r4
 8002742:	f7fd fed1 	bl	80004e8 <__aeabi_dmul>
 8002746:	a33e      	add	r3, pc, #248	; (adr r3, 8002840 <__kernel_sin+0x138>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	4680      	mov	r8, r0
 800274e:	4689      	mov	r9, r1
 8002750:	4630      	mov	r0, r6
 8002752:	4639      	mov	r1, r7
 8002754:	f7fd fec8 	bl	80004e8 <__aeabi_dmul>
 8002758:	a33b      	add	r3, pc, #236	; (adr r3, 8002848 <__kernel_sin+0x140>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd fd0b 	bl	8000178 <__aeabi_dsub>
 8002762:	4632      	mov	r2, r6
 8002764:	463b      	mov	r3, r7
 8002766:	f7fd febf 	bl	80004e8 <__aeabi_dmul>
 800276a:	a339      	add	r3, pc, #228	; (adr r3, 8002850 <__kernel_sin+0x148>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd fd04 	bl	800017c <__adddf3>
 8002774:	4632      	mov	r2, r6
 8002776:	463b      	mov	r3, r7
 8002778:	f7fd feb6 	bl	80004e8 <__aeabi_dmul>
 800277c:	a336      	add	r3, pc, #216	; (adr r3, 8002858 <__kernel_sin+0x150>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f7fd fcf9 	bl	8000178 <__aeabi_dsub>
 8002786:	4632      	mov	r2, r6
 8002788:	463b      	mov	r3, r7
 800278a:	f7fd fead 	bl	80004e8 <__aeabi_dmul>
 800278e:	a334      	add	r3, pc, #208	; (adr r3, 8002860 <__kernel_sin+0x158>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd fcf2 	bl	800017c <__adddf3>
 8002798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800279c:	b9dd      	cbnz	r5, 80027d6 <__kernel_sin+0xce>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4630      	mov	r0, r6
 80027a4:	4639      	mov	r1, r7
 80027a6:	f7fd fe9f 	bl	80004e8 <__aeabi_dmul>
 80027aa:	a32f      	add	r3, pc, #188	; (adr r3, 8002868 <__kernel_sin+0x160>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd fce2 	bl	8000178 <__aeabi_dsub>
 80027b4:	4642      	mov	r2, r8
 80027b6:	464b      	mov	r3, r9
 80027b8:	f7fd fe96 	bl	80004e8 <__aeabi_dmul>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4650      	mov	r0, sl
 80027c2:	4621      	mov	r1, r4
 80027c4:	f7fd fcda 	bl	800017c <__adddf3>
 80027c8:	4682      	mov	sl, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	4650      	mov	r0, sl
 80027ce:	4621      	mov	r1, r4
 80027d0:	b006      	add	sp, #24
 80027d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027d6:	2200      	movs	r2, #0
 80027d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <__kernel_sin+0x168>)
 80027de:	f7fd fe83 	bl	80004e8 <__aeabi_dmul>
 80027e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80027e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80027ea:	4640      	mov	r0, r8
 80027ec:	4649      	mov	r1, r9
 80027ee:	f7fd fe7b 	bl	80004e8 <__aeabi_dmul>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80027fa:	f7fd fcbd 	bl	8000178 <__aeabi_dsub>
 80027fe:	4632      	mov	r2, r6
 8002800:	463b      	mov	r3, r7
 8002802:	f7fd fe71 	bl	80004e8 <__aeabi_dmul>
 8002806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800280a:	f7fd fcb5 	bl	8000178 <__aeabi_dsub>
 800280e:	a316      	add	r3, pc, #88	; (adr r3, 8002868 <__kernel_sin+0x160>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	4606      	mov	r6, r0
 8002816:	460f      	mov	r7, r1
 8002818:	4640      	mov	r0, r8
 800281a:	4649      	mov	r1, r9
 800281c:	f7fd fe64 	bl	80004e8 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4630      	mov	r0, r6
 8002826:	4639      	mov	r1, r7
 8002828:	f7fd fca8 	bl	800017c <__adddf3>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4650      	mov	r0, sl
 8002832:	4621      	mov	r1, r4
 8002834:	f7fd fca0 	bl	8000178 <__aeabi_dsub>
 8002838:	e7c6      	b.n	80027c8 <__kernel_sin+0xc0>
 800283a:	bf00      	nop
 800283c:	f3af 8000 	nop.w
 8002840:	5acfd57c 	.word	0x5acfd57c
 8002844:	3de5d93a 	.word	0x3de5d93a
 8002848:	8a2b9ceb 	.word	0x8a2b9ceb
 800284c:	3e5ae5e6 	.word	0x3e5ae5e6
 8002850:	57b1fe7d 	.word	0x57b1fe7d
 8002854:	3ec71de3 	.word	0x3ec71de3
 8002858:	19c161d5 	.word	0x19c161d5
 800285c:	3f2a01a0 	.word	0x3f2a01a0
 8002860:	1110f8a6 	.word	0x1110f8a6
 8002864:	3f811111 	.word	0x3f811111
 8002868:	55555549 	.word	0x55555549
 800286c:	3fc55555 	.word	0x3fc55555
 8002870:	3fe00000 	.word	0x3fe00000

08002874 <fabs>:
 8002874:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002878:	4619      	mov	r1, r3
 800287a:	4770      	bx	lr
 800287c:	0000      	movs	r0, r0
	...

08002880 <floor>:
 8002880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002884:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8002888:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800288c:	2e13      	cmp	r6, #19
 800288e:	4607      	mov	r7, r0
 8002890:	460b      	mov	r3, r1
 8002892:	460c      	mov	r4, r1
 8002894:	4605      	mov	r5, r0
 8002896:	dc35      	bgt.n	8002904 <floor+0x84>
 8002898:	2e00      	cmp	r6, #0
 800289a:	da16      	bge.n	80028ca <floor+0x4a>
 800289c:	a336      	add	r3, pc, #216	; (adr r3, 8002978 <floor+0xf8>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f7fd fc6b 	bl	800017c <__adddf3>
 80028a6:	2200      	movs	r2, #0
 80028a8:	2300      	movs	r3, #0
 80028aa:	f7fe f8ad 	bl	8000a08 <__aeabi_dcmpgt>
 80028ae:	b148      	cbz	r0, 80028c4 <floor+0x44>
 80028b0:	2c00      	cmp	r4, #0
 80028b2:	da5b      	bge.n	800296c <floor+0xec>
 80028b4:	2500      	movs	r5, #0
 80028b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80028ba:	4a31      	ldr	r2, [pc, #196]	; (8002980 <floor+0x100>)
 80028bc:	433b      	orrs	r3, r7
 80028be:	42ab      	cmp	r3, r5
 80028c0:	bf18      	it	ne
 80028c2:	4614      	movne	r4, r2
 80028c4:	4623      	mov	r3, r4
 80028c6:	462f      	mov	r7, r5
 80028c8:	e026      	b.n	8002918 <floor+0x98>
 80028ca:	4a2e      	ldr	r2, [pc, #184]	; (8002984 <floor+0x104>)
 80028cc:	fa42 f806 	asr.w	r8, r2, r6
 80028d0:	ea01 0208 	and.w	r2, r1, r8
 80028d4:	4302      	orrs	r2, r0
 80028d6:	d01f      	beq.n	8002918 <floor+0x98>
 80028d8:	a327      	add	r3, pc, #156	; (adr r3, 8002978 <floor+0xf8>)
 80028da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028de:	f7fd fc4d 	bl	800017c <__adddf3>
 80028e2:	2200      	movs	r2, #0
 80028e4:	2300      	movs	r3, #0
 80028e6:	f7fe f88f 	bl	8000a08 <__aeabi_dcmpgt>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d0ea      	beq.n	80028c4 <floor+0x44>
 80028ee:	2c00      	cmp	r4, #0
 80028f0:	bfbe      	ittt	lt
 80028f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80028f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80028fa:	19a4      	addlt	r4, r4, r6
 80028fc:	ea24 0408 	bic.w	r4, r4, r8
 8002900:	2500      	movs	r5, #0
 8002902:	e7df      	b.n	80028c4 <floor+0x44>
 8002904:	2e33      	cmp	r6, #51	; 0x33
 8002906:	dd0b      	ble.n	8002920 <floor+0xa0>
 8002908:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800290c:	d104      	bne.n	8002918 <floor+0x98>
 800290e:	4602      	mov	r2, r0
 8002910:	f7fd fc34 	bl	800017c <__adddf3>
 8002914:	4607      	mov	r7, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4638      	mov	r0, r7
 800291a:	4619      	mov	r1, r3
 800291c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8002928:	fa22 f808 	lsr.w	r8, r2, r8
 800292c:	ea18 0f00 	tst.w	r8, r0
 8002930:	d0f2      	beq.n	8002918 <floor+0x98>
 8002932:	a311      	add	r3, pc, #68	; (adr r3, 8002978 <floor+0xf8>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd fc20 	bl	800017c <__adddf3>
 800293c:	2200      	movs	r2, #0
 800293e:	2300      	movs	r3, #0
 8002940:	f7fe f862 	bl	8000a08 <__aeabi_dcmpgt>
 8002944:	2800      	cmp	r0, #0
 8002946:	d0bd      	beq.n	80028c4 <floor+0x44>
 8002948:	2c00      	cmp	r4, #0
 800294a:	da02      	bge.n	8002952 <floor+0xd2>
 800294c:	2e14      	cmp	r6, #20
 800294e:	d103      	bne.n	8002958 <floor+0xd8>
 8002950:	3401      	adds	r4, #1
 8002952:	ea25 0508 	bic.w	r5, r5, r8
 8002956:	e7b5      	b.n	80028c4 <floor+0x44>
 8002958:	2301      	movs	r3, #1
 800295a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800295e:	fa03 f606 	lsl.w	r6, r3, r6
 8002962:	4435      	add	r5, r6
 8002964:	42bd      	cmp	r5, r7
 8002966:	bf38      	it	cc
 8002968:	18e4      	addcc	r4, r4, r3
 800296a:	e7f2      	b.n	8002952 <floor+0xd2>
 800296c:	2500      	movs	r5, #0
 800296e:	462c      	mov	r4, r5
 8002970:	e7a8      	b.n	80028c4 <floor+0x44>
 8002972:	bf00      	nop
 8002974:	f3af 8000 	nop.w
 8002978:	8800759c 	.word	0x8800759c
 800297c:	7e37e43c 	.word	0x7e37e43c
 8002980:	bff00000 	.word	0xbff00000
 8002984:	000fffff 	.word	0x000fffff

08002988 <scalbn>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	4616      	mov	r6, r2
 800298c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002990:	4604      	mov	r4, r0
 8002992:	460d      	mov	r5, r1
 8002994:	460b      	mov	r3, r1
 8002996:	b982      	cbnz	r2, 80029ba <scalbn+0x32>
 8002998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800299c:	4303      	orrs	r3, r0
 800299e:	d034      	beq.n	8002a0a <scalbn+0x82>
 80029a0:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <scalbn+0xd0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	f7fd fda0 	bl	80004e8 <__aeabi_dmul>
 80029a8:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <scalbn+0xd4>)
 80029aa:	4604      	mov	r4, r0
 80029ac:	429e      	cmp	r6, r3
 80029ae:	460d      	mov	r5, r1
 80029b0:	da0d      	bge.n	80029ce <scalbn+0x46>
 80029b2:	a325      	add	r3, pc, #148	; (adr r3, 8002a48 <scalbn+0xc0>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	e01c      	b.n	80029f4 <scalbn+0x6c>
 80029ba:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80029be:	42ba      	cmp	r2, r7
 80029c0:	d109      	bne.n	80029d6 <scalbn+0x4e>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f7fd fbda 	bl	800017c <__adddf3>
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
 80029cc:	e01d      	b.n	8002a0a <scalbn+0x82>
 80029ce:	460b      	mov	r3, r1
 80029d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80029d4:	3a36      	subs	r2, #54	; 0x36
 80029d6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80029da:	4432      	add	r2, r6
 80029dc:	428a      	cmp	r2, r1
 80029de:	dd0c      	ble.n	80029fa <scalbn+0x72>
 80029e0:	4622      	mov	r2, r4
 80029e2:	462b      	mov	r3, r5
 80029e4:	a11a      	add	r1, pc, #104	; (adr r1, 8002a50 <scalbn+0xc8>)
 80029e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029ea:	f000 f83b 	bl	8002a64 <copysign>
 80029ee:	a318      	add	r3, pc, #96	; (adr r3, 8002a50 <scalbn+0xc8>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd fd78 	bl	80004e8 <__aeabi_dmul>
 80029f8:	e7e6      	b.n	80029c8 <scalbn+0x40>
 80029fa:	2a00      	cmp	r2, #0
 80029fc:	dd08      	ble.n	8002a10 <scalbn+0x88>
 80029fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002a02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a06:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a10:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8002a14:	da0b      	bge.n	8002a2e <scalbn+0xa6>
 8002a16:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002a1a:	429e      	cmp	r6, r3
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	462b      	mov	r3, r5
 8002a20:	dce0      	bgt.n	80029e4 <scalbn+0x5c>
 8002a22:	a109      	add	r1, pc, #36	; (adr r1, 8002a48 <scalbn+0xc0>)
 8002a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a28:	f000 f81c 	bl	8002a64 <copysign>
 8002a2c:	e7c1      	b.n	80029b2 <scalbn+0x2a>
 8002a2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002a32:	3236      	adds	r2, #54	; 0x36
 8002a34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	2200      	movs	r2, #0
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <scalbn+0xd8>)
 8002a44:	e7d6      	b.n	80029f4 <scalbn+0x6c>
 8002a46:	bf00      	nop
 8002a48:	c2f8f359 	.word	0xc2f8f359
 8002a4c:	01a56e1f 	.word	0x01a56e1f
 8002a50:	8800759c 	.word	0x8800759c
 8002a54:	7e37e43c 	.word	0x7e37e43c
 8002a58:	43500000 	.word	0x43500000
 8002a5c:	ffff3cb0 	.word	0xffff3cb0
 8002a60:	3c900000 	.word	0x3c900000

08002a64 <copysign>:
 8002a64:	b530      	push	{r4, r5, lr}
 8002a66:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8002a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a6e:	ea42 0503 	orr.w	r5, r2, r3
 8002a72:	4629      	mov	r1, r5
 8002a74:	bd30      	pop	{r4, r5, pc}
	...

08002a78 <_init>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	bf00      	nop
 8002a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	469e      	mov	lr, r3
 8002a82:	4770      	bx	lr

08002a84 <_fini>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	bf00      	nop
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr
