
f103c8t6_i2c_oled_ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d18  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08001e48  08001e48  00011e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002390  08002390  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002390  08002390  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002390  08002390  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000010  080023a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  20000518  080023a8  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdc3  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021f9  00000000  00000000  0002bdfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000578  00000000  00000000  0002dff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000468  00000000  00000000  0002e570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013460  00000000  00000000  0002e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a44a  00000000  00000000  00041e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059fc8  00000000  00000000  0004c282  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a624a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001268  00000000  00000000  000a62c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08001e30 	.word	0x08001e30

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08001e30 	.word	0x08001e30

08000170 <AHT10_SoftReset>:
//*******************************************************************************************
void AHT10_Init(void){

}
//************************************************************
void AHT10_SoftReset(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	uint8_t cmd = 0xBA;//soft reset command
 8000176:	23ba      	movs	r3, #186	; 0xba
 8000178:	71fb      	strb	r3, [r7, #7]
	//-------------------
	I2C_StartAndSendDeviceAddr(I2C2, AHT10_ADDR);
 800017a:	2172      	movs	r1, #114	; 0x72
 800017c:	4809      	ldr	r0, [pc, #36]	; (80001a4 <AHT10_SoftReset+0x34>)
 800017e:	f000 fec5 	bl	8000f0c <I2C_StartAndSendDeviceAddr>
	I2C_SendData(I2C2, &cmd, 1);
 8000182:	1dfb      	adds	r3, r7, #7
 8000184:	2201      	movs	r2, #1
 8000186:	4619      	mov	r1, r3
 8000188:	4806      	ldr	r0, [pc, #24]	; (80001a4 <AHT10_SoftReset+0x34>)
 800018a:	f000 ff21 	bl	8000fd0 <I2C_SendData>
	I2C_Stop(I2C2);
 800018e:	4805      	ldr	r0, [pc, #20]	; (80001a4 <AHT10_SoftReset+0x34>)
 8000190:	f000 ffa4 	bl	80010dc <I2C_Stop>

	msDelay(50);
 8000194:	2032      	movs	r0, #50	; 0x32
 8000196:	f000 fabb 	bl	8000710 <msDelay>
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40005800 	.word	0x40005800

080001a8 <AHT10>:
//************************************************************
AHT10_t* AHT10(void){
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0

	return &AHT10Str;
 80001ac:	4b02      	ldr	r3, [pc, #8]	; (80001b8 <AHT10+0x10>)
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	2000002c 	.word	0x2000002c

080001bc <AHT10_ReadData>:
//************************************************************
void AHT10_ReadData(void){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0

	uint8_t  cmd           = 0xAC;//start measurment command
 80001c2:	23ac      	movs	r3, #172	; 0xac
 80001c4:	72fb      	strb	r3, [r7, #11]
	uint8_t  rxBuf[6]      = {0}; //
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	809a      	strh	r2, [r3, #4]
	uint32_t AHT10_ADC_Raw = 0;   //
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
	//-------------------
	I2C_StartAndSendDeviceAddr(I2C2, AHT10_ADDR);
 80001d2:	2172      	movs	r1, #114	; 0x72
 80001d4:	4829      	ldr	r0, [pc, #164]	; (800027c <AHT10_ReadData+0xc0>)
 80001d6:	f000 fe99 	bl	8000f0c <I2C_StartAndSendDeviceAddr>
	I2C_SendData(I2C2, &cmd, 1);
 80001da:	f107 030b 	add.w	r3, r7, #11
 80001de:	2201      	movs	r2, #1
 80001e0:	4619      	mov	r1, r3
 80001e2:	4826      	ldr	r0, [pc, #152]	; (800027c <AHT10_ReadData+0xc0>)
 80001e4:	f000 fef4 	bl	8000fd0 <I2C_SendData>
	I2C_Stop(I2C2);
 80001e8:	4824      	ldr	r0, [pc, #144]	; (800027c <AHT10_ReadData+0xc0>)
 80001ea:	f000 ff77 	bl	80010dc <I2C_Stop>

	//msDelay(100);
	msDelay(10);
 80001ee:	200a      	movs	r0, #10
 80001f0:	f000 fa8e 	bl	8000710 <msDelay>

	I2C_StartAndSendDeviceAddr(I2C2, (AHT10_ADDR | 0x01));
 80001f4:	2173      	movs	r1, #115	; 0x73
 80001f6:	4821      	ldr	r0, [pc, #132]	; (800027c <AHT10_ReadData+0xc0>)
 80001f8:	f000 fe88 	bl	8000f0c <I2C_StartAndSendDeviceAddr>
	I2C_ReadData(I2C2, rxBuf, 6);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2206      	movs	r2, #6
 8000200:	4619      	mov	r1, r3
 8000202:	481e      	ldr	r0, [pc, #120]	; (800027c <AHT10_ReadData+0xc0>)
 8000204:	f000 ff08 	bl	8001018 <I2C_ReadData>
	//I2C_Stop(I2C2);

	//Расчет влажности
	AHT10_ADC_Raw   = (rxBuf[1] << 16) | (rxBuf[2] << 8) | (rxBuf[3] & 0xF0);
 8000208:	797b      	ldrb	r3, [r7, #5]
 800020a:	041a      	lsls	r2, r3, #16
 800020c:	79bb      	ldrb	r3, [r7, #6]
 800020e:	021b      	lsls	r3, r3, #8
 8000210:	431a      	orrs	r2, r3
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000218:	4313      	orrs	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
	AHT10_ADC_Raw >>= 4;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	091b      	lsrs	r3, r3, #4
 8000220:	60fb      	str	r3, [r7, #12]
	AHT10_ADC_Raw  /= 100;
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	4a16      	ldr	r2, [pc, #88]	; (8000280 <AHT10_ReadData+0xc4>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	095b      	lsrs	r3, r3, #5
 800022c:	60fb      	str	r3, [r7, #12]
	AHT10Str.Humidity = (uint16_t)AHT10_ADC_Raw;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	b29a      	uxth	r2, r3
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <AHT10_ReadData+0xc8>)
 8000234:	805a      	strh	r2, [r3, #2]
	//Расчет температуры.
	AHT10_ADC_Raw  = ((rxBuf[3] & 0x0F) << 16) | (rxBuf[4] << 8) | rxBuf[5];
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	041b      	lsls	r3, r3, #16
 800023a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800023e:	7a3b      	ldrb	r3, [r7, #8]
 8000240:	021b      	lsls	r3, r3, #8
 8000242:	4313      	orrs	r3, r2
 8000244:	7a7a      	ldrb	r2, [r7, #9]
 8000246:	4313      	orrs	r3, r2
 8000248:	60fb      	str	r3, [r7, #12]
	AHT10_ADC_Raw *= 19;
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	4613      	mov	r3, r2
 800024e:	00db      	lsls	r3, r3, #3
 8000250:	4413      	add	r3, r2
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	4413      	add	r3, r2
 8000256:	60fb      	str	r3, [r7, #12]
	AHT10_ADC_Raw -= 5000000;
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <AHT10_ReadData+0xcc>)
 800025c:	4413      	add	r3, r2
 800025e:	60fb      	str	r3, [r7, #12]
	AHT10_ADC_Raw /= 10000;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <AHT10_ReadData+0xd0>)
 8000264:	fba2 2303 	umull	r2, r3, r2, r3
 8000268:	0b5b      	lsrs	r3, r3, #13
 800026a:	60fb      	str	r3, [r7, #12]
	AHT10Str.Temperature = (uint16_t)AHT10_ADC_Raw;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	b29a      	uxth	r2, r3
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <AHT10_ReadData+0xc8>)
 8000272:	801a      	strh	r2, [r3, #0]
}
 8000274:	bf00      	nop
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40005800 	.word	0x40005800
 8000280:	51eb851f 	.word	0x51eb851f
 8000284:	2000002c 	.word	0x2000002c
 8000288:	ffb3b4c0 	.word	0xffb3b4c0
 800028c:	d1b71759 	.word	0xd1b71759

08000290 <Blink_Loop>:

//-----------------------------------------------------------------------------
static volatile uint16_t BlinkReg = 0;
//-----------------------------------------------------------------------------
//Процесс для мигания светодиодами.
void Blink_Loop(void){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	
	static uint16_t blinkCount = 0;
  //--------------------
	++blinkCount;
 8000294:	4b3b      	ldr	r3, [pc, #236]	; (8000384 <Blink_Loop+0xf4>)
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	3301      	adds	r3, #1
 800029a:	b29a      	uxth	r2, r3
 800029c:	4b39      	ldr	r3, [pc, #228]	; (8000384 <Blink_Loop+0xf4>)
 800029e:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 50)   == 0) BlinkReg ^= (1 << INTERVAL_50_mS);
 80002a0:	4b38      	ldr	r3, [pc, #224]	; (8000384 <Blink_Loop+0xf4>)
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	4a38      	ldr	r2, [pc, #224]	; (8000388 <Blink_Loop+0xf8>)
 80002a6:	fba2 1203 	umull	r1, r2, r2, r3
 80002aa:	0912      	lsrs	r2, r2, #4
 80002ac:	2132      	movs	r1, #50	; 0x32
 80002ae:	fb01 f202 	mul.w	r2, r1, r2
 80002b2:	1a9b      	subs	r3, r3, r2
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d107      	bne.n	80002ca <Blink_Loop+0x3a>
 80002ba:	4b34      	ldr	r3, [pc, #208]	; (800038c <Blink_Loop+0xfc>)
 80002bc:	881b      	ldrh	r3, [r3, #0]
 80002be:	b29b      	uxth	r3, r3
 80002c0:	f083 0301 	eor.w	r3, r3, #1
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b31      	ldr	r3, [pc, #196]	; (800038c <Blink_Loop+0xfc>)
 80002c8:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 100)  == 0) BlinkReg ^= (1 << INTERVAL_100_mS);
 80002ca:	4b2e      	ldr	r3, [pc, #184]	; (8000384 <Blink_Loop+0xf4>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	4a2e      	ldr	r2, [pc, #184]	; (8000388 <Blink_Loop+0xf8>)
 80002d0:	fba2 1203 	umull	r1, r2, r2, r3
 80002d4:	0952      	lsrs	r2, r2, #5
 80002d6:	2164      	movs	r1, #100	; 0x64
 80002d8:	fb01 f202 	mul.w	r2, r1, r2
 80002dc:	1a9b      	subs	r3, r3, r2
 80002de:	b29b      	uxth	r3, r3
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d107      	bne.n	80002f4 <Blink_Loop+0x64>
 80002e4:	4b29      	ldr	r3, [pc, #164]	; (800038c <Blink_Loop+0xfc>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	f083 0302 	eor.w	r3, r3, #2
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	4b26      	ldr	r3, [pc, #152]	; (800038c <Blink_Loop+0xfc>)
 80002f2:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 250)  == 0) BlinkReg ^= (1 << INTERVAL_250_mS);	
 80002f4:	4b23      	ldr	r3, [pc, #140]	; (8000384 <Blink_Loop+0xf4>)
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	4a25      	ldr	r2, [pc, #148]	; (8000390 <Blink_Loop+0x100>)
 80002fa:	fba2 1203 	umull	r1, r2, r2, r3
 80002fe:	0912      	lsrs	r2, r2, #4
 8000300:	21fa      	movs	r1, #250	; 0xfa
 8000302:	fb01 f202 	mul.w	r2, r1, r2
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b29b      	uxth	r3, r3
 800030a:	2b00      	cmp	r3, #0
 800030c:	d107      	bne.n	800031e <Blink_Loop+0x8e>
 800030e:	4b1f      	ldr	r3, [pc, #124]	; (800038c <Blink_Loop+0xfc>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	b29b      	uxth	r3, r3
 8000314:	f083 0304 	eor.w	r3, r3, #4
 8000318:	b29a      	uxth	r2, r3
 800031a:	4b1c      	ldr	r3, [pc, #112]	; (800038c <Blink_Loop+0xfc>)
 800031c:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 500)  == 0) BlinkReg ^= (1 << INTERVAL_500_mS);
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <Blink_Loop+0xf4>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	4a1b      	ldr	r2, [pc, #108]	; (8000390 <Blink_Loop+0x100>)
 8000324:	fba2 1203 	umull	r1, r2, r2, r3
 8000328:	0952      	lsrs	r2, r2, #5
 800032a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800032e:	fb01 f202 	mul.w	r2, r1, r2
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	b29b      	uxth	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d107      	bne.n	800034a <Blink_Loop+0xba>
 800033a:	4b14      	ldr	r3, [pc, #80]	; (800038c <Blink_Loop+0xfc>)
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29b      	uxth	r3, r3
 8000340:	f083 0308 	eor.w	r3, r3, #8
 8000344:	b29a      	uxth	r2, r3
 8000346:	4b11      	ldr	r3, [pc, #68]	; (800038c <Blink_Loop+0xfc>)
 8000348:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 1000) == 0)
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <Blink_Loop+0xf4>)
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	4a10      	ldr	r2, [pc, #64]	; (8000390 <Blink_Loop+0x100>)
 8000350:	fba2 1203 	umull	r1, r2, r2, r3
 8000354:	0992      	lsrs	r2, r2, #6
 8000356:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800035a:	fb01 f202 	mul.w	r2, r1, r2
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	b29b      	uxth	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d10a      	bne.n	800037c <Blink_Loop+0xec>
		{
			BlinkReg  ^= (1 << INTERVAL_1000_mS);
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <Blink_Loop+0xfc>)
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	b29b      	uxth	r3, r3
 800036c:	f083 0310 	eor.w	r3, r3, #16
 8000370:	b29a      	uxth	r2, r3
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <Blink_Loop+0xfc>)
 8000374:	801a      	strh	r2, [r3, #0]
			blinkCount = 0;
 8000376:	4b03      	ldr	r3, [pc, #12]	; (8000384 <Blink_Loop+0xf4>)
 8000378:	2200      	movs	r2, #0
 800037a:	801a      	strh	r2, [r3, #0]
		}
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	20000032 	.word	0x20000032
 8000388:	51eb851f 	.word	0x51eb851f
 800038c:	20000030 	.word	0x20000030
 8000390:	10624dd3 	.word	0x10624dd3

08000394 <Blink>:
//-----------------------------------------------------------------------------
uint16_t Blink(BlinkIntervalEnum_t interval){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	
	if(BlinkReg & (1 << interval)) return 0xFFFF;
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <Blink+0x34>)
 80003a0:	881b      	ldrh	r3, [r3, #0]
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	fa42 f303 	asr.w	r3, r2, r3
 80003ac:	f003 0301 	and.w	r3, r3, #1
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <Blink+0x26>
 80003b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003b8:	e000      	b.n	80003bc <Blink+0x28>
	else											     return 0;
 80003ba:	2300      	movs	r3, #0
}
 80003bc:	4618      	mov	r0, r3
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	20000030 	.word	0x20000030

080003cc <usDelay>:
uint8_t  TemperatureSign	= 0;

//*******************************************************************************************
//*******************************************************************************************
//Функция задержки в микросекундах.
__STATIC_INLINE void usDelay(__IO uint32_t us){
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

	us *= 4;  //Эти цифры подобраны эмпирическим путем для Fclk=72MHz.
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	607b      	str	r3, [r7, #4]
	us += 4;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3304      	adds	r3, #4
 80003de:	607b      	str	r3, [r7, #4]
	while(us--);
 80003e0:	bf00      	nop
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	1e5a      	subs	r2, r3, #1
 80003e6:	607a      	str	r2, [r7, #4]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d1fa      	bne.n	80003e2 <usDelay+0x16>
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
	...

080003f8 <OneWire_Reset>:
//**********************************************************
static uint8_t OneWire_Reset(void){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0

  uint16_t status = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	80fb      	strh	r3, [r7, #6]
  //---------------------
  //низкий уровень
  DS18B20_PIN_LOW();		 //низкий уровень
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <OneWire_Reset+0x50>)
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	4a10      	ldr	r2, [pc, #64]	; (8000448 <OneWire_Reset+0x50>)
 8000408:	f023 0308 	bic.w	r3, r3, #8
 800040c:	60d3      	str	r3, [r2, #12]
  usDelay(DELAY_RESET_PULSE);//задержка как минимум на 480 микросекунд
 800040e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000412:	f7ff ffdb 	bl	80003cc <usDelay>
  //высокий уровень
  DS18B20_PIN_HIGH();		 //высокий уровень
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <OneWire_Reset+0x50>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	4a0b      	ldr	r2, [pc, #44]	; (8000448 <OneWire_Reset+0x50>)
 800041c:	f043 0308 	orr.w	r3, r3, #8
 8000420:	60d3      	str	r3, [r2, #12]
  usDelay(DELAY_READ_PAUSE); //задержка как минимум на 60 микросекунд
 8000422:	2037      	movs	r0, #55	; 0x37
 8000424:	f7ff ffd2 	bl	80003cc <usDelay>
  //проверяем уровень
  status = DS18B20_PIN_READ();   //проверяем уровень
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <OneWire_Reset+0x50>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	b29b      	uxth	r3, r3
 800042e:	f003 0308 	and.w	r3, r3, #8
 8000432:	80fb      	strh	r3, [r7, #6]
  usDelay(DELAY_RESET_PULSE / 2);//на всякий случай подождём, так как могут быть неточности в задержке.
 8000434:	20fa      	movs	r0, #250	; 0xfa
 8000436:	f7ff ffc9 	bl	80003cc <usDelay>
  return status;
 800043a:	88fb      	ldrh	r3, [r7, #6]
 800043c:	b2db      	uxtb	r3, r3
}
 800043e:	4618      	mov	r0, r3
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40010800 	.word	0x40010800

0800044c <OneWire_WriteBit>:
//**********************************************************
static void OneWire_WriteBit(uint8_t bit){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]

	//низкий уровень
	DS18B20_PIN_LOW();
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <OneWire_WriteBit+0x54>)
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	4a11      	ldr	r2, [pc, #68]	; (80004a0 <OneWire_WriteBit+0x54>)
 800045c:	f023 0308 	bic.w	r3, r3, #8
 8000460:	60d3      	str	r3, [r2, #12]
	if(bit) usDelay(DELAY_WRITE_1);
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d003      	beq.n	8000470 <OneWire_WriteBit+0x24>
 8000468:	2005      	movs	r0, #5
 800046a:	f7ff ffaf 	bl	80003cc <usDelay>
 800046e:	e002      	b.n	8000476 <OneWire_WriteBit+0x2a>
	else    usDelay(DELAY_WRITE_0);
 8000470:	2041      	movs	r0, #65	; 0x41
 8000472:	f7ff ffab 	bl	80003cc <usDelay>
	//высокий уровень
	DS18B20_PIN_HIGH();
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <OneWire_WriteBit+0x54>)
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	4a09      	ldr	r2, [pc, #36]	; (80004a0 <OneWire_WriteBit+0x54>)
 800047c:	f043 0308 	orr.w	r3, r3, #8
 8000480:	60d3      	str	r3, [r2, #12]
	if(bit) usDelay(DELAY_WRITE_1_PAUSE);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d003      	beq.n	8000490 <OneWire_WriteBit+0x44>
 8000488:	203c      	movs	r0, #60	; 0x3c
 800048a:	f7ff ff9f 	bl	80003cc <usDelay>
	else    usDelay(DELAY_WRITE_0_PAUSE);
}
 800048e:	e002      	b.n	8000496 <OneWire_WriteBit+0x4a>
	else    usDelay(DELAY_WRITE_0_PAUSE);
 8000490:	2005      	movs	r0, #5
 8000492:	f7ff ff9b 	bl	80003cc <usDelay>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40010800 	.word	0x40010800

080004a4 <OneWire_WriteByte>:
//**********************************************************
static void OneWire_WriteByte(uint8_t data){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < 8; i++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	73fb      	strb	r3, [r7, #15]
 80004b2:	e00d      	b.n	80004d0 <OneWire_WriteByte+0x2c>
		{
			OneWire_WriteBit((data >> i) & 0x01);
 80004b4:	79fa      	ldrb	r2, [r7, #7]
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	fa42 f303 	asr.w	r3, r2, r3
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ffc1 	bl	800044c <OneWire_WriteBit>
	for(uint8_t i = 0; i < 8; i++)
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73fb      	strb	r3, [r7, #15]
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	2b07      	cmp	r3, #7
 80004d4:	d9ee      	bls.n	80004b4 <OneWire_WriteByte+0x10>
			//usDelay(DELAY_PROTECTION);
		}
}
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <OneWire_ReadBit>:
//**********************************************************
static uint8_t OneWire_ReadBit(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

	uint8_t bit = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]
	//---------------------
	//шину к земле.
	DS18B20_PIN_LOW();
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <OneWire_ReadBit+0x50>)
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <OneWire_ReadBit+0x50>)
 80004f0:	f023 0308 	bic.w	r3, r3, #8
 80004f4:	60d3      	str	r3, [r2, #12]
	usDelay(DELAY_READ_SLOT);
 80004f6:	2001      	movs	r0, #1
 80004f8:	f7ff ff68 	bl	80003cc <usDelay>
	//отпустили шину.
	DS18B20_PIN_HIGH();
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <OneWire_ReadBit+0x50>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <OneWire_ReadBit+0x50>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	60d3      	str	r3, [r2, #12]
	usDelay(DELAY_BUS_RELAX);
 8000508:	200f      	movs	r0, #15
 800050a:	f7ff ff5f 	bl	80003cc <usDelay>
	//Чтение состояния линии
	if(DS18B20_PIN_READ()) bit = 1;
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <OneWire_ReadBit+0x50>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	f003 0308 	and.w	r3, r3, #8
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <OneWire_ReadBit+0x3e>
 800051a:	2301      	movs	r3, #1
 800051c:	71fb      	strb	r3, [r7, #7]
	usDelay(DELAY_READ_PAUSE);
 800051e:	2037      	movs	r0, #55	; 0x37
 8000520:	f7ff ff54 	bl	80003cc <usDelay>

	return bit;
 8000524:	79fb      	ldrb	r3, [r7, #7]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010800 	.word	0x40010800

08000534 <ds18b20_getDevider>:
//**********************************************************
static uint8_t ds18b20_getDevider(DS18B20_Resolution_Enum resolution){
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]

	switch (resolution){
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b3f      	cmp	r3, #63	; 0x3f
 8000542:	d005      	beq.n	8000550 <ds18b20_getDevider+0x1c>
 8000544:	2b5f      	cmp	r3, #95	; 0x5f
 8000546:	d005      	beq.n	8000554 <ds18b20_getDevider+0x20>
 8000548:	2b1f      	cmp	r3, #31
 800054a:	d105      	bne.n	8000558 <ds18b20_getDevider+0x24>
		case DS18B20_Resolution_9_bit:  return 8;
 800054c:	2308      	movs	r3, #8
 800054e:	e004      	b.n	800055a <ds18b20_getDevider+0x26>
		case DS18B20_Resolution_10_bit: return 4;
 8000550:	2304      	movs	r3, #4
 8000552:	e002      	b.n	800055a <ds18b20_getDevider+0x26>
		case DS18B20_Resolution_11_bit: return 2;
 8000554:	2302      	movs	r3, #2
 8000556:	e000      	b.n	800055a <ds18b20_getDevider+0x26>
		case DS18B20_Resolution_12_bit:
		default: 						return 1;
 8000558:	2301      	movs	r3, #1
	}
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <readTemperature>:
//**********************************************************
static uint16_t readTemperature(void){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0

	uint32_t data = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
	//---------------------
	for(uint8_t i = 0; i < 16; i++)
 800056e:	2300      	movs	r3, #0
 8000570:	70fb      	strb	r3, [r7, #3]
 8000572:	e00d      	b.n	8000590 <readTemperature+0x2c>
		{
			data |= (uint32_t)(OneWire_ReadBit() << i);
 8000574:	f7ff ffb4 	bl	80004e0 <OneWire_ReadBit>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	461a      	mov	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4313      	orrs	r3, r2
 8000588:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < 16; i++)
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	3301      	adds	r3, #1
 800058e:	70fb      	strb	r3, [r7, #3]
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	2b0f      	cmp	r3, #15
 8000594:	d9ee      	bls.n	8000574 <readTemperature+0x10>
		}
	//Отрицательная температура.
	if(data & 0x0000F800)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00d      	beq.n	80005bc <readTemperature+0x58>
		{
			TemperatureSign = DS18B20_SIGN_NEGATIVE;
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <readTemperature+0x80>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
			data = (data ^ 0xffff) + 1;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 80005ac:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80005b0:	3301      	adds	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
			data &= 0x0000FFFF;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	e002      	b.n	80005c2 <readTemperature+0x5e>
		}
	else TemperatureSign = DS18B20_SIGN_POSITIVE;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <readTemperature+0x80>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	//Расчет температуры
	return (uint16_t)(((data * 625) + 500) / 1000);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f240 2271 	movw	r2, #625	; 0x271
 80005c8:	fb02 f303 	mul.w	r3, r2, r3
 80005cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <readTemperature+0x84>)
 80005d2:	fba2 2303 	umull	r2, r3, r2, r3
 80005d6:	099b      	lsrs	r3, r3, #6
 80005d8:	b29b      	uxth	r3, r3
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000034 	.word	0x20000034
 80005e8:	10624dd3 	.word	0x10624dd3

080005ec <DS18B20_Init>:
//*******************************************************************************************
//*******************************************************************************************
void DS18B20_Init(DS18B20_Resolution_Enum resolution){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <DS18B20_Init+0x4c>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <DS18B20_Init+0x4c>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6193      	str	r3, [r2, #24]
	//PB1 - 50MHz output open-drain
	DS18B20_GPIO->CRL |=  GPIO_CRL_MODE3;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <DS18B20_Init+0x50>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0d      	ldr	r2, [pc, #52]	; (800063c <DS18B20_Init+0x50>)
 8000608:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800060c:	6013      	str	r3, [r2, #0]
	DS18B20_GPIO->CRL |=  GPIO_CRL_CNF3_0;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <DS18B20_Init+0x50>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <DS18B20_Init+0x50>)
 8000614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000618:	6013      	str	r3, [r2, #0]
	DS18B20_GPIO->CRL &= ~GPIO_CRL_CNF3_1;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <DS18B20_Init+0x50>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <DS18B20_Init+0x50>)
 8000620:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000624:	6013      	str	r3, [r2, #0]

	DS18B20_SetResolution(resolution);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f809 	bl	8000640 <DS18B20_SetResolution>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <DS18B20_SetResolution>:
//**********************************************************
void DS18B20_SetResolution(DS18B20_Resolution_Enum resolution){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]

	OneWire_Reset();//reset();
 800064a:	f7ff fed5 	bl	80003f8 <OneWire_Reset>
	OneWire_WriteByte(SKIP_ROM);
 800064e:	20cc      	movs	r0, #204	; 0xcc
 8000650:	f7ff ff28 	bl	80004a4 <OneWire_WriteByte>
	OneWire_WriteByte(WRITE_SCRATCHPAD);
 8000654:	204e      	movs	r0, #78	; 0x4e
 8000656:	f7ff ff25 	bl	80004a4 <OneWire_WriteByte>
	OneWire_WriteByte(TH_REGISTER);
 800065a:	204b      	movs	r0, #75	; 0x4b
 800065c:	f7ff ff22 	bl	80004a4 <OneWire_WriteByte>
	OneWire_WriteByte(TL_REGISTER);
 8000660:	2046      	movs	r0, #70	; 0x46
 8000662:	f7ff ff1f 	bl	80004a4 <OneWire_WriteByte>
	OneWire_WriteByte(resolution);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff1b 	bl	80004a4 <OneWire_WriteByte>
	DELAY_WAIT_CONVERT = DELAY_T_CONVERT / ds18b20_getDevider(resolution);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff5f 	bl	8000534 <ds18b20_getDevider>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <DS18B20_SetResolution+0x50>)
 800067c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000680:	461a      	mov	r2, r3
 8000682:	4b04      	ldr	r3, [pc, #16]	; (8000694 <DS18B20_SetResolution+0x54>)
 8000684:	601a      	str	r2, [r3, #0]
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	000b98c0 	.word	0x000b98c0
 8000694:	20000000 	.word	0x20000000

08000698 <DS18B20_StartConvertTemperature>:
//**********************************************************
void DS18B20_StartConvertTemperature(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

	if(OneWire_Reset()) return;
 800069c:	f7ff feac 	bl	80003f8 <OneWire_Reset>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d106      	bne.n	80006b4 <DS18B20_StartConvertTemperature+0x1c>
	OneWire_WriteByte(SKIP_ROM);
 80006a6:	20cc      	movs	r0, #204	; 0xcc
 80006a8:	f7ff fefc 	bl	80004a4 <OneWire_WriteByte>
	OneWire_WriteByte(CONVERT_T);
 80006ac:	2044      	movs	r0, #68	; 0x44
 80006ae:	f7ff fef9 	bl	80004a4 <OneWire_WriteByte>
 80006b2:	e000      	b.n	80006b6 <DS18B20_StartConvertTemperature+0x1e>
	if(OneWire_Reset()) return;
 80006b4:	bf00      	nop
}
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <DS18B20_ReadTemperature>:
//**********************************************************
uint16_t DS18B20_ReadTemperature(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

	if(OneWire_Reset()) return 0;//99;
 80006bc:	f7ff fe9c 	bl	80003f8 <OneWire_Reset>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <DS18B20_ReadTemperature+0x12>
 80006c6:	2300      	movs	r3, #0
 80006c8:	e008      	b.n	80006dc <DS18B20_ReadTemperature+0x24>
	OneWire_WriteByte(SKIP_ROM);
 80006ca:	20cc      	movs	r0, #204	; 0xcc
 80006cc:	f7ff feea 	bl	80004a4 <OneWire_WriteByte>
	OneWire_WriteByte(READ_SCRATCHPAD);
 80006d0:	20be      	movs	r0, #190	; 0xbe
 80006d2:	f7ff fee7 	bl	80004a4 <OneWire_WriteByte>

	return readTemperature();
 80006d6:	f7ff ff45 	bl	8000564 <readTemperature>
 80006da:	4603      	mov	r3, r0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	bd80      	pop	{r7, pc}

080006e0 <DS18B20_GetTemperatureSign>:
//**********************************************************
uint8_t DS18B20_GetTemperatureSign(void){
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

	return TemperatureSign;
 80006e4:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <DS18B20_GetTemperatureSign+0x10>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000034 	.word	0x20000034

080006f4 <msDelay_Loop>:

//*******************************************************************************************
static volatile uint32_t msCounter = 0;
//*******************************************************************************************
//*******************************************************************************************
void msDelay_Loop(void){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

	msCounter++;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <msDelay_Loop+0x18>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a03      	ldr	r2, [pc, #12]	; (800070c <msDelay_Loop+0x18>)
 8000700:	6013      	str	r3, [r2, #0]
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000038 	.word	0x20000038

08000710 <msDelay>:
//**********************************************************
void msDelay(volatile uint32_t del){
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

	msCounter = 0;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <msDelay+0x28>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
	while(msCounter < del){__NOP();};
 800071e:	e000      	b.n	8000722 <msDelay+0x12>
 8000720:	bf00      	nop
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <msDelay+0x28>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d3f9      	bcc.n	8000720 <msDelay+0x10>
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000038 	.word	0x20000038

0800073c <Filter_EMA>:
  arr[t]   = inValue;       // запоминаем в массив
  return (uint16_t)(average / NUM_READ);
}
//************************************************************
//Эспоненциальное скользящее среднее (Exponential Moving Average, EMA).
uint16_t Filter_EMA(uint16_t inValue){
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]

  static uint16_t filVal = 0;
  //-------------------
  filVal += ((inValue - filVal) >> 3);
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	4a08      	ldr	r2, [pc, #32]	; (800076c <Filter_EMA+0x30>)
 800074a:	8812      	ldrh	r2, [r2, #0]
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	10db      	asrs	r3, r3, #3
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <Filter_EMA+0x30>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <Filter_EMA+0x30>)
 800075c:	801a      	strh	r2, [r3, #0]
  return (uint16_t)filVal;
 800075e:	4b03      	ldr	r3, [pc, #12]	; (800076c <Filter_EMA+0x30>)
 8000760:	881b      	ldrh	r3, [r3, #0]
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	2000003c 	.word	0x2000003c

08000770 <ClearTextBuf>:
extern const unsigned char Ascii_Tab_12864[];//Рабочая.
#define TabAscii	       Ascii_Tab_12864   //Рабочая.
//*********************************************************************************************
//*********************************************************************************************
//Очистка текстового буфера.
static void ClearTextBuf(void){
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i<LCD_TEXT_BUFFER_SIZE; i++) lcdTextBuf[i] = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	e006      	b.n	800078a <ClearTextBuf+0x1a>
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <ClearTextBuf+0x2c>)
 8000780:	2100      	movs	r1, #0
 8000782:	54d1      	strb	r1, [r2, r3]
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	3301      	adds	r3, #1
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b15      	cmp	r3, #21
 800078e:	d9f5      	bls.n	800077c <ClearTextBuf+0xc>
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000040 	.word	0x20000040

080007a0 <Lcd_Update>:
	Lcd_Clear();
	Lcd_Update();
}
//*****************************************************************************
//Вывод буфера на дисплей.
void Lcd_Update(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

//	Lm6063LcdUpdate(LcdCache);
//	Lcd_TIC32_SendData(LcdCache);
	SSD1306_UpdateScreen(lcdVideoBuffer);
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <Lcd_Update+0x10>)
 80007a6:	f001 facd 	bl	8001d44 <SSD1306_UpdateScreen>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000058 	.word	0x20000058

080007b4 <Lcd_pVideoBuffer>:
//*****************************************************************************
uint8_t* Lcd_pVideoBuffer(void){
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

	return lcdVideoBuffer;
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <Lcd_pVideoBuffer+0x10>)
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000058 	.word	0x20000058

080007c8 <Lcd_Clear>:
//*********************************************************************************************
//*********************************************************************************************
//Clears the display
void Lcd_Clear(void){
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  
	//забиваем всю память 0
	for(uint16_t i = 0; i < LCD_VIDEO_BUFFER_SIZE; i++) lcdVideoBuffer[i] = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	80fb      	strh	r3, [r7, #6]
 80007d2:	e006      	b.n	80007e2 <Lcd_Clear+0x1a>
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <Lcd_Clear+0x2c>)
 80007d8:	2100      	movs	r1, #0
 80007da:	54d1      	strb	r1, [r2, r3]
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	3301      	adds	r3, #1
 80007e0:	80fb      	strh	r3, [r7, #6]
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007e8:	d3f4      	bcc.n	80007d4 <Lcd_Clear+0xc>
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	20000058 	.word	0x20000058

080007f8 <Lcd_GotoXYFont>:
  horizon_line2 = (y2-y1-3);
  for(i=horizon_line2;i>horizon_line;i--) Lcd_Line(x1+2,y2-2-i,x2-2,y2-2-i,0);
}
//*****************************************************************************
//Установка курсора в положение Х,У. Диапазон значений Х,У: 1,1 .. 14,8.
void Lcd_GotoXYFont(uint8_t x, uint8_t y){
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	460a      	mov	r2, r1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	71bb      	strb	r3, [r7, #6]
  
  if((x > 24) || (y > 8)) return;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b18      	cmp	r3, #24
 800080c:	d814      	bhi.n	8000838 <Lcd_GotoXYFont+0x40>
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	2b08      	cmp	r3, #8
 8000812:	d811      	bhi.n	8000838 <Lcd_GotoXYFont+0x40>
  LcdCacheIdx = (uint16_t)((y-1) * 128) + (uint16_t)((x-1) * 6);
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	3b01      	subs	r3, #1
 8000818:	b29b      	uxth	r3, r3
 800081a:	01db      	lsls	r3, r3, #7
 800081c:	b29a      	uxth	r2, r3
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	3b01      	subs	r3, #1
 8000822:	b29b      	uxth	r3, r3
 8000824:	4619      	mov	r1, r3
 8000826:	0049      	lsls	r1, r1, #1
 8000828:	440b      	add	r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	b29b      	uxth	r3, r3
 800082e:	4413      	add	r3, r2
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <Lcd_GotoXYFont+0x4c>)
 8000834:	801a      	strh	r2, [r3, #0]
 8000836:	e000      	b.n	800083a <Lcd_GotoXYFont+0x42>
  if((x > 24) || (y > 8)) return;
 8000838:	bf00      	nop
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000458 	.word	0x20000458

08000848 <Lcd_Chr>:
//*****************************************************************************
//Displays a character at current cursor location and increment cursor location
void Lcd_Chr(uint16_t ch){
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  unsigned char i;
  //--------------------
  //Проверка на максимум.
  //if(ch > LCD_CACHE_SIZE) return;
  //--------------------
  for (i=0; i<5; i++)
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	e013      	b.n	8000880 <Lcd_Chr+0x38>
    {
      //выделяем байт-столбик из символа и грузим в массив - 5 раз
	  lcdVideoBuffer[LcdCacheIdx++] = TabAscii[ch*5+i];
 8000858:	88fa      	ldrh	r2, [r7, #6]
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	441a      	add	r2, r3
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	441a      	add	r2, r3
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <Lcd_Chr+0x5c>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	1c59      	adds	r1, r3, #1
 800086a:	b288      	uxth	r0, r1
 800086c:	490d      	ldr	r1, [pc, #52]	; (80008a4 <Lcd_Chr+0x5c>)
 800086e:	8008      	strh	r0, [r1, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <Lcd_Chr+0x60>)
 8000874:	5c9a      	ldrb	r2, [r3, r2]
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <Lcd_Chr+0x64>)
 8000878:	545a      	strb	r2, [r3, r1]
  for (i=0; i<5; i++)
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	3301      	adds	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	2b04      	cmp	r3, #4
 8000884:	d9e8      	bls.n	8000858 <Lcd_Chr+0x10>
    }
  lcdVideoBuffer[LcdCacheIdx++] = 0x00;	//добавляем пробел между символами
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <Lcd_Chr+0x5c>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	b291      	uxth	r1, r2
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <Lcd_Chr+0x5c>)
 8000890:	8011      	strh	r1, [r2, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <Lcd_Chr+0x64>)
 8000896:	2100      	movs	r1, #0
 8000898:	5499      	strb	r1, [r3, r2]
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	20000458 	.word	0x20000458
 80008a8:	08001e90 	.word	0x08001e90
 80008ac:	20000058 	.word	0x20000058

080008b0 <Lcd_String>:
//*****************************************************************************
//Печать строки.
void Lcd_String(uint8_t x, uint8_t y){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
  
	unsigned char i;
	//--------------------
	//if (x > 15 || y > 8) return;
	if(x > 22 || y > 8)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b16      	cmp	r3, #22
 80008c4:	d802      	bhi.n	80008cc <Lcd_String+0x1c>
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	2b08      	cmp	r3, #8
 80008ca:	d903      	bls.n	80008d4 <Lcd_String+0x24>
		{
		  x = 22;
 80008cc:	2316      	movs	r3, #22
 80008ce:	71fb      	strb	r3, [r7, #7]
		  y = 8;
 80008d0:	2308      	movs	r3, #8
 80008d2:	71bb      	strb	r3, [r7, #6]
		}
	//--------------------
	Lcd_GotoXYFont (x, y);
 80008d4:	79ba      	ldrb	r2, [r7, #6]
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff8c 	bl	80007f8 <Lcd_GotoXYFont>

	for(i=0; i<(22-x); i++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	e00e      	b.n	8000904 <Lcd_String+0x54>
		{
		  if(lcdTextBuf[i]) Lcd_Chr(lcdTextBuf[i]);
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <Lcd_String+0x68>)
 80008ea:	5cd3      	ldrb	r3, [r2, r3]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d006      	beq.n	80008fe <Lcd_String+0x4e>
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	4a09      	ldr	r2, [pc, #36]	; (8000918 <Lcd_String+0x68>)
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffa5 	bl	8000848 <Lcd_Chr>
	for(i=0; i<(22-x); i++)
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	3301      	adds	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	7bfa      	ldrb	r2, [r7, #15]
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f1c3 0316 	rsb	r3, r3, #22
 800090c:	429a      	cmp	r2, r3
 800090e:	dbea      	blt.n	80008e6 <Lcd_String+0x36>
		}
//	clean_lcd_buf();
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000040 	.word	0x20000040

0800091c <Lcd_ChrBold>:
//*****************************************************************************
//Displays a bold character at current cursor location and increment cursor location
void Lcd_ChrBold(int ch){
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  
  unsigned char i;
  unsigned char a = 0, b = 0, c = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	73bb      	strb	r3, [r7, #14]
 8000928:	2300      	movs	r3, #0
 800092a:	737b      	strb	r3, [r7, #13]
 800092c:	2300      	movs	r3, #0
 800092e:	733b      	strb	r3, [r7, #12]
  //--------------------    	
  for(i = 0; i < 5; i++)
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	e096      	b.n	8000a64 <Lcd_ChrBold+0x148>
    {
      c = TabAscii[(ch*5+i)];//выделяем столбец из символа
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	441a      	add	r2, r3
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	4413      	add	r3, r2
 8000942:	4a57      	ldr	r2, [pc, #348]	; (8000aa0 <Lcd_ChrBold+0x184>)
 8000944:	5cd3      	ldrb	r3, [r2, r3]
 8000946:	733b      	strb	r3, [r7, #12]

      b  = (c & 0x01) * 3;   //"растягиваем" столбец на два байта
 8000948:	7b3b      	ldrb	r3, [r7, #12]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	461a      	mov	r2, r3
 8000952:	0052      	lsls	r2, r2, #1
 8000954:	4413      	add	r3, r2
 8000956:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x02) * 6;
 8000958:	7b3b      	ldrb	r3, [r7, #12]
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	4413      	add	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	b25a      	sxtb	r2, r3
 800096c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000970:	4313      	orrs	r3, r2
 8000972:	b25b      	sxtb	r3, r3
 8000974:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x04) * 12;
 8000976:	7b3b      	ldrb	r3, [r7, #12]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	0052      	lsls	r2, r2, #1
 8000982:	4413      	add	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	b2db      	uxtb	r3, r3
 8000988:	b25a      	sxtb	r2, r3
 800098a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800098e:	4313      	orrs	r3, r2
 8000990:	b25b      	sxtb	r3, r3
 8000992:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x08) * 24;
 8000994:	7b3b      	ldrb	r3, [r7, #12]
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	b2db      	uxtb	r3, r3
 800099c:	461a      	mov	r2, r3
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	b25a      	sxtb	r2, r3
 80009a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	737b      	strb	r3, [r7, #13]

      c >>= 4;
 80009b2:	7b3b      	ldrb	r3, [r7, #12]
 80009b4:	091b      	lsrs	r3, r3, #4
 80009b6:	733b      	strb	r3, [r7, #12]
      a  = (c & 0x01) * 3;
 80009b8:	7b3b      	ldrb	r3, [r7, #12]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	0052      	lsls	r2, r2, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x02) * 6;
 80009c8:	7b3b      	ldrb	r3, [r7, #12]
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	461a      	mov	r2, r3
 80009d2:	0052      	lsls	r2, r2, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	b25a      	sxtb	r2, r3
 80009dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x04) * 12;
 80009e6:	7b3b      	ldrb	r3, [r7, #12]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	0052      	lsls	r2, r2, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	b25a      	sxtb	r2, r3
 80009fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x08) * 24;
 8000a04:	7b3b      	ldrb	r3, [r7, #12]
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	0052      	lsls	r2, r2, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	b25a      	sxtb	r2, r3
 8000a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	73bb      	strb	r3, [r7, #14]

      lcdVideoBuffer[LcdCacheIdx]     = b;//копируем байты в экранный буфер
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <Lcd_ChrBold+0x188>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <Lcd_ChrBold+0x18c>)
 8000a2a:	7b7b      	ldrb	r3, [r7, #13]
 8000a2c:	5453      	strb	r3, [r2, r1]
      lcdVideoBuffer[LcdCacheIdx+1]   = b;//дублируем для получения жирного шрифта
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <Lcd_ChrBold+0x188>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	491c      	ldr	r1, [pc, #112]	; (8000aa8 <Lcd_ChrBold+0x18c>)
 8000a36:	7b7a      	ldrb	r2, [r7, #13]
 8000a38:	54ca      	strb	r2, [r1, r3]
      lcdVideoBuffer[LcdCacheIdx+128] = a;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <Lcd_ChrBold+0x188>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	3380      	adds	r3, #128	; 0x80
 8000a40:	4919      	ldr	r1, [pc, #100]	; (8000aa8 <Lcd_ChrBold+0x18c>)
 8000a42:	7bba      	ldrb	r2, [r7, #14]
 8000a44:	54ca      	strb	r2, [r1, r3]
      lcdVideoBuffer[LcdCacheIdx+129] = a;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <Lcd_ChrBold+0x188>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	3381      	adds	r3, #129	; 0x81
 8000a4c:	4916      	ldr	r1, [pc, #88]	; (8000aa8 <Lcd_ChrBold+0x18c>)
 8000a4e:	7bba      	ldrb	r2, [r7, #14]
 8000a50:	54ca      	strb	r2, [r1, r3]
      LcdCacheIdx = LcdCacheIdx+2;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <Lcd_ChrBold+0x188>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	3302      	adds	r3, #2
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <Lcd_ChrBold+0x188>)
 8000a5c:	801a      	strh	r2, [r3, #0]
  for(i = 0; i < 5; i++)
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	3301      	adds	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	f67f af65 	bls.w	8000936 <Lcd_ChrBold+0x1a>
    }

  lcdVideoBuffer[LcdCacheIdx++] = 0x00;	//для пробела между символами
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <Lcd_ChrBold+0x188>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	b291      	uxth	r1, r2
 8000a74:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <Lcd_ChrBold+0x188>)
 8000a76:	8011      	strh	r1, [r2, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <Lcd_ChrBold+0x18c>)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	5499      	strb	r1, [r3, r2]
  lcdVideoBuffer[LcdCacheIdx++] = 0x00;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <Lcd_ChrBold+0x188>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	b291      	uxth	r1, r2
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <Lcd_ChrBold+0x188>)
 8000a8a:	8011      	strh	r1, [r2, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <Lcd_ChrBold+0x18c>)
 8000a90:	2100      	movs	r1, #0
 8000a92:	5499      	strb	r1, [r3, r2]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	08001e90 	.word	0x08001e90
 8000aa4:	20000458 	.word	0x20000458
 8000aa8:	20000058 	.word	0x20000058

08000aac <Lcd_ChrBig>:
		}
	ClearTextBuf();
}
//*****************************************************************************	
//Displays a character at current cursor location and increment cursor location
void Lcd_ChrBig (int ch){
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  
  unsigned char i;
  unsigned char a = 0, b = 0, c = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73bb      	strb	r3, [r7, #14]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	737b      	strb	r3, [r7, #13]
 8000abc:	2300      	movs	r3, #0
 8000abe:	733b      	strb	r3, [r7, #12]
  //-------------------- 
  for ( i = 0; i < 5; i++ )
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e08a      	b.n	8000bdc <Lcd_ChrBig+0x130>
    {
      c = TabAscii[(ch*5+i)];		//выделяем столбец из символа
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	441a      	add	r2, r3
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a4c      	ldr	r2, [pc, #304]	; (8000c04 <Lcd_ChrBig+0x158>)
 8000ad4:	5cd3      	ldrb	r3, [r2, r3]
 8000ad6:	733b      	strb	r3, [r7, #12]

      b  = (c & 0x01) * 3;            //"растягиваем" столбец на два байта 
 8000ad8:	7b3b      	ldrb	r3, [r7, #12]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	0052      	lsls	r2, r2, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x02) * 6;
 8000ae8:	7b3b      	ldrb	r3, [r7, #12]
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	0052      	lsls	r2, r2, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	b25a      	sxtb	r2, r3
 8000afc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x04) * 12;
 8000b06:	7b3b      	ldrb	r3, [r7, #12]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	0052      	lsls	r2, r2, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	b25a      	sxtb	r2, r3
 8000b1a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	737b      	strb	r3, [r7, #13]
      b |= (c & 0x08) * 24;
 8000b24:	7b3b      	ldrb	r3, [r7, #12]
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	0052      	lsls	r2, r2, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	b25a      	sxtb	r2, r3
 8000b38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	737b      	strb	r3, [r7, #13]

      c >>= 4;
 8000b42:	7b3b      	ldrb	r3, [r7, #12]
 8000b44:	091b      	lsrs	r3, r3, #4
 8000b46:	733b      	strb	r3, [r7, #12]
      a  = (c & 0x01) * 3;
 8000b48:	7b3b      	ldrb	r3, [r7, #12]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	0052      	lsls	r2, r2, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x02) * 6;
 8000b58:	7b3b      	ldrb	r3, [r7, #12]
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	0052      	lsls	r2, r2, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	b25a      	sxtb	r2, r3
 8000b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b25b      	sxtb	r3, r3
 8000b74:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x04) * 12;
 8000b76:	7b3b      	ldrb	r3, [r7, #12]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0052      	lsls	r2, r2, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	b25a      	sxtb	r2, r3
 8000b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	73bb      	strb	r3, [r7, #14]
      a |= (c & 0x08) * 24;
 8000b94:	7b3b      	ldrb	r3, [r7, #12]
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	0052      	lsls	r2, r2, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	b25a      	sxtb	r2, r3
 8000ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	73bb      	strb	r3, [r7, #14]
      lcdVideoBuffer[LcdCacheIdx] = b;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <Lcd_ChrBig+0x15c>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <Lcd_ChrBig+0x160>)
 8000bba:	7b7b      	ldrb	r3, [r7, #13]
 8000bbc:	5453      	strb	r3, [r2, r1]
      lcdVideoBuffer[LcdCacheIdx+128] = a;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <Lcd_ChrBig+0x15c>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	3380      	adds	r3, #128	; 0x80
 8000bc4:	4911      	ldr	r1, [pc, #68]	; (8000c0c <Lcd_ChrBig+0x160>)
 8000bc6:	7bba      	ldrb	r2, [r7, #14]
 8000bc8:	54ca      	strb	r2, [r1, r3]
      LcdCacheIdx = LcdCacheIdx+1;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <Lcd_ChrBig+0x15c>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <Lcd_ChrBig+0x15c>)
 8000bd4:	801a      	strh	r2, [r3, #0]
  for ( i = 0; i < 5; i++ )
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	f67f af71 	bls.w	8000ac6 <Lcd_ChrBig+0x1a>
    }
  lcdVideoBuffer[LcdCacheIdx++] = 0x00;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <Lcd_ChrBig+0x15c>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	b291      	uxth	r1, r2
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <Lcd_ChrBig+0x15c>)
 8000bee:	8011      	strh	r1, [r2, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <Lcd_ChrBig+0x160>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	5499      	strb	r1, [r3, r2]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	08001e90 	.word	0x08001e90
 8000c08:	20000458 	.word	0x20000458
 8000c0c:	20000058 	.word	0x20000058

08000c10 <Lcd_Print>:
			if(lcdTextBuf[i]) Lcd_ChrBig(lcdTextBuf[i]);
		}
	ClearTextBuf();
}
//*****************************************************************************
uint8_t Lcd_Print(char *txt){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  
  uint8_t i = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
  //-------------------- 
  ClearTextBuf();
 8000c1c:	f7ff fda8 	bl	8000770 <ClearTextBuf>
  while(*txt)
 8000c20:	e00a      	b.n	8000c38 <Lcd_Print+0x28>
    {
      Lcd_Chr(*txt++);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe0b 	bl	8000848 <Lcd_Chr>
      i++;  
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	3301      	adds	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
  while(*txt)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f0      	bne.n	8000c22 <Lcd_Print+0x12>
    } 
  return i;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <Lcd_BinToDec>:
	  lcdVideoBuffer[i] = imageData[1023 - i];	//грузим данные
	  //lcdVideoBuffer[i] = imageData[i];	//грузим данные
    }
}
//*****************************************************************************
uint8_t Lcd_BinToDec(uint16_t var, uint8_t num, uint8_t charSize){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
 8000c56:	460b      	mov	r3, r1
 8000c58:	717b      	strb	r3, [r7, #5]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	713b      	strb	r3, [r7, #4]

	uint8_t DecArray[5];
	uint8_t	temp;
	//--------------------
	if((var <= 0xFFFF) && (num <= 5))
 8000c5e:	797b      	ldrb	r3, [r7, #5]
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	d876      	bhi.n	8000d52 <Lcd_BinToDec+0x106>
		{
		  DecArray[4] = (uint8_t)(var / 10000);
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	4a3e      	ldr	r2, [pc, #248]	; (8000d60 <Lcd_BinToDec+0x114>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	0b5b      	lsrs	r3, r3, #13
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	733b      	strb	r3, [r7, #12]
		  var %= 10000;
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <Lcd_BinToDec+0x114>)
 8000c78:	fba2 1203 	umull	r1, r2, r2, r3
 8000c7c:	0b52      	lsrs	r2, r2, #13
 8000c7e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c82:	fb01 f202 	mul.w	r2, r1, r2
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	80fb      	strh	r3, [r7, #6]

		  DecArray[3] = (uint8_t)(var / 1000);
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	4a35      	ldr	r2, [pc, #212]	; (8000d64 <Lcd_BinToDec+0x118>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	099b      	lsrs	r3, r3, #6
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	72fb      	strb	r3, [r7, #11]
		  var %= 1000;
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	4a31      	ldr	r2, [pc, #196]	; (8000d64 <Lcd_BinToDec+0x118>)
 8000c9e:	fba2 1203 	umull	r1, r2, r2, r3
 8000ca2:	0992      	lsrs	r2, r2, #6
 8000ca4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ca8:	fb01 f202 	mul.w	r2, r1, r2
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	80fb      	strh	r3, [r7, #6]

		  DecArray[2] = (uint8_t)(var / 100);
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <Lcd_BinToDec+0x11c>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	095b      	lsrs	r3, r3, #5
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	72bb      	strb	r3, [r7, #10]
		  var %= 100;
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	4a29      	ldr	r2, [pc, #164]	; (8000d68 <Lcd_BinToDec+0x11c>)
 8000cc4:	fba2 1203 	umull	r1, r2, r2, r3
 8000cc8:	0952      	lsrs	r2, r2, #5
 8000cca:	2164      	movs	r1, #100	; 0x64
 8000ccc:	fb01 f202 	mul.w	r2, r1, r2
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	80fb      	strh	r3, [r7, #6]

		  DecArray[1] = (uint8_t)(var / 10);
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <Lcd_BinToDec+0x120>)
 8000cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	727b      	strb	r3, [r7, #9]
		  DecArray[0] = (uint8_t)(var % 10);
 8000ce4:	88fa      	ldrh	r2, [r7, #6]
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <Lcd_BinToDec+0x120>)
 8000ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8000cec:	08d9      	lsrs	r1, r3, #3
 8000cee:	460b      	mov	r3, r1
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	723b      	strb	r3, [r7, #8]
		  //--------------------
		  //Вывод на дисплей
		  for(uint8_t i=0; i < num; i++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e022      	b.n	8000d4a <Lcd_BinToDec+0xfe>
			{
			  temp = 0x30 + DecArray[(num - 1) - i];
 8000d04:	797b      	ldrb	r3, [r7, #5]
 8000d06:	1e5a      	subs	r2, r3, #1
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	f107 0210 	add.w	r2, r7, #16
 8000d10:	4413      	add	r3, r2
 8000d12:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000d16:	3330      	adds	r3, #48	; 0x30
 8000d18:	73bb      	strb	r3, [r7, #14]

				   if(charSize == LCD_CHAR_SIZE_BIG) Lcd_ChrBig(temp);
 8000d1a:	793b      	ldrb	r3, [r7, #4]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d104      	bne.n	8000d2a <Lcd_BinToDec+0xde>
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fec2 	bl	8000aac <Lcd_ChrBig>
 8000d28:	e00c      	b.n	8000d44 <Lcd_BinToDec+0xf8>
			  else if(charSize == LCD_CHAR_SIZE_BOLD)Lcd_ChrBold(temp);
 8000d2a:	793b      	ldrb	r3, [r7, #4]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d104      	bne.n	8000d3a <Lcd_BinToDec+0xee>
 8000d30:	7bbb      	ldrb	r3, [r7, #14]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fdf2 	bl	800091c <Lcd_ChrBold>
 8000d38:	e004      	b.n	8000d44 <Lcd_BinToDec+0xf8>
			  else					     			 Lcd_Chr(temp);
 8000d3a:	7bbb      	ldrb	r3, [r7, #14]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fd82 	bl	8000848 <Lcd_Chr>
		  for(uint8_t i=0; i < num; i++)
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	3301      	adds	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	797b      	ldrb	r3, [r7, #5]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3d8      	bcc.n	8000d04 <Lcd_BinToDec+0xb8>
			}
		}
	return num+1;
 8000d52:	797b      	ldrb	r3, [r7, #5]
 8000d54:	3301      	adds	r3, #1
 8000d56:	b2db      	uxtb	r3, r3
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	d1b71759 	.word	0xd1b71759
 8000d64:	10624dd3 	.word	0x10624dd3
 8000d68:	51eb851f 	.word	0x51eb851f
 8000d6c:	cccccccd 	.word	0xcccccccd

08000d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <SystemInit+0x5c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <SystemInit+0x5c>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <SystemInit+0x5c>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4911      	ldr	r1, [pc, #68]	; (8000dcc <SystemInit+0x5c>)
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <SystemInit+0x60>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <SystemInit+0x5c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <SystemInit+0x5c>)
 8000d92:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <SystemInit+0x5c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SystemInit+0x5c>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <SystemInit+0x5c>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <SystemInit+0x5c>)
 8000dae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000db2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SystemInit+0x5c>)
 8000db6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000dba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SystemInit+0x64>)
 8000dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	f8ff0000 	.word	0xf8ff0000
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Gpio_Init>:
static volatile uint16_t GpioAState = 0; //
static volatile uint16_t GpioBState = 0; //
static volatile uint16_t GpioCState = 0; //
//-----------------------------------------------------------------------------
//Инициализация переферии.
void Gpio_Init (void){
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  
  //Включаем тактирование порта A, B, C, D и модуля альтернативных функций.
  RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN |
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <Gpio_Init+0x54>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <Gpio_Init+0x54>)
 8000de2:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 8000de6:	6193      	str	r3, [r2, #24]
                   RCC_APB2ENR_IOPBEN |
                   RCC_APB2ENR_IOPCEN |
                   RCC_APB2ENR_IOPDEN |
                   RCC_APB2ENR_AFIOEN);
  //Отключение JTAG-D от порта PA15, отладка через SWD активна.
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE; 
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <Gpio_Init+0x58>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <Gpio_Init+0x58>)
 8000dee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df2:	6053      	str	r3, [r2, #4]
  //RCC->CFGR |= RCC_CFGR_MCO_HSI;   //Подключение к выводу PA8 частоту HSI.
  //RCC->CFGR |= RCC_CFGR_MCO_HSE;      //Подключение к выводу PA8 частоту HSE.
  //RCC->CFGR |= RCC_CFGR_MCO_PLL;   //Подключение к выводу PA8 частоту PLL/2. 
  //--------------------
  //PC13 - Led.
  GPIOC->CRH &= ~GPIO_CRH_CNF13;//выход, режим - push-pull.
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <Gpio_Init+0x5c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <Gpio_Init+0x5c>)
 8000dfa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000dfe:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= GPIO_CRH_MODE13;//тактирование 50МГц.
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <Gpio_Init+0x5c>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <Gpio_Init+0x5c>)
 8000e06:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000e0a:	6053      	str	r3, [r2, #4]

  //--------------------
  //PA6 - Led.
  //PA7 - Led.
  GPIOA->CRL &= ~(GPIO_CRL_CNF6  | GPIO_CRL_CNF7); //выход, режим - push-pull.
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <Gpio_Init+0x60>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <Gpio_Init+0x60>)
 8000e12:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000e16:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |=  (GPIO_CRL_MODE6 | GPIO_CRL_MODE7); //PA7(LC2_SOST_Red) - тактирование 50МГц.
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <Gpio_Init+0x60>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <Gpio_Init+0x60>)
 8000e1e:	f043 534c 	orr.w	r3, r3, #855638016	; 0x33000000
 8000e22:	6013      	str	r3, [r2, #0]
                  GPIO_CRH_MODE12 );//тактирование 50МГц.
  GPIOD->CRL |= ( GPIO_CRL_MODE2  );
	//--------------------
	 *
	 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40010800 	.word	0x40010800

08000e3c <I2C_Init>:
static uint8_t   I2C_Mode;

//static uint8_t  i2cState = I2C_STATE_IDLE;
//*******************************************************************************************
//*******************************************************************************************
void I2C_Init(I2C_TypeDef *i2c){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;//Включаем тактирование GPIOB
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <I2C_Init+0xc0>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <I2C_Init+0xc0>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6193      	str	r3, [r2, #24]
	//------------------------------
	//Тактирование I2C_1
	if(i2c == I2C1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a2b      	ldr	r2, [pc, #172]	; (8000f00 <I2C_Init+0xc4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d10b      	bne.n	8000e70 <I2C_Init+0x34>
		{
			RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <I2C_Init+0xc0>)
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	4a27      	ldr	r2, [pc, #156]	; (8000efc <I2C_Init+0xc0>)
 8000e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e62:	61d3      	str	r3, [r2, #28]
			//Инициализация портов.
			//I2C1_SCL - PB6
			//I2C1_SDA - PB7
			GPIOB->CRL |= GPIO_CRL_MODE6_1 | GPIO_CRL_MODE7_1 |
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <I2C_Init+0xc8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <I2C_Init+0xc8>)
 8000e6a:	f043 436e 	orr.w	r3, r3, #3992977408	; 0xee000000
 8000e6e:	6013      	str	r3, [r2, #0]
					      GPIO_CRL_CNF6    | GPIO_CRL_CNF7;
		}
	//------------------------------
	//Тактирование I2C_2
	if(i2c == I2C2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <I2C_Init+0xcc>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d10b      	bne.n	8000e90 <I2C_Init+0x54>
		{
			RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <I2C_Init+0xc0>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <I2C_Init+0xc0>)
 8000e7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e82:	61d3      	str	r3, [r2, #28]
			//Инициализация портов.
			//I2C2_SCL - PB10
			//I2C2_SDA - PB11
			GPIOB->CRH |= GPIO_CRH_MODE10_1 | GPIO_CRH_MODE11_1 |
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <I2C_Init+0xc8>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <I2C_Init+0xc8>)
 8000e8a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
 8000e8e:	6053      	str	r3, [r2, #4]
						  GPIO_CRH_CNF10    | GPIO_CRH_CNF11;
		}
	//------------------------------
	//Инициализация I2C.
	i2c->CR2  &= ~I2C_CR2_FREQ;   //
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	605a      	str	r2, [r3, #4]
	i2c->CR2  |=  36;//I2C_CR2_VALUE;  //APB1 = 36MHz
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	605a      	str	r2, [r3, #4]
	i2c->CCR  &= ~I2C_CCR_CCR;    //
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000eb0:	f023 030f 	bic.w	r3, r3, #15
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	61d3      	str	r3, [r2, #28]

	//i2c->CCR   =  120;//100кГц
	i2c->CCR   =  30; //400кГц  45;//I2C_CCR_VALUE;  //(36MHz/I2C_BAUD_RATE/2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	221e      	movs	r2, #30
 8000ebc:	61da      	str	r2, [r3, #28]

	i2c->CCR  |=  I2C_CCR_FS;     //1 - режим FastMode(400kHz), 0 - режим STANDART(100kHz).
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	61da      	str	r2, [r3, #28]
	i2c->TRISE =  12;//37;//I2C_TRISE_VALUE;//(1mcs/(1/36MHz)+1)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	220c      	movs	r2, #12
 8000ece:	621a      	str	r2, [r3, #32]
	i2c->CR1  |=  I2C_CR1_PE;     //Включение модуля I2C1.
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f043 0201 	orr.w	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 255; i++){__NOP();};
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e003      	b.n	8000eea <I2C_Init+0xae>
 8000ee2:	bf00      	nop
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2bff      	cmp	r3, #255	; 0xff
 8000eee:	d1f8      	bne.n	8000ee2 <I2C_Init+0xa6>
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40005400 	.word	0x40005400
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	40005800 	.word	0x40005800

08000f0c <I2C_StartAndSendDeviceAddr>:
//**********************************************************
uint8_t I2C_StartAndSendDeviceAddr(I2C_TypeDef *i2c, uint8_t deviceAddr){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]

	uint32_t wait = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
	//---------------------
	//Ждем освобождения шины. - не отлажено!!!
	while(i2c->SR2 & I2C_SR2_BUSY)
 8000f1c:	e00d      	b.n	8000f3a <I2C_StartAndSendDeviceAddr+0x2e>
		{
			if(++wait >= I2C_WAIT)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2bfe      	cmp	r3, #254	; 0xfe
 8000f28:	d907      	bls.n	8000f3a <I2C_StartAndSendDeviceAddr+0x2e>
			{
				i2c->CR1 |=	I2C_CR1_SWRST;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
				return 1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e045      	b.n	8000fc6 <I2C_StartAndSendDeviceAddr+0xba>
	while(i2c->SR2 & I2C_SR2_BUSY)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1eb      	bne.n	8000f1e <I2C_StartAndSendDeviceAddr+0x12>
			}
		}
	wait = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_SR1_SB))//Ожидание формирования Start condition.
 8000f56:	e00d      	b.n	8000f74 <I2C_StartAndSendDeviceAddr+0x68>
		{
			if(++wait >= I2C_WAIT)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2bfe      	cmp	r3, #254	; 0xfe
 8000f62:	d907      	bls.n	8000f74 <I2C_StartAndSendDeviceAddr+0x68>
				{
					i2c->CR1 |=	I2C_CR1_SWRST;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	601a      	str	r2, [r3, #0]
					return 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e028      	b.n	8000fc6 <I2C_StartAndSendDeviceAddr+0xba>
	while(!(i2c->SR1 & I2C_SR1_SB))//Ожидание формирования Start condition.
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0eb      	beq.n	8000f58 <I2C_StartAndSendDeviceAddr+0x4c>
				}
		}
	wait = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
	(void)i2c->SR1;				    //Для сброса флага SB необходимо прочитать SR1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес slave.
	i2c->DR = deviceAddr;
 8000f88:	78fa      	ldrb	r2, [r7, #3]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_ADDR))//Ожидаем окончания передачи адреса и
 8000f8e:	e00d      	b.n	8000fac <I2C_StartAndSendDeviceAddr+0xa0>
		{
			if(++wait >= I2C_WAIT)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3301      	adds	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2bfe      	cmp	r3, #254	; 0xfe
 8000f9a:	d907      	bls.n	8000fac <I2C_StartAndSendDeviceAddr+0xa0>
				{
					i2c->CR1 |=	I2C_CR1_SWRST;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	601a      	str	r2, [r3, #0]
					return 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e00c      	b.n	8000fc6 <I2C_StartAndSendDeviceAddr+0xba>
	while(!(i2c->SR1 & I2C_SR1_ADDR))//Ожидаем окончания передачи адреса и
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0eb      	beq.n	8000f90 <I2C_StartAndSendDeviceAddr+0x84>
				}
		}
	wait = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
	(void)i2c->SR1;				      //сбрасываем бит ADDR (чтением SR1 и SR2):
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;				      //
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]

	return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <I2C_SendData>:
//**********************************************************
void I2C_SendData(I2C_TypeDef *i2c, uint8_t *pBuf, uint16_t len){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	80fb      	strh	r3, [r7, #6]

	for(uint16_t i = 0; i < len; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	82fb      	strh	r3, [r7, #22]
 8000fe2:	e010      	b.n	8001006 <I2C_SendData+0x36>
		{
			i2c->DR = *(pBuf + i);
 8000fe4:	8afb      	ldrh	r3, [r7, #22]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
			while(!(i2c->SR1 & I2C_SR1_TXE));//Ждем освобождения буфера
 8000ff2:	bf00      	nop
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f9      	beq.n	8000ff4 <I2C_SendData+0x24>
	for(uint16_t i = 0; i < len; i++)
 8001000:	8afb      	ldrh	r3, [r7, #22]
 8001002:	3301      	adds	r3, #1
 8001004:	82fb      	strh	r3, [r7, #22]
 8001006:	8afa      	ldrh	r2, [r7, #22]
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	429a      	cmp	r2, r3
 800100c:	d3ea      	bcc.n	8000fe4 <I2C_SendData+0x14>
		}
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <I2C_ReadData>:
//**********************************************************
void I2C_ReadData(I2C_TypeDef *i2c, uint8_t *pBuf, uint16_t len){
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	4613      	mov	r3, r2
 8001024:	80fb      	strh	r3, [r7, #6]

	if(len == 1)
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d118      	bne.n	800105e <I2C_ReadData+0x46>
		{
			i2c->CR1 &= ~I2C_CR1_ACK;           //Фомирование NACK после приема последнего байта.
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	601a      	str	r2, [r3, #0]
			while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
 8001038:	bf00      	nop
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f9      	beq.n	800103a <I2C_ReadData+0x22>
			*(pBuf + 0) = i2c->DR;				//считали принятый байт.
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	701a      	strb	r2, [r3, #0]
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	601a      	str	r2, [r3, #0]
			i2c->CR1 &= ~I2C_CR1_ACK;           //Фомирование NACK после приема последнего байта.
			while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
			*(pBuf + len - 1) = i2c->DR;		//считали принятый байт.
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
		}
}
 800105c:	e039      	b.n	80010d2 <I2C_ReadData+0xba>
			for(uint16_t i = 0; i < (len-1); i++)
 800105e:	2300      	movs	r3, #0
 8001060:	82fb      	strh	r3, [r7, #22]
 8001062:	e016      	b.n	8001092 <I2C_ReadData+0x7a>
					i2c->CR1 |= I2C_CR1_ACK; 			//Фомирование ACK после приема байта
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	601a      	str	r2, [r3, #0]
					while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
 8001070:	bf00      	nop
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f9      	beq.n	8001072 <I2C_ReadData+0x5a>
					*(pBuf + i) = i2c->DR;			    //считали принятый
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6919      	ldr	r1, [r3, #16]
 8001082:	8afb      	ldrh	r3, [r7, #22]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	4413      	add	r3, r2
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
			for(uint16_t i = 0; i < (len-1); i++)
 800108c:	8afb      	ldrh	r3, [r7, #22]
 800108e:	3301      	adds	r3, #1
 8001090:	82fb      	strh	r3, [r7, #22]
 8001092:	8afa      	ldrh	r2, [r7, #22]
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	3b01      	subs	r3, #1
 8001098:	429a      	cmp	r2, r3
 800109a:	dbe3      	blt.n	8001064 <I2C_ReadData+0x4c>
			i2c->CR1 &= ~I2C_CR1_ACK;           //Фомирование NACK после приема последнего байта.
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	601a      	str	r2, [r3, #0]
			while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
 80010a8:	bf00      	nop
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f9      	beq.n	80010aa <I2C_ReadData+0x92>
			*(pBuf + len - 1) = i2c->DR;		//считали принятый байт.
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6919      	ldr	r1, [r3, #16]
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	3b01      	subs	r3, #1
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	4413      	add	r3, r2
 80010c2:	b2ca      	uxtb	r2, r1
 80010c4:	701a      	strb	r2, [r3, #0]
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	601a      	str	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <I2C_Stop>:
//**********************************************************
void I2C_Stop(I2C_TypeDef *i2c){
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	while(!(i2c->SR1 & I2C_SR1_BTF));//Ждем окончания передачи
 80010e4:	bf00      	nop
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f9      	beq.n	80010e6 <I2C_Stop+0xa>
	i2c->CR1 |= I2C_CR1_STOP;		 //Формируем Stop
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	601a      	str	r2, [r3, #0]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <I2C_Write>:
//*******************************************************************************************
//*******************************************************************************************
void I2C_Write(I2C_TypeDef *i2c, uint8_t deviceAddr, uint8_t regAddr, uint8_t *pBuf, uint16_t len){
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	72fb      	strb	r3, [r7, #11]
 8001116:	4613      	mov	r3, r2
 8001118:	72bb      	strb	r3, [r7, #10]

	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_SR1_SB)){};//Ожидание формирования Start condition.
 8001126:	bf00      	nop
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f9      	beq.n	8001128 <I2C_Write+0x20>
	(void)i2c->SR1;				      //Для сброса флага SB необходимо прочитать SR1
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес slave + Запись.
	i2c->DR = deviceAddr | I2C_MODE_WRITE;
 8001138:	7afa      	ldrb	r2, [r7, #11]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_ADDR)){};//Ожидаем окончания передачи адреса и
 800113e:	bf00      	nop
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f9      	beq.n	8001140 <I2C_Write+0x38>
	(void)i2c->SR1;				        //сбрасываем бит ADDR (чтением SR1 и SR2):
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;				        //
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	699b      	ldr	r3, [r3, #24]
	//Передача адреса в который хотим записать.
	i2c->DR = regAddr;
 8001154:	7aba      	ldrb	r2, [r7, #10]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_TXE)){};
 800115a:	bf00      	nop
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f9      	beq.n	800115c <I2C_Write+0x54>
	//передача данных на запись.
	for(uint16_t i = 0; i < len; i++)
 8001168:	2300      	movs	r3, #0
 800116a:	82fb      	strh	r3, [r7, #22]
 800116c:	e010      	b.n	8001190 <I2C_Write+0x88>
		{
			i2c->DR = *(pBuf + i);
 800116e:	8afb      	ldrh	r3, [r7, #22]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	611a      	str	r2, [r3, #16]
			while(!(i2c->SR1 & I2C_SR1_TXE));//Ждем освобождения буфера
 800117c:	bf00      	nop
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f9      	beq.n	800117e <I2C_Write+0x76>
	for(uint16_t i = 0; i < len; i++)
 800118a:	8afb      	ldrh	r3, [r7, #22]
 800118c:	3301      	adds	r3, #1
 800118e:	82fb      	strh	r3, [r7, #22]
 8001190:	8afa      	ldrh	r2, [r7, #22]
 8001192:	8c3b      	ldrh	r3, [r7, #32]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3ea      	bcc.n	800116e <I2C_Write+0x66>
		}

//	while(!(i2c->SR1 & I2C_SR1_BTF));//Ждем окончания передачи
	i2c->CR1 |= I2C_CR1_STOP;		 //Формируем Stop
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	601a      	str	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <I2C_Read>:
//**********************************************************
void I2C_Read(I2C_TypeDef *i2c, uint8_t deviceAddr, uint8_t regAddr, uint8_t *pBuf, uint16_t len){
 80011ae:	b480      	push	{r7}
 80011b0:	b087      	sub	sp, #28
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	72fb      	strb	r3, [r7, #11]
 80011bc:	4613      	mov	r3, r2
 80011be:	72bb      	strb	r3, [r7, #10]

	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_SR1_SB)){};//Ожидание формирования Start condition.
 80011cc:	bf00      	nop
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f9      	beq.n	80011ce <I2C_Read+0x20>
	(void)i2c->SR1;				      //Для сброса флага SB необходимо прочитать SR1
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес slave + Запись.
	i2c->DR = deviceAddr | I2C_MODE_WRITE;
 80011de:	7afa      	ldrb	r2, [r7, #11]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_ADDR)){};//Ожидаем окончания передачи адреса и
 80011e4:	bf00      	nop
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f9      	beq.n	80011e6 <I2C_Read+0x38>
	(void)i2c->SR1;				        //сбрасываем бит ADDR (чтением SR1 и SR2):
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;				        //
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	699b      	ldr	r3, [r3, #24]
	//Передача адреса с которого начинаем чтение.
	i2c->DR = regAddr;
 80011fa:	7aba      	ldrb	r2, [r7, #10]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8001200:	bf00      	nop
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <I2C_Read+0x54>
//	i2c->CR1 |= I2C_CR1_STOP;	//??????

	//Формирование reStart condition.
	i2c->CR1 |= I2C_CR1_START;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_SR1_SB)){};//Ожидание формирования Start condition.
 800121a:	bf00      	nop
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f9      	beq.n	800121c <I2C_Read+0x6e>
	(void)i2c->SR1;				      //Для сброса флага SB необходимо прочитать SR1
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес slave + Чтение.
	i2c->DR = deviceAddr | I2C_MODE_READ;
 800122c:	7afb      	ldrb	r3, [r7, #11]
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_ADDR)){};//Ожидаем окончания передачи адреса и
 800123a:	bf00      	nop
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f9      	beq.n	800123c <I2C_Read+0x8e>
	(void)i2c->SR1;				        //сбрасываем бит ADDR (чтением SR1 и SR2):
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;				        //
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	699b      	ldr	r3, [r3, #24]
	//прием даннных
	if(len == 1)
 8001250:	8c3b      	ldrh	r3, [r7, #32]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d118      	bne.n	8001288 <I2C_Read+0xda>
		{
			i2c->CR1 &= ~I2C_CR1_ACK;           //Фомирование NACK после приема последнего байта.
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	601a      	str	r2, [r3, #0]
			while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
 8001262:	bf00      	nop
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f9      	beq.n	8001264 <I2C_Read+0xb6>
			*(pBuf + 0) = i2c->DR;				//считали принятый байт.
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	701a      	strb	r2, [r3, #0]
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	601a      	str	r2, [r3, #0]
			i2c->CR1 &= ~I2C_CR1_ACK;           //Фомирование NACK после приема последнего байта.
			while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
			*(pBuf + len - 1) = i2c->DR;		//считали принятый байт.
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
		}
}
 8001286:	e039      	b.n	80012fc <I2C_Read+0x14e>
			for(uint16_t i = 0; i < (len-1); i++)
 8001288:	2300      	movs	r3, #0
 800128a:	82fb      	strh	r3, [r7, #22]
 800128c:	e016      	b.n	80012bc <I2C_Read+0x10e>
					i2c->CR1 |= I2C_CR1_ACK; 			//Фомирование ACK после приема байта
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	601a      	str	r2, [r3, #0]
					while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
 800129a:	bf00      	nop
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f9      	beq.n	800129c <I2C_Read+0xee>
					*(pBuf + i) = i2c->DR;			    //считали принятый
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6919      	ldr	r1, [r3, #16]
 80012ac:	8afb      	ldrh	r3, [r7, #22]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	b2ca      	uxtb	r2, r1
 80012b4:	701a      	strb	r2, [r3, #0]
			for(uint16_t i = 0; i < (len-1); i++)
 80012b6:	8afb      	ldrh	r3, [r7, #22]
 80012b8:	3301      	adds	r3, #1
 80012ba:	82fb      	strh	r3, [r7, #22]
 80012bc:	8afa      	ldrh	r2, [r7, #22]
 80012be:	8c3b      	ldrh	r3, [r7, #32]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dbe3      	blt.n	800128e <I2C_Read+0xe0>
			i2c->CR1 &= ~I2C_CR1_ACK;           //Фомирование NACK после приема последнего байта.
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	601a      	str	r2, [r3, #0]
			while(!(i2c->SR1 & I2C_SR1_RXNE)){};//ожидаем окончания приема байта
 80012d2:	bf00      	nop
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f9      	beq.n	80012d4 <I2C_Read+0x126>
			*(pBuf + len - 1) = i2c->DR;		//считали принятый байт.
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6919      	ldr	r1, [r3, #16]
 80012e4:	8c3b      	ldrh	r3, [r7, #32]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	b2ca      	uxtb	r2, r1
 80012ee:	701a      	strb	r2, [r3, #0]
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	601a      	str	r2, [r3, #0]
}
 80012fc:	bf00      	nop
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <I2C_Int_Handler>:
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
}
//*******************************************************************************************
//*******************************************************************************************
static void I2C_Int_Handler(I2C_TypeDef *i2c, uint8_t slaveAddr){
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t sr1 = i2c->SR1;//Чтениех этих регистров сбрасывает флаги событий I2C.
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	60fb      	str	r3, [r7, #12]
	//volatile uint32_t sr2 = i2c->SR2;
	//---------------------
	//Start condition generated. Clear: read SR1, write to DR
	if(sr1 & I2C_SR1_SB)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <I2C_Int_Handler+0x2e>
		{
		  i2c->DR = I2C_ADDRESS(slaveAddr, I2C_Mode);
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <I2C_Int_Handler+0xbc>)
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	4313      	orrs	r3, r2
 800132e:	461a      	mov	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	611a      	str	r2, [r3, #16]
		  return;
 8001334:	e042      	b.n	80013bc <I2C_Int_Handler+0xb4>
		}
	//Address sent. Clear: read SR1, read SR2
	else if(sr1 & I2C_SR1_ADDR)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d010      	beq.n	8001362 <I2C_Int_Handler+0x5a>
	   {
	      if(I2C_Mode == I2C_MODE_WRITE)
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <I2C_Int_Handler+0xbc>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d136      	bne.n	80013b6 <I2C_Int_Handler+0xae>
			  {
	    	  	  i2c->DR = I2C_pBuf[0];
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <I2C_Int_Handler+0xc0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	611a      	str	r2, [r3, #16]
	    	  	  I2C_TxCnt++;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <I2C_Int_Handler+0xc4>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	b29a      	uxth	r2, r3
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <I2C_Int_Handler+0xc4>)
 800135e:	801a      	strh	r2, [r3, #0]
//						// не дописано! не использовать
//						I2C_NUMB->DR = (uint8_t)AddrReg;            // First byte
//						AddrReg>>=8;
//					 }
//			  }
	      return;
 8001360:	e029      	b.n	80013b6 <I2C_Int_Handler+0xae>
//	else if(sr1 & I2C_SR1_AF)
//		{
//			I2C_TxCnt++;
//		}
	//Data Register Empty (transmitters).
	else if(sr1 & I2C_SR1_TXE)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001368:	2b00      	cmp	r3, #0
 800136a:	d01f      	beq.n	80013ac <I2C_Int_Handler+0xa4>
		{
			i2c->DR = I2C_pBuf[I2C_TxCnt];
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <I2C_Int_Handler+0xc0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a16      	ldr	r2, [pc, #88]	; (80013cc <I2C_Int_Handler+0xc4>)
 8001372:	8812      	ldrh	r2, [r2, #0]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]
			I2C_TxCnt++;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <I2C_Int_Handler+0xc4>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <I2C_Int_Handler+0xc4>)
 8001388:	801a      	strh	r2, [r3, #0]
			if(I2C_TxCnt >= I2C_TxSize)
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <I2C_Int_Handler+0xc8>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <I2C_Int_Handler+0xc4>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d810      	bhi.n	80013ba <I2C_Int_Handler+0xb2>
				{
					I2C_TxCnt = 0;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <I2C_Int_Handler+0xc4>)
 800139a:	2200      	movs	r2, #0
 800139c:	801a      	strh	r2, [r3, #0]
					i2c->CR1 |= I2C_CR1_STOP;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
				}
			return;
 80013aa:	e006      	b.n	80013ba <I2C_Int_Handler+0xb2>
		}
	//Byte Transfer Finished.
	else if(sr1 & I2C_SR1_BTF)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	e002      	b.n	80013bc <I2C_Int_Handler+0xb4>
	      return;
 80013b6:	bf00      	nop
 80013b8:	e000      	b.n	80013bc <I2C_Int_Handler+0xb4>
			return;
 80013ba:	bf00      	nop
//	if(sr1 & I2C_SR1_TXE)
//		{
//			if(TxCounter < I2C_TxSize) i2c->DR   = I2C_pBuf[TxCounter++];
//			else		               i2c->CR1 |= I2C_CR1_STOP;
//		}
}
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20000465 	.word	0x20000465
 80013c8:	20000460 	.word	0x20000460
 80013cc:	2000045a 	.word	0x2000045a
 80013d0:	20000464 	.word	0x20000464

080013d4 <I2C1_EV_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание I2C1.
void I2C1_EV_IRQHandler(void){
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

//	I2C_handler(I2C1, addr);
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <I2C2_EV_IRQHandler>:
//**********************************************************
//Прерывание I2C2.
void I2C2_EV_IRQHandler(void){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

	I2C_Int_Handler(I2C2, I2C_SlaveAddr);
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <I2C2_EV_IRQHandler+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <I2C2_EV_IRQHandler+0x24>)
 80013ec:	f7ff ff8c 	bl	8001308 <I2C_Int_Handler>
	LedPA7_Toggel();
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <I2C2_EV_IRQHandler+0x28>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <I2C2_EV_IRQHandler+0x28>)
 80013f6:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000045c 	.word	0x2000045c
 8001404:	40005800 	.word	0x40005800
 8001408:	40010800 	.word	0x40010800

0800140c <SPI2_IRQHandler>:
	//--------------------
	return (uint8_t)SPI2->DR;
} 
//-----------------------------------------------------------------------------
//Прерываени от SPI2.
void SPI2_IRQHandler(void){
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  
  //uint16_t tmp;
  //--------------------
  //причина прерывания - окончание передачи байта
  if(SPI2->SR & SPI_SR_TXE)
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <SPI2_IRQHandler+0x34>)
 8001412:	689b      	ldr	r3, [r3, #8]

      //LC2SostGreenLedToggel;//Мигаем для отладки          
    }
  //--------------------
  //причина прерывания - принят байт данных
  if(SPI2->SR &= SPI_SR_RXNE)
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <SPI2_IRQHandler+0x34>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a09      	ldr	r2, [pc, #36]	; (8001440 <SPI2_IRQHandler+0x34>)
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	6093      	str	r3, [r2, #8]
      //tmp = SPI1->DR;                //прочитать принятые данные
      //выполняем какие-то действия      
    }
  //--------------------
  //причина прерывания - ошибка режима ведущего
  if(SPI2->SR &= SPI_SR_MODF)
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <SPI2_IRQHandler+0x34>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <SPI2_IRQHandler+0x34>)
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	6093      	str	r3, [r2, #8]
    {
      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
    }
  //--------------------
  //причина прерывания - переполнение приемника данных
  if(SPI2->SR &= SPI_SR_OVR)
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SPI2_IRQHandler+0x34>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <SPI2_IRQHandler+0x34>)
 8001432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001436:	6093      	str	r3, [r2, #8]
//  if(SPI2->SR &= SSPI_SR_CRCERR)
//    {
//      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
//    }
  //--------------------
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40003800 	.word	0x40003800

08001444 <Init_RCC>:
#include "sys_ST.h"

//**********************************************************************************************
//**********************************************************************************************
//Настройка тактирования 72МГц. Внешний кварц 8 МГц.
static uint32_t Init_RCC(void){
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
	
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
	//--------------------
	//SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/        
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);//Enable HSE.
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <Init_RCC+0xf8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a39      	ldr	r2, [pc, #228]	; (800153c <Init_RCC+0xf8>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready and if Time out is reached exit */
	do{
			HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <Init_RCC+0xf8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	603b      	str	r3, [r7, #0]
			StartUpCounter++;  
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	607b      	str	r3, [r7, #4]
	  }
	while((HSEStatus == 0) && (StartUpCounter != 0xFFFF));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d104      	bne.n	800147e <Init_RCC+0x3a>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147a:	4293      	cmp	r3, r2
 800147c:	d1ef      	bne.n	800145e <Init_RCC+0x1a>
	//--------------------
	if ((RCC->CR & RCC_CR_HSERDY) != 0) HSEStatus = (uint32_t)0x01;
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <Init_RCC+0xf8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <Init_RCC+0x4c>
 800148a:	2301      	movs	r3, #1
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	e001      	b.n	8001494 <Init_RCC+0x50>
	else                                HSEStatus = (uint32_t)0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	603b      	str	r3, [r7, #0]
	//--------------------
	if(HSEStatus == (uint32_t)0x01)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d149      	bne.n	800152e <Init_RCC+0xea>
		{
			/* Enable Prefetch Buffer */
			FLASH->ACR |= FLASH_ACR_PRFTBE;
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <Init_RCC+0xfc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a28      	ldr	r2, [pc, #160]	; (8001540 <Init_RCC+0xfc>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6013      	str	r3, [r2, #0]
			/* Flash 2 wait state */
			FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <Init_RCC+0xfc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a25      	ldr	r2, [pc, #148]	; (8001540 <Init_RCC+0xfc>)
 80014ac:	f023 0307 	bic.w	r3, r3, #7
 80014b0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;  
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <Init_RCC+0xfc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a22      	ldr	r2, [pc, #136]	; (8001540 <Init_RCC+0xfc>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6013      	str	r3, [r2, #0]
			//--------------------
			//Настройка тактирования шин AHB, APB1 и APB2.
			RCC->CFGR |= (uint32_t)(RCC_CFGR_HPRE_DIV1  | // AHB prescaler. SYSCLK not divided
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <Init_RCC+0xf8>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a1e      	ldr	r2, [pc, #120]	; (800153c <Init_RCC+0xf8>)
 80014c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c8:	6053      	str	r3, [r2, #4]
									RCC_CFGR_PPRE2_DIV1 | // APB2 = AHB. APB2 Fmax = 72MHz.
									RCC_CFGR_PPRE1_DIV2); // APB1 = (AHB / 2). APB1 Fmax = 36MHz.

			//--------------------
			//PLL configuration: = HSE * 9 = 72 MHz */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80014ca:	4b1c      	ldr	r3, [pc, #112]	; (800153c <Init_RCC+0xf8>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a1b      	ldr	r2, [pc, #108]	; (800153c <Init_RCC+0xf8>)
 80014d0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80014d4:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_Msk        |  // HSE oscillator clock selected as PLL input clock
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <Init_RCC+0xf8>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <Init_RCC+0xf8>)
 80014dc:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80014e0:	6053      	str	r3, [r2, #4]
															//RCC_CFGR_PLLXTPRE_HSE_Div2 |  // HSE clock divided by 2                                
															RCC_CFGR_PLLMULL9);
			/* Enable PLL */
			RCC->CR |= RCC_CR_PLLON;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <Init_RCC+0xf8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a15      	ldr	r2, [pc, #84]	; (800153c <Init_RCC+0xf8>)
 80014e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ec:	6013      	str	r3, [r2, #0]
			/* Wait till PLL is ready */
			while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 80014ee:	bf00      	nop
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <Init_RCC+0xf8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f9      	beq.n	80014f0 <Init_RCC+0xac>
			/* Select PLL as system clock source */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <Init_RCC+0xf8>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <Init_RCC+0xf8>)
 8001502:	f023 0303 	bic.w	r3, r3, #3
 8001506:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <Init_RCC+0xf8>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <Init_RCC+0xf8>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	6053      	str	r3, [r2, #4]
			/* Wait till PLL is used as system clock source */
			while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)  {}        
 8001514:	bf00      	nop
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <Init_RCC+0xf8>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b08      	cmp	r3, #8
 8001520:	d1f9      	bne.n	8001516 <Init_RCC+0xd2>
			RCC->CR |= RCC_CR_CSSON; //Включаем защиту HSE от сбоев - CSS.
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <Init_RCC+0xf8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <Init_RCC+0xf8>)
 8001528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800152c:	6013      	str	r3, [r2, #0]
	else
		{
				/* If HSE fails to start-up, the application will have wrong clock 
				 configuration. User can add here some code to deal with this error */
		} 
	return HSEStatus;
 800152e:	683b      	ldr	r3, [r7, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	40022000 	.word	0x40022000

08001544 <Sys_Init>:
//*****************************************************************************
void Sys_Init(void){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	
  //Reset the RCC clock configuration to the default reset state(for debug purpose).
  RCC->CR 	|= (uint32_t)0x00000001;	/* Set HSION bit */
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <Sys_Init+0x54>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <Sys_Init+0x54>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF0FF0000;	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <Sys_Init+0x54>)
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	490f      	ldr	r1, [pc, #60]	; (8001598 <Sys_Init+0x54>)
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <Sys_Init+0x58>)
 800155c:	4013      	ands	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
  RCC->CR 	&= (uint32_t)0xFEF6FFFF;  /* Reset HSEON, CSSON and PLLON bits */
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <Sys_Init+0x54>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <Sys_Init+0x54>)
 8001566:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
  RCC->CR 	&= (uint32_t)0xFFFBFFFF;  /* Reset HSEBYP bit */
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <Sys_Init+0x54>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a08      	ldr	r2, [pc, #32]	; (8001598 <Sys_Init+0x54>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <Sys_Init+0x54>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a05      	ldr	r2, [pc, #20]	; (8001598 <Sys_Init+0x54>)
 8001582:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001586:	6053      	str	r3, [r2, #4]
  RCC->CIR 	 = 0x009F0000;  				  /* Disable all interrupts and clear pending bits  */
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <Sys_Init+0x54>)
 800158a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800158e:	609a      	str	r2, [r3, #8]
  //RCC->CFGR2 = 0x00000000;      			/* Reset CFGR2 register */  
	
  Init_RCC();//Настройка тактирования микроконтроллера. Внешний кварц 8 МГц.
 8001590:	f7ff ff58 	bl	8001444 <Init_RCC>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	f0ff0000 	.word	0xf0ff0000

080015a0 <NMI_Handler>:
	return (*(__IO uint32_t*)address);
}
//**********************************************************************************************
//**********************************************************************************************
//Прерываени блока CSS. Возникает при сбое тактирования HSE.
void NMI_Handler( void){
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  //RCC->CIR |= RCC_CIR_CSSC;//Очищаем флаг прерывания CSS иначе прерывание будет генерироваться бесконечно.
	//NVIC_SystemReset();
  //LC1SostRedLedOn;
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <HardFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void HardFault_Handler( void){
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
//  if(SCB->HFSR & SCB_HFSR_FORCED)   LC1SostRedLedOn();
//  if(SCB->HFSR & SCB_HFSR_DEBUGEVT) LC2SostRedLedOn();
	
//	LC1SostRedLedOn();
//	LC2SostRedLedOn();
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <MemManage_Handler>:
//*****************************************************************************
//*****************************************************************************
void MemManage_Handler( void){
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

//  LC2SostRedLedOn();
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <BusFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void BusFault_Handler( void){
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

//  LC2SostGreenLedOn();
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <UsageFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void UsageFault_Handler( void){
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <SVC_Handler>:
//*****************************************************************************
//*****************************************************************************
void SVC_Handler( void){
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <SysTick_Init>:

#include "sys_tick_ST.h"

//-----------------------------------------------------------------------------
//Инициализация системного таймера SysTick.
void SysTick_Init(void){
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

	SysTick->LOAD = TimerTick;	//Загрузка значения.
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <SysTick_Init+0x20>)
 80015ee:	4a07      	ldr	r2, [pc, #28]	; (800160c <SysTick_Init+0x24>)
 80015f0:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = TimerTick;	//Обнуление таймера. 
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SysTick_Init+0x20>)
 80015f4:	4a05      	ldr	r2, [pc, #20]	; (800160c <SysTick_Init+0x24>)
 80015f6:	609a      	str	r2, [r3, #8]
                              //При записи любого значения этот регист обнуляется, с обнулением флага COUNTFLAG. 
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | //Тактирование частотой процессора (24МГц).
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <SysTick_Init+0x20>)
 80015fa:	2207      	movs	r2, #7
 80015fc:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk   | //Рразрешение прерывания.
					SysTick_CTRL_ENABLE_Msk;     //Резрешение таймеру считать.
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010
 800160c:	0001193f 	.word	0x0001193f

08001610 <IncrementOnEachPass>:
//---------------------------
static uint32_t secCounter  = 0;
//static uint16_t Temperature = 0;
//*******************************************************************************************
//*******************************************************************************************
void IncrementOnEachPass(uint32_t *var, uint16_t event){
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]

		   uint16_t riseReg  = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	81fb      	strh	r3, [r7, #14]
	static uint16_t oldState = 0;
	//-------------------
	riseReg  = (oldState ^ event) & event;
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <IncrementOnEachPass+0x40>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	43db      	mvns	r3, r3
 8001626:	b29a      	uxth	r2, r3
 8001628:	887b      	ldrh	r3, [r7, #2]
 800162a:	4013      	ands	r3, r2
 800162c:	81fb      	strh	r3, [r7, #14]
	oldState = event;
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <IncrementOnEachPass+0x40>)
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	8013      	strh	r3, [r2, #0]
	if(riseReg) (*var)++;
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <IncrementOnEachPass+0x34>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	601a      	str	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	200004b0 	.word	0x200004b0

08001654 <Time_Calculation>:
//************************************************************
void Time_Calculation(uint32_t count){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

	Time.hour =  count / 3600;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <Time_Calculation+0x60>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	0adb      	lsrs	r3, r3, #11
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <Time_Calculation+0x64>)
 800166a:	701a      	strb	r2, [r3, #0]
	Time.min  = (count % 3600) / 60;
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <Time_Calculation+0x60>)
 8001670:	fba3 1302 	umull	r1, r3, r3, r2
 8001674:	0adb      	lsrs	r3, r3, #11
 8001676:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <Time_Calculation+0x68>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <Time_Calculation+0x64>)
 800168c:	705a      	strb	r2, [r3, #1]
	Time.sec  =  count % 60;
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <Time_Calculation+0x68>)
 8001692:	fba3 2301 	umull	r2, r3, r3, r1
 8001696:	095a      	lsrs	r2, r3, #5
 8001698:	4613      	mov	r3, r2
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	1aca      	subs	r2, r1, r3
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <Time_Calculation+0x64>)
 80016a6:	709a      	strb	r2, [r3, #2]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	91a2b3c5 	.word	0x91a2b3c5
 80016b8:	20000468 	.word	0x20000468
 80016bc:	88888889 	.word	0x88888889

080016c0 <Led_Blink>:
//************************************************************
void Led_Blink(void){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

	if(Blink(INTERVAL_100_mS)) LedPC13On();
 80016c4:	2001      	movs	r0, #1
 80016c6:	f7fe fe65 	bl	8000394 <Blink>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <Led_Blink+0x1a>
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <Led_Blink+0x28>)
 80016d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d6:	611a      	str	r2, [r3, #16]
//	if(Blink(INTERVAL_250_mS)) LedPA6_On();
//	else					   LedPA6_Off();

//	if(Blink(INTERVAL_500_mS)) LedPA7_On();
//	else					   LedPA7_Off();
}
 80016d8:	e003      	b.n	80016e2 <Led_Blink+0x22>
	else					   LedPC13Off();
 80016da:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <Led_Blink+0x28>)
 80016dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016e0:	611a      	str	r2, [r3, #16]
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40011000 	.word	0x40011000

080016ec <Temperature_Get>:
//************************************************************
void Temperature_Get(uint16_t *pData){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

	if(FlagsStr.DS18B20 == 1)
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <Temperature_Get+0x38>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00c      	beq.n	800171c <Temperature_Get+0x30>
		{
			FlagsStr.DS18B20 = 0;
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <Temperature_Get+0x38>)
 8001704:	7813      	ldrb	r3, [r2, #0]
 8001706:	f36f 0300 	bfc	r3, #0, #1
 800170a:	7013      	strb	r3, [r2, #0]
			*pData = DS18B20_ReadTemperature();
 800170c:	f7fe ffd4 	bl	80006b8 <DS18B20_ReadTemperature>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	801a      	strh	r2, [r3, #0]
			DS18B20_StartConvertTemperature();
 8001718:	f7fe ffbe 	bl	8000698 <DS18B20_StartConvertTemperature>
		}
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200004c8 	.word	0x200004c8

08001728 <tic>:
//************************************************************
uint8_t tic(uint16_t event){
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]

	  	   uint16_t riseReg  = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	81fb      	strh	r3, [r7, #14]
	static uint16_t oldState = 0;
	//-------------------
	riseReg  = (oldState ^ event) & event;
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <tic+0x38>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	43db      	mvns	r3, r3
 800173c:	b29a      	uxth	r2, r3
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4013      	ands	r3, r2
 8001742:	81fb      	strh	r3, [r7, #14]
	oldState = event;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <tic+0x38>)
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	8013      	strh	r3, [r2, #0]
	if(riseReg) return 1;
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <tic+0x2c>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <tic+0x2e>
	else 		return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	200004b2 	.word	0x200004b2

08001764 <main>:

	pwm_values[sizeof(pwm_values)/sizeof(pwm_values[0]) - 1] = 0;
}
//*******************************************************************************************
//*******************************************************************************************
int main(void){
 8001764:	b5b0      	push	{r4, r5, r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af02      	add	r7, sp, #8

	uint16_t dsRes = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	80bb      	strh	r3, [r7, #4]
//	uint16_t BmiT  = 0;
	//-----------------------------
	//Drivers.
	Sys_Init();
 800176e:	f7ff fee9 	bl	8001544 <Sys_Init>
	Gpio_Init();
 8001772:	f7ff fb31 	bl	8000dd8 <Gpio_Init>
//	Scheduler_SetTask(Task_LedsBlink);
//	Scheduler_SetTask(Task_GetTemperature);
//	Scheduler_SetTask(Task_Display);
//	Scheduler_SetTask(Task_LcdUpdate);

	SysTick_Init();
 8001776:	f7ff ff37 	bl	80015e8 <SysTick_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800177a:	b662      	cpsie	i
	__enable_irq();


	I2C_Init(SSD1306_I2C);//I2C_Int_Init(SSD1306_I2C);
 800177c:	48a0      	ldr	r0, [pc, #640]	; (8001a00 <main+0x29c>)
 800177e:	f7ff fb5d 	bl	8000e3c <I2C_Init>
	//***********************************************

//	__disable_irq();
	msDelay(1000);
 8001782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001786:	f7fe ffc3 	bl	8000710 <msDelay>
	//LCD 128x32 TIC32 - Работает.
//	Lcd_TIC32_Init();    //
//	Lcd_TIC32_ClearRAM();//Очистка ОЗУ драйвера
	//***********************************************
	//OLED SSD1306
	SSD1306_Init(SSD1306_I2C);
 800178a:	489d      	ldr	r0, [pc, #628]	; (8001a00 <main+0x29c>)
 800178c:	f000 fa76 	bl	8001c7c <SSD1306_Init>
	//***********************************************
	//DS18B20
	DS18B20_Init(DS18B20_Resolution_12_bit);
 8001790:	207f      	movs	r0, #127	; 0x7f
 8001792:	f7fe ff2b 	bl	80005ec <DS18B20_Init>
	DS18B20_StartConvertTemperature();
 8001796:	f7fe ff7f 	bl	8000698 <DS18B20_StartConvertTemperature>
	//BMI160_Init();
	//Акселерометр MPU6050.
	//MPU6050_Init();
	//***********************************************
	//датчик температуры и влажности AHT10.
	AHT10_SoftReset();
 800179a:	f7fe fce9 	bl	8000170 <AHT10_SoftReset>
	//***********************************************
	//Работа с платой RTC.
	//Запуск часов.
	uint8_t DS1307_Cmd = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	70fb      	strb	r3, [r7, #3]
	I2C_Write(I2C2, DS1307_ADDR, 0x00, &DS1307_Cmd, 1);
 80017a2:	1cfa      	adds	r2, r7, #3
 80017a4:	2301      	movs	r3, #1
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	4613      	mov	r3, r2
 80017aa:	2200      	movs	r2, #0
 80017ac:	21d0      	movs	r1, #208	; 0xd0
 80017ae:	4894      	ldr	r0, [pc, #592]	; (8001a00 <main+0x29c>)
 80017b0:	f7ff fcaa 	bl	8001108 <I2C_Write>


			//***********************************************
			//Работа с платой RTC (микросхема DS1307).
			//Чтение регистров времени
			I2C_Read(I2C2, DS1307_ADDR, 0x00, (uint8_t*)&DS1307Str, 8);
 80017b4:	2308      	movs	r3, #8
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	4b92      	ldr	r3, [pc, #584]	; (8001a04 <main+0x2a0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	21d0      	movs	r1, #208	; 0xd0
 80017be:	4890      	ldr	r0, [pc, #576]	; (8001a00 <main+0x29c>)
 80017c0:	f7ff fcf5 	bl	80011ae <I2C_Read>
			//Вывод времени.
			Lcd_String(1, 2);
 80017c4:	2102      	movs	r1, #2
 80017c6:	2001      	movs	r0, #1
 80017c8:	f7ff f872 	bl	80008b0 <Lcd_String>
			Lcd_Print("DS1307  : ");
 80017cc:	488e      	ldr	r0, [pc, #568]	; (8001a08 <main+0x2a4>)
 80017ce:	f7ff fa1f 	bl	8000c10 <Lcd_Print>
			//часы
			Lcd_BinToDec(DS1307Str.Hours, 2, LCD_CHAR_SIZE_NORM);
 80017d2:	4b8c      	ldr	r3, [pc, #560]	; (8001a04 <main+0x2a0>)
 80017d4:	789b      	ldrb	r3, [r3, #2]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2200      	movs	r2, #0
 80017da:	2102      	movs	r1, #2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fa35 	bl	8000c4c <Lcd_BinToDec>
			Lcd_Chr(':');
 80017e2:	203a      	movs	r0, #58	; 0x3a
 80017e4:	f7ff f830 	bl	8000848 <Lcd_Chr>
			//минуты
			uint8_t min = ((DS1307Str.Minutes >> 4) * 10) + (DS1307Str.Minutes & 0x0F);
 80017e8:	4b86      	ldr	r3, [pc, #536]	; (8001a04 <main+0x2a0>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	0092      	lsls	r2, r2, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b82      	ldr	r3, [pc, #520]	; (8001a04 <main+0x2a0>)
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4413      	add	r3, r2
 8001806:	71fb      	strb	r3, [r7, #7]
			Lcd_BinToDec(min , 2, LCD_CHAR_SIZE_NORM);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	b29b      	uxth	r3, r3
 800180c:	2200      	movs	r2, #0
 800180e:	2102      	movs	r1, #2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa1b 	bl	8000c4c <Lcd_BinToDec>
			Lcd_Chr(':');
 8001816:	203a      	movs	r0, #58	; 0x3a
 8001818:	f7ff f816 	bl	8000848 <Lcd_Chr>
			//секунды
			uint8_t sec = ((DS1307Str.Seconds >> 4) * 10) + (DS1307Str.Seconds & 0x0F);
 800181c:	4b79      	ldr	r3, [pc, #484]	; (8001a04 <main+0x2a0>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4413      	add	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b75      	ldr	r3, [pc, #468]	; (8001a04 <main+0x2a0>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	b2db      	uxtb	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]
			Lcd_BinToDec(sec , 2, LCD_CHAR_SIZE_NORM);
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	b29b      	uxth	r3, r3
 8001840:	2200      	movs	r2, #0
 8001842:	2102      	movs	r1, #2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fa01 	bl	8000c4c <Lcd_BinToDec>
//					count = 0;
//					lcd_clear();
//				}
			//***********************************************
			//Мигание светодиодами.
			Led_Blink();
 800184a:	f7ff ff39 	bl	80016c0 <Led_Blink>
			//DS18B20
			Temperature_Get(&dsRes);
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff4b 	bl	80016ec <Temperature_Get>
			//***********************************************
			//LCD 128x64 - Работает.

			IncrementOnEachPass(&secCounter, Blink(INTERVAL_500_mS));
 8001856:	2003      	movs	r0, #3
 8001858:	f7fe fd9c 	bl	8000394 <Blink>
 800185c:	4603      	mov	r3, r0
 800185e:	4619      	mov	r1, r3
 8001860:	486a      	ldr	r0, [pc, #424]	; (8001a0c <main+0x2a8>)
 8001862:	f7ff fed5 	bl	8001610 <IncrementOnEachPass>
			Time_Calculation(secCounter);
 8001866:	4b69      	ldr	r3, [pc, #420]	; (8001a0c <main+0x2a8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fef2 	bl	8001654 <Time_Calculation>

			Lcd_String(1, 1);
 8001870:	2101      	movs	r1, #1
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff f81c 	bl	80008b0 <Lcd_String>
			Lcd_Print("IMU v1.0 Test");
 8001878:	4865      	ldr	r0, [pc, #404]	; (8001a10 <main+0x2ac>)
 800187a:	f7ff f9c9 	bl	8000c10 <Lcd_Print>
//			Lcd_BinToDec(Time.min, 2, LCD_CHAR_SIZE_NORM); //минуты
//			Lcd_Chr(':');
//			Lcd_BinToDec(Time.sec, 2, LCD_CHAR_SIZE_NORM); //секунды

			//Вывод темперетуры DS18B20.
			Lcd_String(1, 3);
 800187e:	2103      	movs	r1, #3
 8001880:	2001      	movs	r0, #1
 8001882:	f7ff f815 	bl	80008b0 <Lcd_String>
			Lcd_Print("DS18B20 =");
 8001886:	4863      	ldr	r0, [pc, #396]	; (8001a14 <main+0x2b0>)
 8001888:	f7ff f9c2 	bl	8000c10 <Lcd_Print>
			if(DS18B20_GetTemperatureSign() & DS18B20_SIGN_NEGATIVE)Lcd_Chr('-');
 800188c:	f7fe ff28 	bl	80006e0 <DS18B20_GetTemperatureSign>
 8001890:	4603      	mov	r3, r0
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <main+0x13e>
 800189a:	202d      	movs	r0, #45	; 0x2d
 800189c:	f7fe ffd4 	bl	8000848 <Lcd_Chr>
 80018a0:	e002      	b.n	80018a8 <main+0x144>
			else                    								Lcd_Chr('+');
 80018a2:	202b      	movs	r0, #43	; 0x2b
 80018a4:	f7fe ffd0 	bl	8000848 <Lcd_Chr>
			Lcd_BinToDec(dsRes/10, 2, LCD_CHAR_SIZE_NORM);
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	4a5b      	ldr	r2, [pc, #364]	; (8001a18 <main+0x2b4>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	2200      	movs	r2, #0
 80018b6:	2102      	movs	r1, #2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f9c7 	bl	8000c4c <Lcd_BinToDec>
			Lcd_Chr('.');
 80018be:	202e      	movs	r0, #46	; 0x2e
 80018c0:	f7fe ffc2 	bl	8000848 <Lcd_Chr>
			Lcd_BinToDec(dsRes%10, 1, LCD_CHAR_SIZE_NORM);
 80018c4:	88ba      	ldrh	r2, [r7, #4]
 80018c6:	4b54      	ldr	r3, [pc, #336]	; (8001a18 <main+0x2b4>)
 80018c8:	fba3 1302 	umull	r1, r3, r3, r2
 80018cc:	08d9      	lsrs	r1, r3, #3
 80018ce:	460b      	mov	r3, r1
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b29b      	uxth	r3, r3
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f9b4 	bl	8000c4c <Lcd_BinToDec>
			Lcd_Print(" C");
 80018e4:	484d      	ldr	r0, [pc, #308]	; (8001a1c <main+0x2b8>)
 80018e6:	f7ff f993 	bl	8000c10 <Lcd_Print>
//			Lcd_String(1, 8);
//			Lcd_Print("MPUAccZ= ");
//			Lcd_BinToDec(MPU6050Str.Acc[2], 5, LCD_CHAR_SIZE_NORM);


			Lcd_String(21, 1);
 80018ea:	2101      	movs	r1, #1
 80018ec:	2015      	movs	r0, #21
 80018ee:	f7fe ffdf 	bl	80008b0 <Lcd_String>
			if(Blink(INTERVAL_50_mS))Lcd_Chr(':');
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7fe fd4e 	bl	8000394 <Blink>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <main+0x1a2>
 80018fe:	203a      	movs	r0, #58	; 0x3a
 8001900:	f7fe ffa2 	bl	8000848 <Lcd_Chr>
 8001904:	e002      	b.n	800190c <main+0x1a8>
			else                     Lcd_Chr(' ');
 8001906:	2020      	movs	r0, #32
 8001908:	f7fe ff9e 	bl	8000848 <Lcd_Chr>
			//Рисование линии в зависимости от положение платы BMI160.
			//SSD1306_DrawLine(90, 32, 120, ((GyrX/100))+32, SSD1306_COLOR_WHITE);
			//Прогрессбар.
			//Lcd_Bar(38, 118, 27, 118, 100);

			Lcd_Update();//вывод сделан для SSD1306
 800190c:	f7fe ff48 	bl	80007a0 <Lcd_Update>
			Lcd_Clear();
 8001910:	f7fe ff5a 	bl	80007c8 <Lcd_Clear>
//			MPU6050Str.Acc[0] = runMiddleArifmOptim(MPU6050Str.Acc[0] & 0x7FFF);
//			MPU6050Str.Acc[1] = Filter(MPU6050Str.Acc[1]);//ФНЧ
//			MPU6050Str.Acc[2] = expRunningAverage(MPU6050Str.Acc[2]);
			//***********************************************
			//датчик температуры и влажности AHT10.
			if(tic(Blink(INTERVAL_250_mS))) AHT10_ReadData();
 8001914:	2002      	movs	r0, #2
 8001916:	f7fe fd3d 	bl	8000394 <Blink>
 800191a:	4603      	mov	r3, r0
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff03 	bl	8001728 <tic>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <main+0x1c8>
 8001928:	f7fe fc48 	bl	80001bc <AHT10_ReadData>

			//Вывод темперартуры.
			Lcd_String(1, 4);
 800192c:	2104      	movs	r1, #4
 800192e:	2001      	movs	r0, #1
 8001930:	f7fe ffbe 	bl	80008b0 <Lcd_String>
			Lcd_Print("AHT10_T = ");
 8001934:	483a      	ldr	r0, [pc, #232]	; (8001a20 <main+0x2bc>)
 8001936:	f7ff f96b 	bl	8000c10 <Lcd_Print>
			Lcd_BinToDec(AHT10()->Temperature / 10, 2, LCD_CHAR_SIZE_NORM);
 800193a:	f7fe fc35 	bl	80001a8 <AHT10>
 800193e:	4603      	mov	r3, r0
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	4a35      	ldr	r2, [pc, #212]	; (8001a18 <main+0x2b4>)
 8001944:	fba2 2303 	umull	r2, r3, r2, r3
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	b29b      	uxth	r3, r3
 800194c:	2200      	movs	r2, #0
 800194e:	2102      	movs	r1, #2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff f97b 	bl	8000c4c <Lcd_BinToDec>
			Lcd_Chr('.');
 8001956:	202e      	movs	r0, #46	; 0x2e
 8001958:	f7fe ff76 	bl	8000848 <Lcd_Chr>
			Lcd_BinToDec(AHT10()->Temperature % 10, 1, LCD_CHAR_SIZE_NORM);
 800195c:	f7fe fc24 	bl	80001a8 <AHT10>
 8001960:	4603      	mov	r3, r0
 8001962:	881a      	ldrh	r2, [r3, #0]
 8001964:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <main+0x2b4>)
 8001966:	fba3 1302 	umull	r1, r3, r3, r2
 800196a:	08d9      	lsrs	r1, r3, #3
 800196c:	460b      	mov	r3, r1
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	b29b      	uxth	r3, r3
 8001978:	2200      	movs	r2, #0
 800197a:	2101      	movs	r1, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f965 	bl	8000c4c <Lcd_BinToDec>
			Lcd_Print(" C");
 8001982:	4826      	ldr	r0, [pc, #152]	; (8001a1c <main+0x2b8>)
 8001984:	f7ff f944 	bl	8000c10 <Lcd_Print>
			//Вывод влажности.
			AHT10()->Humidity = Filter_EMA(AHT10()->Humidity);
 8001988:	f7fe fc0e 	bl	80001a8 <AHT10>
 800198c:	4603      	mov	r3, r0
 800198e:	885d      	ldrh	r5, [r3, #2]
 8001990:	f7fe fc0a 	bl	80001a8 <AHT10>
 8001994:	4604      	mov	r4, r0
 8001996:	4628      	mov	r0, r5
 8001998:	f7fe fed0 	bl	800073c <Filter_EMA>
 800199c:	4603      	mov	r3, r0
 800199e:	8063      	strh	r3, [r4, #2]
			Lcd_String(1, 5);
 80019a0:	2105      	movs	r1, #5
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7fe ff84 	bl	80008b0 <Lcd_String>
			Lcd_Print("AHT10_H = ");
 80019a8:	481e      	ldr	r0, [pc, #120]	; (8001a24 <main+0x2c0>)
 80019aa:	f7ff f931 	bl	8000c10 <Lcd_Print>
			Lcd_BinToDec(AHT10()->Humidity / 100, 2, LCD_CHAR_SIZE_NORM);
 80019ae:	f7fe fbfb 	bl	80001a8 <AHT10>
 80019b2:	4603      	mov	r3, r0
 80019b4:	885b      	ldrh	r3, [r3, #2]
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <main+0x2c4>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	095b      	lsrs	r3, r3, #5
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2200      	movs	r2, #0
 80019c2:	2102      	movs	r1, #2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f941 	bl	8000c4c <Lcd_BinToDec>
			Lcd_Chr('.');
 80019ca:	202e      	movs	r0, #46	; 0x2e
 80019cc:	f7fe ff3c 	bl	8000848 <Lcd_Chr>
			Lcd_BinToDec(AHT10()->Humidity % 10, 1, LCD_CHAR_SIZE_NORM);
 80019d0:	f7fe fbea 	bl	80001a8 <AHT10>
 80019d4:	4603      	mov	r3, r0
 80019d6:	885a      	ldrh	r2, [r3, #2]
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <main+0x2b4>)
 80019da:	fba3 1302 	umull	r1, r3, r3, r2
 80019de:	08d9      	lsrs	r1, r3, #3
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	2101      	movs	r1, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f92b 	bl	8000c4c <Lcd_BinToDec>
			Lcd_Print(" %");
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <main+0x2c8>)
 80019f8:	f7ff f90a 	bl	8000c10 <Lcd_Print>
		{
 80019fc:	e6da      	b.n	80017b4 <main+0x50>
 80019fe:	bf00      	nop
 8001a00:	40005800 	.word	0x40005800
 8001a04:	20000470 	.word	0x20000470
 8001a08:	08001e48 	.word	0x08001e48
 8001a0c:	2000046c 	.word	0x2000046c
 8001a10:	08001e54 	.word	0x08001e54
 8001a14:	08001e64 	.word	0x08001e64
 8001a18:	cccccccd 	.word	0xcccccccd
 8001a1c:	08001e70 	.word	0x08001e70
 8001a20:	08001e74 	.word	0x08001e74
 8001a24:	08001e80 	.word	0x08001e80
 8001a28:	51eb851f 	.word	0x51eb851f
 8001a2c:	08001e8c 	.word	0x08001e8c

08001a30 <SysTick_Handler>:
	//************************************************************************************
}
//*******************************************************************************************
//*******************************************************************************************
//Прерывание каждую милисекунду.
void SysTick_Handler(void){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0

	static uint16_t msCountForDS18B20 = 0;
	//-----------------------------
	//Отсчет таймаута для датчика температуры.
	if(++msCountForDS18B20 >= 1000)
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <SysTick_Handler+0x40>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <SysTick_Handler+0x40>)
 8001a3e:	801a      	strh	r2, [r3, #0]
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <SysTick_Handler+0x40>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a48:	d307      	bcc.n	8001a5a <SysTick_Handler+0x2a>
		{
			msCountForDS18B20 = 0;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <SysTick_Handler+0x40>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	801a      	strh	r2, [r3, #0]
			FlagsStr.DS18B20  = 1;
 8001a50:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <SysTick_Handler+0x44>)
 8001a52:	7813      	ldrb	r3, [r2, #0]
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	7013      	strb	r3, [r2, #0]
		}
	//-----------------------------
//	Scheduler_TimerService();
	msDelay_Loop();
 8001a5a:	f7fe fe4b 	bl	80006f4 <msDelay_Loop>
	Blink_Loop();
 8001a5e:	f7fe fc17 	bl	8000290 <Blink_Loop>
	Encoder()->Loop();
 8001a62:	f000 f8d9 	bl	8001c18 <Encoder>
 8001a66:	4603      	mov	r3, r0
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4798      	blx	r3
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200004b4 	.word	0x200004b4
 8001a74:	200004c8 	.word	0x200004c8

08001a78 <Encoder_Turn>:
							   .Loop          = &Encoder_Loop,
							   .Rotation      = &Encoder_Turn};

static uint8_t EncoderStateReg = ENCODER_NO_TURN;//Регистр состияния энкодера.
//-----------------------------------------------------------------------------
static void Encoder_Turn(uint16_t *parameter, uint16_t min, uint16_t max){
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	803b      	strh	r3, [r7, #0]

	//--------------------
	switch(EncoderStateReg){
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <Encoder_Turn+0x74>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d002      	beq.n	8001a96 <Encoder_Turn+0x1e>
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d013      	beq.n	8001abc <Encoder_Turn+0x44>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
			EncoderStateReg = ENCODER_NO_TURN;
		break;
		//-----------
		default:
		break;	
 8001a94:	e025      	b.n	8001ae2 <Encoder_Turn+0x6a>
			if ((*parameter) < max)(*parameter)++;    //Проверка на  максимум.
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	883a      	ldrh	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d906      	bls.n	8001aae <Encoder_Turn+0x36>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	801a      	strh	r2, [r3, #0]
 8001aac:	e002      	b.n	8001ab4 <Encoder_Turn+0x3c>
			else                   (*parameter) = min;//Закольцовывание редактирования параметра.
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	887a      	ldrh	r2, [r7, #2]
 8001ab2:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <Encoder_Turn+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
		break;
 8001aba:	e012      	b.n	8001ae2 <Encoder_Turn+0x6a>
			if ((*parameter) > min)(*parameter)--;    //Проверка на минимум.
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d206      	bcs.n	8001ad4 <Encoder_Turn+0x5c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	801a      	strh	r2, [r3, #0]
 8001ad2:	e002      	b.n	8001ada <Encoder_Turn+0x62>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	883a      	ldrh	r2, [r7, #0]
 8001ad8:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <Encoder_Turn+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
		break;
 8001ae0:	bf00      	nop
		//-----------
	}
	//--------------------	
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	200004b6 	.word	0x200004b6

08001af0 <Encoder_Loop>:
//-----------------------------------------------------------------------------
/*Когда энкодер не вращают на обоих его выводах(A и В) единицы(внутряння подтяжка МК).Это состояние 3 энкодера - начальное состояние энкодера.
*Так-же начальным состоянием может быть  состояние энкодера когда А и В ровны 0.
*Когда вращаю вправо, то после состояния 3 энкодер передет в состояние 1 (А=1, В=0).
*Когда вращают влево, то после состояния 3 энкодер прердет в состояние 2 (А=0, В=1). */
static void Encoder_Loop(void){
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
	static uint8_t  cycle   = 0;
	static uint8_t  msCount = 0;
	static uint16_t but[3]  = {0, 0, 0};
	//--------------------
	//Обработка вращения энкодера.
	switch(EncoderStateReg){
 8001af4:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <Encoder_Loop+0x110>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <Encoder_Loop+0x12>
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d010      	beq.n	8001b22 <Encoder_Loop+0x32>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
				} 			
		break;
		//-----------
		default:
		break;	
 8001b00:	e031      	b.n	8001b66 <Encoder_Loop+0x76>
			if(!(EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 8001b02:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <Encoder_Loop+0x114>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d128      	bne.n	8001b60 <Encoder_Loop+0x70>
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <Encoder_Loop+0x114>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d122      	bne.n	8001b60 <Encoder_Loop+0x70>
					EncoderStateReg = ENCODER_TURN;
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <Encoder_Loop+0x110>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
		break;
 8001b20:	e01e      	b.n	8001b60 <Encoder_Loop+0x70>
			if( !(EncoderPORT->IDR & EncoderPinA) && (EncoderPORT->IDR & EncoderPinB))
 8001b22:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <Encoder_Loop+0x114>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d108      	bne.n	8001b40 <Encoder_Loop+0x50>
 8001b2e:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <Encoder_Loop+0x114>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <Encoder_Loop+0x50>
					EncoderStateReg = ENCODER_TURN_RIGHT;//щелчок вправо.
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <Encoder_Loop+0x110>)
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	701a      	strb	r2, [r3, #0]
		  if( (EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <Encoder_Loop+0x114>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00b      	beq.n	8001b64 <Encoder_Loop+0x74>
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <Encoder_Loop+0x114>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <Encoder_Loop+0x74>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <Encoder_Loop+0x110>)
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	701a      	strb	r2, [r3, #0]
		break;
 8001b5e:	e001      	b.n	8001b64 <Encoder_Loop+0x74>
		break;
 8001b60:	bf00      	nop
 8001b62:	e000      	b.n	8001b66 <Encoder_Loop+0x76>
		break;
 8001b64:	bf00      	nop
		//-----------		
	}
	//--------------------
	//Опрос кнопки энкодера.
	if(++msCount >= ENCODER_BUTTON_TIMEOUT)
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <Encoder_Loop+0x118>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <Encoder_Loop+0x118>)
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <Encoder_Loop+0x118>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b09      	cmp	r3, #9
 8001b78:	d93d      	bls.n	8001bf6 <Encoder_Loop+0x106>
		{
		  msCount = 0;//сброс счетчика
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <Encoder_Loop+0x118>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
		  //-----------
			if(cycle < 3)
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <Encoder_Loop+0x11c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d811      	bhi.n	8001bac <Encoder_Loop+0xbc>
				{
					but[cycle] = EncoderPORT->IDR & EncoderButtonPin;//Считывание состояние вывода.
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <Encoder_Loop+0x114>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <Encoder_Loop+0x11c>)
 8001b90:	7812      	ldrb	r2, [r2, #0]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b96:	b299      	uxth	r1, r3
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <Encoder_Loop+0x120>)
 8001b9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					cycle++;
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <Encoder_Loop+0x11c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <Encoder_Loop+0x11c>)
 8001ba8:	701a      	strb	r2, [r3, #0]
					else EncoderStr.ButtonIsPress = 0;
				}
			//-----------
		}
	//--------------------
}
 8001baa:	e024      	b.n	8001bf6 <Encoder_Loop+0x106>
					cycle = 0;
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <Encoder_Loop+0x11c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
					if(~((but[0] & but[1]) | (but[1] & but[2]) | (but[0] & but[2])) & EncoderButtonPin) 
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <Encoder_Loop+0x120>)
 8001bb4:	885a      	ldrh	r2, [r3, #2]
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <Encoder_Loop+0x120>)
 8001bb8:	8819      	ldrh	r1, [r3, #0]
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <Encoder_Loop+0x120>)
 8001bbc:	889b      	ldrh	r3, [r3, #4]
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <Encoder_Loop+0x120>)
 8001bc8:	8819      	ldrh	r1, [r3, #0]
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <Encoder_Loop+0x120>)
 8001bcc:	889b      	ldrh	r3, [r3, #4]
 8001bce:	400b      	ands	r3, r1
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <Encoder_Loop+0xfc>
							 EncoderStr.ButtonIsPress = 1;
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <Encoder_Loop+0x124>)
 8001be2:	7813      	ldrb	r3, [r2, #0]
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	7013      	strb	r3, [r2, #0]
}
 8001bea:	e004      	b.n	8001bf6 <Encoder_Loop+0x106>
					else EncoderStr.ButtonIsPress = 0;
 8001bec:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <Encoder_Loop+0x124>)
 8001bee:	7813      	ldrb	r3, [r2, #0]
 8001bf0:	f36f 0300 	bfc	r3, #0, #1
 8001bf4:	7013      	strb	r3, [r2, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	200004b6 	.word	0x200004b6
 8001c04:	40011000 	.word	0x40011000
 8001c08:	200004b7 	.word	0x200004b7
 8001c0c:	200004b8 	.word	0x200004b8
 8001c10:	200004bc 	.word	0x200004bc
 8001c14:	20000004 	.word	0x20000004

08001c18 <Encoder>:
	//Input pull-up
	GPIOB->CRH |= (GPIO_CRH_CNF12_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_CNF10_1);//
	GPIOB->ODR |= (GPIO_ODR_ODR12   | GPIO_ODR_ODR11   | GPIO_ODR_ODR10);	 //
}
//-----------------------------------------------------------------------------
Encoder_t* Encoder(void){
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

	return &EncoderStr;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	; (8001c28 <Encoder+0x10>)
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000004 	.word	0x20000004

08001c2c <ssd1306_I2C_WriteDataBuf>:
 * @param  reg: register to write to
 * @param  *data: pointer to data array to write it to slave
 * @param  count: how many bytes will be written
 * @retval None
 */
static void ssd1306_I2C_WriteDataBuf(uint8_t *pData, uint16_t len){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
//			I2C_SendData(SSD1306_I2C, &tempBuff, 1);
//			I2C_SendData(SSD1306_I2C, pData, len);
//		}
//	I2C_Stop(SSD1306_I2C);

	I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0x40, pData, len);
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2240      	movs	r2, #64	; 0x40
 8001c40:	2178      	movs	r1, #120	; 0x78
 8001c42:	4803      	ldr	r0, [pc, #12]	; (8001c50 <ssd1306_I2C_WriteDataBuf+0x24>)
 8001c44:	f7ff fa60 	bl	8001108 <I2C_Write>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40005800 	.word	0x40005800

08001c54 <ssd1306_I2C_WriteCMD>:
 * @param  address: 7 bit slave address, left aligned, bits 7:1 are used, LSB bit is not used
 * @param  reg: register to write to
 * @param  data: data to be written
 * @retval None
 */
static void ssd1306_I2C_WriteCMD(uint8_t cmd){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
//		{
//			I2C_SendData(SSD1306_I2C, data, 2);
//		}
//	I2C_Stop(SSD1306_I2C);

	I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0, &cmd, 1);
 8001c5e:	1dfa      	adds	r2, r7, #7
 8001c60:	2301      	movs	r3, #1
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	2200      	movs	r2, #0
 8001c68:	2178      	movs	r1, #120	; 0x78
 8001c6a:	4803      	ldr	r0, [pc, #12]	; (8001c78 <ssd1306_I2C_WriteCMD+0x24>)
 8001c6c:	f7ff fa4c 	bl	8001108 <I2C_Write>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40005800 	.word	0x40005800

08001c7c <SSD1306_Init>:
//*******************************************************************************************
//*******************************************************************************************
uint8_t SSD1306_Init(I2C_TypeDef *i2c) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
//	uint32_t p = 2500;
//	while(p>0)
//		p--;

	/* Init LCD */
	ssd1306_I2C_WriteCMD(0xAE); //display off
 8001c84:	20ae      	movs	r0, #174	; 0xae
 8001c86:	f7ff ffe5 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x20); //Set Memory Addressing Mode
 8001c8a:	2020      	movs	r0, #32
 8001c8c:	f7ff ffe2 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x01); //00,Horizontal Addressing Mode;
 8001c90:	2001      	movs	r0, #1
 8001c92:	f7ff ffdf 	bl	8001c54 <ssd1306_I2C_WriteCMD>
							    //01,Vertical Addressing Mode;
							    //10,Page Addressing Mode (RESET);
							    //11,Invalid

	ssd1306_I2C_WriteCMD(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c96:	20b0      	movs	r0, #176	; 0xb0
 8001c98:	f7ff ffdc 	bl	8001c54 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xC8); //Set COM Output Scan Direction
 8001c9c:	20c8      	movs	r0, #200	; 0xc8
 8001c9e:	f7ff ffd9 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x00); //---set low column address
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff ffd6 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x10); //---set high column address
 8001ca8:	2010      	movs	r0, #16
 8001caa:	f7ff ffd3 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x40); //--set start line address
 8001cae:	2040      	movs	r0, #64	; 0x40
 8001cb0:	f7ff ffd0 	bl	8001c54 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0x81); //--set contrast control register
 8001cb4:	2081      	movs	r0, #129	; 0x81
 8001cb6:	f7ff ffcd 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(50);
 8001cba:	2032      	movs	r0, #50	; 0x32
 8001cbc:	f7ff ffca 	bl	8001c54 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xA1); //--set segment re-map 0 to 127
 8001cc0:	20a1      	movs	r0, #161	; 0xa1
 8001cc2:	f7ff ffc7 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xA6); //--set normal display
 8001cc6:	20a6      	movs	r0, #166	; 0xa6
 8001cc8:	f7ff ffc4 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xA8); //--set multiplex ratio(1 to 64)
 8001ccc:	20a8      	movs	r0, #168	; 0xa8
 8001cce:	f7ff ffc1 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x3F); //
 8001cd2:	203f      	movs	r0, #63	; 0x3f
 8001cd4:	f7ff ffbe 	bl	8001c54 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001cd8:	20a4      	movs	r0, #164	; 0xa4
 8001cda:	f7ff ffbb 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xD3); //-set display offset
 8001cde:	20d3      	movs	r0, #211	; 0xd3
 8001ce0:	f7ff ffb8 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x00); //-not offset
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff ffb5 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xD5); //--set display clock divide ratio/oscillator frequency
 8001cea:	20d5      	movs	r0, #213	; 0xd5
 8001cec:	f7ff ffb2 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xF0); //--set divide ratio
 8001cf0:	20f0      	movs	r0, #240	; 0xf0
 8001cf2:	f7ff ffaf 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0xD9); //--set pre-charge period
 8001cf6:	20d9      	movs	r0, #217	; 0xd9
 8001cf8:	f7ff ffac 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x22); //
 8001cfc:	2022      	movs	r0, #34	; 0x22
 8001cfe:	f7ff ffa9 	bl	8001c54 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xDA); //--set com pins hardware configuration
 8001d02:	20da      	movs	r0, #218	; 0xda
 8001d04:	f7ff ffa6 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x12);
 8001d08:	2012      	movs	r0, #18
 8001d0a:	f7ff ffa3 	bl	8001c54 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xDB); //--set vcomh
 8001d0e:	20db      	movs	r0, #219	; 0xdb
 8001d10:	f7ff ffa0 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x20); //0x20,0.77xVcc
 8001d14:	2020      	movs	r0, #32
 8001d16:	f7ff ff9d 	bl	8001c54 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0x8D); //--set DC-DC enable
 8001d1a:	208d      	movs	r0, #141	; 0x8d
 8001d1c:	f7ff ff9a 	bl	8001c54 <ssd1306_I2C_WriteCMD>
	ssd1306_I2C_WriteCMD(0x14); //
 8001d20:	2014      	movs	r0, #20
 8001d22:	f7ff ff97 	bl	8001c54 <ssd1306_I2C_WriteCMD>

	ssd1306_I2C_WriteCMD(0xAF); //--turn on SSD1306 panel
 8001d26:	20af      	movs	r0, #175	; 0xaf
 8001d28:	f7ff ff94 	bl	8001c54 <ssd1306_I2C_WriteCMD>
//		0xAF, //--turn on SSD1306 panel
//	};
//	//------------
//	I2C_Int_StartSendData(SSD1306_I2C, SSD1306_I2C_ADDR, InitBuf, 28);

	pVideoBuffer = Lcd_pVideoBuffer();
 8001d2c:	f7fe fd42 	bl	80007b4 <Lcd_pVideoBuffer>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <SSD1306_Init+0xc4>)
 8001d34:	601a      	str	r2, [r3, #0]
//	SSD1306.CurrentX = 0;
//	SSD1306.CurrentY = 0;
	/* Initialized OK */
//	SSD1306.Initialized = 1;
	/* Return OK */
	return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200004c4 	.word	0x200004c4

08001d44 <SSD1306_UpdateScreen>:
//***********************************************************************
void SSD1306_UpdateScreen(uint8_t *pBuf) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

	for(uint8_t m = 0; m < 8; m++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e017      	b.n	8001d82 <SSD1306_UpdateScreen+0x3e>
		{
			ssd1306_I2C_WriteCMD(0xB0 + m);//Set Page Start Address for Page Addressing Mode,0-7
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3b50      	subs	r3, #80	; 0x50
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff7b 	bl	8001c54 <ssd1306_I2C_WriteCMD>
			ssd1306_I2C_WriteCMD(0x02);    //Set low column address ,смещение вывода изображениея на 2 столбца.
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f7ff ff78 	bl	8001c54 <ssd1306_I2C_WriteCMD>
			ssd1306_I2C_WriteCMD(0x10);    //Set high column address
 8001d64:	2010      	movs	r0, #16
 8001d66:	f7ff ff75 	bl	8001c54 <ssd1306_I2C_WriteCMD>
			/* Write multi data */
			ssd1306_I2C_WriteDataBuf(&pBuf[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	01db      	lsls	r3, r3, #7
 8001d6e:	461a      	mov	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff58 	bl	8001c2c <ssd1306_I2C_WriteDataBuf>
	for(uint8_t m = 0; m < 8; m++)
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	2b07      	cmp	r3, #7
 8001d86:	d9e4      	bls.n	8001d52 <SSD1306_UpdateScreen+0xe>
		}
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d90:	480e      	ldr	r0, [pc, #56]	; (8001dcc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001d92:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d94:	f7fe ffec 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <LoopForever+0x8>)
  ldr r1, =_edata
 8001d9a:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <LoopForever+0xc>)
  ldr r2, =_sidata
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <LoopForever+0x10>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <LoopForever+0x14>)
  ldr r4, =_ebss
 8001db0:	4c0b      	ldr	r4, [pc, #44]	; (8001de0 <LoopForever+0x18>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dbe:	f000 f813 	bl	8001de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dc2:	f7ff fccf 	bl	8001764 <main>
  bx lr
 8001dc6:	4770      	bx	lr

08001dc8 <LoopForever>:
LoopForever:
    b LoopForever
 8001dc8:	e7fe      	b.n	8001dc8 <LoopForever>
 8001dca:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001dcc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001dd8:	08002398 	.word	0x08002398
  ldr r2, =_sbss
 8001ddc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001de0:	20000518 	.word	0x20000518

08001de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC1_2_IRQHandler>
	...

08001de8 <__libc_init_array>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	2500      	movs	r5, #0
 8001dec:	4e0c      	ldr	r6, [pc, #48]	; (8001e20 <__libc_init_array+0x38>)
 8001dee:	4c0d      	ldr	r4, [pc, #52]	; (8001e24 <__libc_init_array+0x3c>)
 8001df0:	1ba4      	subs	r4, r4, r6
 8001df2:	10a4      	asrs	r4, r4, #2
 8001df4:	42a5      	cmp	r5, r4
 8001df6:	d109      	bne.n	8001e0c <__libc_init_array+0x24>
 8001df8:	f000 f81a 	bl	8001e30 <_init>
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	4e0a      	ldr	r6, [pc, #40]	; (8001e28 <__libc_init_array+0x40>)
 8001e00:	4c0a      	ldr	r4, [pc, #40]	; (8001e2c <__libc_init_array+0x44>)
 8001e02:	1ba4      	subs	r4, r4, r6
 8001e04:	10a4      	asrs	r4, r4, #2
 8001e06:	42a5      	cmp	r5, r4
 8001e08:	d105      	bne.n	8001e16 <__libc_init_array+0x2e>
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
 8001e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e10:	4798      	blx	r3
 8001e12:	3501      	adds	r5, #1
 8001e14:	e7ee      	b.n	8001df4 <__libc_init_array+0xc>
 8001e16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e1a:	4798      	blx	r3
 8001e1c:	3501      	adds	r5, #1
 8001e1e:	e7f2      	b.n	8001e06 <__libc_init_array+0x1e>
 8001e20:	08002390 	.word	0x08002390
 8001e24:	08002390 	.word	0x08002390
 8001e28:	08002390 	.word	0x08002390
 8001e2c:	08002394 	.word	0x08002394

08001e30 <_init>:
 8001e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e32:	bf00      	nop
 8001e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e36:	bc08      	pop	{r3}
 8001e38:	469e      	mov	lr, r3
 8001e3a:	4770      	bx	lr

08001e3c <_fini>:
 8001e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3e:	bf00      	nop
 8001e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e42:	bc08      	pop	{r3}
 8001e44:	469e      	mov	lr, r3
 8001e46:	4770      	bx	lr
