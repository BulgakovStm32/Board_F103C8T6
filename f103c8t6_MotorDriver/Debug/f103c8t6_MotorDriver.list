
f103c8t6_MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022a4  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  080023d4  080023d4  000123d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e4  080029e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029e4  080029e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029e4  080029e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000000c  080029f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  200004f8  080029f8  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084b2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000176c  00000000  00000000  000284e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000330  00000000  00000000  00029c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000278  00000000  00000000  00029f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001e10  00000000  00000000  0002a200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000607f  00000000  00000000  0002c010  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059efc  00000000  00000000  0003208f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008bf8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc8  00000000  00000000  0008c008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	080023bc 	.word	0x080023bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	080023bc 	.word	0x080023bc

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_d2f>:
 80004e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004f0:	bf24      	itt	cs
 80004f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004fa:	d90d      	bls.n	8000518 <__aeabi_d2f+0x30>
 80004fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000500:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000504:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000508:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800050c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000510:	bf08      	it	eq
 8000512:	f020 0001 	biceq.w	r0, r0, #1
 8000516:	4770      	bx	lr
 8000518:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800051c:	d121      	bne.n	8000562 <__aeabi_d2f+0x7a>
 800051e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000522:	bfbc      	itt	lt
 8000524:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000528:	4770      	bxlt	lr
 800052a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000532:	f1c2 0218 	rsb	r2, r2, #24
 8000536:	f1c2 0c20 	rsb	ip, r2, #32
 800053a:	fa10 f30c 	lsls.w	r3, r0, ip
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	bf18      	it	ne
 8000544:	f040 0001 	orrne.w	r0, r0, #1
 8000548:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800054c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000550:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000554:	ea40 000c 	orr.w	r0, r0, ip
 8000558:	fa23 f302 	lsr.w	r3, r3, r2
 800055c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000560:	e7cc      	b.n	80004fc <__aeabi_d2f+0x14>
 8000562:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000566:	d107      	bne.n	8000578 <__aeabi_d2f+0x90>
 8000568:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800056c:	bf1e      	ittt	ne
 800056e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000572:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000576:	4770      	bxne	lr
 8000578:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800057c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000580:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <__aeabi_frsub>:
 8000588:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800058c:	e002      	b.n	8000594 <__addsf3>
 800058e:	bf00      	nop

08000590 <__aeabi_fsub>:
 8000590:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000594 <__addsf3>:
 8000594:	0042      	lsls	r2, r0, #1
 8000596:	bf1f      	itttt	ne
 8000598:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800059c:	ea92 0f03 	teqne	r2, r3
 80005a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005a8:	d06a      	beq.n	8000680 <__addsf3+0xec>
 80005aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005b2:	bfc1      	itttt	gt
 80005b4:	18d2      	addgt	r2, r2, r3
 80005b6:	4041      	eorgt	r1, r0
 80005b8:	4048      	eorgt	r0, r1
 80005ba:	4041      	eorgt	r1, r0
 80005bc:	bfb8      	it	lt
 80005be:	425b      	neglt	r3, r3
 80005c0:	2b19      	cmp	r3, #25
 80005c2:	bf88      	it	hi
 80005c4:	4770      	bxhi	lr
 80005c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005d2:	bf18      	it	ne
 80005d4:	4240      	negne	r0, r0
 80005d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005e2:	bf18      	it	ne
 80005e4:	4249      	negne	r1, r1
 80005e6:	ea92 0f03 	teq	r2, r3
 80005ea:	d03f      	beq.n	800066c <__addsf3+0xd8>
 80005ec:	f1a2 0201 	sub.w	r2, r2, #1
 80005f0:	fa41 fc03 	asr.w	ip, r1, r3
 80005f4:	eb10 000c 	adds.w	r0, r0, ip
 80005f8:	f1c3 0320 	rsb	r3, r3, #32
 80005fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000600:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000604:	d502      	bpl.n	800060c <__addsf3+0x78>
 8000606:	4249      	negs	r1, r1
 8000608:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800060c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000610:	d313      	bcc.n	800063a <__addsf3+0xa6>
 8000612:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000616:	d306      	bcc.n	8000626 <__addsf3+0x92>
 8000618:	0840      	lsrs	r0, r0, #1
 800061a:	ea4f 0131 	mov.w	r1, r1, rrx
 800061e:	f102 0201 	add.w	r2, r2, #1
 8000622:	2afe      	cmp	r2, #254	; 0xfe
 8000624:	d251      	bcs.n	80006ca <__addsf3+0x136>
 8000626:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800062a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800062e:	bf08      	it	eq
 8000630:	f020 0001 	biceq.w	r0, r0, #1
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	4770      	bx	lr
 800063a:	0049      	lsls	r1, r1, #1
 800063c:	eb40 0000 	adc.w	r0, r0, r0
 8000640:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000644:	f1a2 0201 	sub.w	r2, r2, #1
 8000648:	d1ed      	bne.n	8000626 <__addsf3+0x92>
 800064a:	fab0 fc80 	clz	ip, r0
 800064e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000652:	ebb2 020c 	subs.w	r2, r2, ip
 8000656:	fa00 f00c 	lsl.w	r0, r0, ip
 800065a:	bfaa      	itet	ge
 800065c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000660:	4252      	neglt	r2, r2
 8000662:	4318      	orrge	r0, r3
 8000664:	bfbc      	itt	lt
 8000666:	40d0      	lsrlt	r0, r2
 8000668:	4318      	orrlt	r0, r3
 800066a:	4770      	bx	lr
 800066c:	f092 0f00 	teq	r2, #0
 8000670:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000674:	bf06      	itte	eq
 8000676:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800067a:	3201      	addeq	r2, #1
 800067c:	3b01      	subne	r3, #1
 800067e:	e7b5      	b.n	80005ec <__addsf3+0x58>
 8000680:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000684:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000688:	bf18      	it	ne
 800068a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800068e:	d021      	beq.n	80006d4 <__addsf3+0x140>
 8000690:	ea92 0f03 	teq	r2, r3
 8000694:	d004      	beq.n	80006a0 <__addsf3+0x10c>
 8000696:	f092 0f00 	teq	r2, #0
 800069a:	bf08      	it	eq
 800069c:	4608      	moveq	r0, r1
 800069e:	4770      	bx	lr
 80006a0:	ea90 0f01 	teq	r0, r1
 80006a4:	bf1c      	itt	ne
 80006a6:	2000      	movne	r0, #0
 80006a8:	4770      	bxne	lr
 80006aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006ae:	d104      	bne.n	80006ba <__addsf3+0x126>
 80006b0:	0040      	lsls	r0, r0, #1
 80006b2:	bf28      	it	cs
 80006b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006b8:	4770      	bx	lr
 80006ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006be:	bf3c      	itt	cc
 80006c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bxcc	lr
 80006c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006d2:	4770      	bx	lr
 80006d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006d8:	bf16      	itet	ne
 80006da:	4608      	movne	r0, r1
 80006dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006e0:	4601      	movne	r1, r0
 80006e2:	0242      	lsls	r2, r0, #9
 80006e4:	bf06      	itte	eq
 80006e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006ea:	ea90 0f01 	teqeq	r0, r1
 80006ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006f2:	4770      	bx	lr

080006f4 <__aeabi_ui2f>:
 80006f4:	f04f 0300 	mov.w	r3, #0
 80006f8:	e004      	b.n	8000704 <__aeabi_i2f+0x8>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2f>:
 80006fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	ea5f 0c00 	movs.w	ip, r0
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000710:	4601      	mov	r1, r0
 8000712:	f04f 0000 	mov.w	r0, #0
 8000716:	e01c      	b.n	8000752 <__aeabi_l2f+0x2a>

08000718 <__aeabi_ul2f>:
 8000718:	ea50 0201 	orrs.w	r2, r0, r1
 800071c:	bf08      	it	eq
 800071e:	4770      	bxeq	lr
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	e00a      	b.n	800073c <__aeabi_l2f+0x14>
 8000726:	bf00      	nop

08000728 <__aeabi_l2f>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000734:	d502      	bpl.n	800073c <__aeabi_l2f+0x14>
 8000736:	4240      	negs	r0, r0
 8000738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073c:	ea5f 0c01 	movs.w	ip, r1
 8000740:	bf02      	ittt	eq
 8000742:	4684      	moveq	ip, r0
 8000744:	4601      	moveq	r1, r0
 8000746:	2000      	moveq	r0, #0
 8000748:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800074c:	bf08      	it	eq
 800074e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000752:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000756:	fabc f28c 	clz	r2, ip
 800075a:	3a08      	subs	r2, #8
 800075c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000760:	db10      	blt.n	8000784 <__aeabi_l2f+0x5c>
 8000762:	fa01 fc02 	lsl.w	ip, r1, r2
 8000766:	4463      	add	r3, ip
 8000768:	fa00 fc02 	lsl.w	ip, r0, r2
 800076c:	f1c2 0220 	rsb	r2, r2, #32
 8000770:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000774:	fa20 f202 	lsr.w	r2, r0, r2
 8000778:	eb43 0002 	adc.w	r0, r3, r2
 800077c:	bf08      	it	eq
 800077e:	f020 0001 	biceq.w	r0, r0, #1
 8000782:	4770      	bx	lr
 8000784:	f102 0220 	add.w	r2, r2, #32
 8000788:	fa01 fc02 	lsl.w	ip, r1, r2
 800078c:	f1c2 0220 	rsb	r2, r2, #32
 8000790:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000794:	fa21 f202 	lsr.w	r2, r1, r2
 8000798:	eb43 0002 	adc.w	r0, r3, r2
 800079c:	bf08      	it	eq
 800079e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a2:	4770      	bx	lr

080007a4 <__aeabi_fmul>:
 80007a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007ac:	bf1e      	ittt	ne
 80007ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007b2:	ea92 0f0c 	teqne	r2, ip
 80007b6:	ea93 0f0c 	teqne	r3, ip
 80007ba:	d06f      	beq.n	800089c <__aeabi_fmul+0xf8>
 80007bc:	441a      	add	r2, r3
 80007be:	ea80 0c01 	eor.w	ip, r0, r1
 80007c2:	0240      	lsls	r0, r0, #9
 80007c4:	bf18      	it	ne
 80007c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007ca:	d01e      	beq.n	800080a <__aeabi_fmul+0x66>
 80007cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007d8:	fba0 3101 	umull	r3, r1, r0, r1
 80007dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007e4:	bf3e      	ittt	cc
 80007e6:	0049      	lslcc	r1, r1, #1
 80007e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007ec:	005b      	lslcc	r3, r3, #1
 80007ee:	ea40 0001 	orr.w	r0, r0, r1
 80007f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007f6:	2afd      	cmp	r2, #253	; 0xfd
 80007f8:	d81d      	bhi.n	8000836 <__aeabi_fmul+0x92>
 80007fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	4770      	bx	lr
 800080a:	f090 0f00 	teq	r0, #0
 800080e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000812:	bf08      	it	eq
 8000814:	0249      	lsleq	r1, r1, #9
 8000816:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800081a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800081e:	3a7f      	subs	r2, #127	; 0x7f
 8000820:	bfc2      	ittt	gt
 8000822:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000826:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800082a:	4770      	bxgt	lr
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	3a01      	subs	r2, #1
 8000836:	dc5d      	bgt.n	80008f4 <__aeabi_fmul+0x150>
 8000838:	f112 0f19 	cmn.w	r2, #25
 800083c:	bfdc      	itt	le
 800083e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000842:	4770      	bxle	lr
 8000844:	f1c2 0200 	rsb	r2, r2, #0
 8000848:	0041      	lsls	r1, r0, #1
 800084a:	fa21 f102 	lsr.w	r1, r1, r2
 800084e:	f1c2 0220 	rsb	r2, r2, #32
 8000852:	fa00 fc02 	lsl.w	ip, r0, r2
 8000856:	ea5f 0031 	movs.w	r0, r1, rrx
 800085a:	f140 0000 	adc.w	r0, r0, #0
 800085e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000862:	bf08      	it	eq
 8000864:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000868:	4770      	bx	lr
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000872:	bf02      	ittt	eq
 8000874:	0040      	lsleq	r0, r0, #1
 8000876:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800087a:	3a01      	subeq	r2, #1
 800087c:	d0f9      	beq.n	8000872 <__aeabi_fmul+0xce>
 800087e:	ea40 000c 	orr.w	r0, r0, ip
 8000882:	f093 0f00 	teq	r3, #0
 8000886:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800088a:	bf02      	ittt	eq
 800088c:	0049      	lsleq	r1, r1, #1
 800088e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000892:	3b01      	subeq	r3, #1
 8000894:	d0f9      	beq.n	800088a <__aeabi_fmul+0xe6>
 8000896:	ea41 010c 	orr.w	r1, r1, ip
 800089a:	e78f      	b.n	80007bc <__aeabi_fmul+0x18>
 800089c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008a0:	ea92 0f0c 	teq	r2, ip
 80008a4:	bf18      	it	ne
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d00a      	beq.n	80008c2 <__aeabi_fmul+0x11e>
 80008ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008b0:	bf18      	it	ne
 80008b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008b6:	d1d8      	bne.n	800086a <__aeabi_fmul+0xc6>
 80008b8:	ea80 0001 	eor.w	r0, r0, r1
 80008bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f090 0f00 	teq	r0, #0
 80008c6:	bf17      	itett	ne
 80008c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008cc:	4608      	moveq	r0, r1
 80008ce:	f091 0f00 	teqne	r1, #0
 80008d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008d6:	d014      	beq.n	8000902 <__aeabi_fmul+0x15e>
 80008d8:	ea92 0f0c 	teq	r2, ip
 80008dc:	d101      	bne.n	80008e2 <__aeabi_fmul+0x13e>
 80008de:	0242      	lsls	r2, r0, #9
 80008e0:	d10f      	bne.n	8000902 <__aeabi_fmul+0x15e>
 80008e2:	ea93 0f0c 	teq	r3, ip
 80008e6:	d103      	bne.n	80008f0 <__aeabi_fmul+0x14c>
 80008e8:	024b      	lsls	r3, r1, #9
 80008ea:	bf18      	it	ne
 80008ec:	4608      	movne	r0, r1
 80008ee:	d108      	bne.n	8000902 <__aeabi_fmul+0x15e>
 80008f0:	ea80 0001 	eor.w	r0, r0, r1
 80008f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000900:	4770      	bx	lr
 8000902:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bx	lr

0800090c <__aeabi_fdiv>:
 800090c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000910:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000914:	bf1e      	ittt	ne
 8000916:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800091a:	ea92 0f0c 	teqne	r2, ip
 800091e:	ea93 0f0c 	teqne	r3, ip
 8000922:	d069      	beq.n	80009f8 <__aeabi_fdiv+0xec>
 8000924:	eba2 0203 	sub.w	r2, r2, r3
 8000928:	ea80 0c01 	eor.w	ip, r0, r1
 800092c:	0249      	lsls	r1, r1, #9
 800092e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000932:	d037      	beq.n	80009a4 <__aeabi_fdiv+0x98>
 8000934:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000938:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800093c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000940:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000944:	428b      	cmp	r3, r1
 8000946:	bf38      	it	cc
 8000948:	005b      	lslcc	r3, r3, #1
 800094a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800094e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000952:	428b      	cmp	r3, r1
 8000954:	bf24      	itt	cs
 8000956:	1a5b      	subcs	r3, r3, r1
 8000958:	ea40 000c 	orrcs.w	r0, r0, ip
 800095c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000960:	bf24      	itt	cs
 8000962:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000966:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800096a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800096e:	bf24      	itt	cs
 8000970:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800097c:	bf24      	itt	cs
 800097e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000982:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000986:	011b      	lsls	r3, r3, #4
 8000988:	bf18      	it	ne
 800098a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800098e:	d1e0      	bne.n	8000952 <__aeabi_fdiv+0x46>
 8000990:	2afd      	cmp	r2, #253	; 0xfd
 8000992:	f63f af50 	bhi.w	8000836 <__aeabi_fmul+0x92>
 8000996:	428b      	cmp	r3, r1
 8000998:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009ac:	327f      	adds	r2, #127	; 0x7f
 80009ae:	bfc2      	ittt	gt
 80009b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009b8:	4770      	bxgt	lr
 80009ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	3a01      	subs	r2, #1
 80009c4:	e737      	b.n	8000836 <__aeabi_fmul+0x92>
 80009c6:	f092 0f00 	teq	r2, #0
 80009ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ce:	bf02      	ittt	eq
 80009d0:	0040      	lsleq	r0, r0, #1
 80009d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009d6:	3a01      	subeq	r2, #1
 80009d8:	d0f9      	beq.n	80009ce <__aeabi_fdiv+0xc2>
 80009da:	ea40 000c 	orr.w	r0, r0, ip
 80009de:	f093 0f00 	teq	r3, #0
 80009e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e6:	bf02      	ittt	eq
 80009e8:	0049      	lsleq	r1, r1, #1
 80009ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ee:	3b01      	subeq	r3, #1
 80009f0:	d0f9      	beq.n	80009e6 <__aeabi_fdiv+0xda>
 80009f2:	ea41 010c 	orr.w	r1, r1, ip
 80009f6:	e795      	b.n	8000924 <__aeabi_fdiv+0x18>
 80009f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009fc:	ea92 0f0c 	teq	r2, ip
 8000a00:	d108      	bne.n	8000a14 <__aeabi_fdiv+0x108>
 8000a02:	0242      	lsls	r2, r0, #9
 8000a04:	f47f af7d 	bne.w	8000902 <__aeabi_fmul+0x15e>
 8000a08:	ea93 0f0c 	teq	r3, ip
 8000a0c:	f47f af70 	bne.w	80008f0 <__aeabi_fmul+0x14c>
 8000a10:	4608      	mov	r0, r1
 8000a12:	e776      	b.n	8000902 <__aeabi_fmul+0x15e>
 8000a14:	ea93 0f0c 	teq	r3, ip
 8000a18:	d104      	bne.n	8000a24 <__aeabi_fdiv+0x118>
 8000a1a:	024b      	lsls	r3, r1, #9
 8000a1c:	f43f af4c 	beq.w	80008b8 <__aeabi_fmul+0x114>
 8000a20:	4608      	mov	r0, r1
 8000a22:	e76e      	b.n	8000902 <__aeabi_fmul+0x15e>
 8000a24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a28:	bf18      	it	ne
 8000a2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a2e:	d1ca      	bne.n	80009c6 <__aeabi_fdiv+0xba>
 8000a30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a34:	f47f af5c 	bne.w	80008f0 <__aeabi_fmul+0x14c>
 8000a38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a3c:	f47f af3c 	bne.w	80008b8 <__aeabi_fmul+0x114>
 8000a40:	e75f      	b.n	8000902 <__aeabi_fmul+0x15e>
 8000a42:	bf00      	nop

08000a44 <__gesf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpsf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__lesf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpsf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpsf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6e:	d011      	beq.n	8000a94 <__cmpsf2+0x40>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a76:	bf18      	it	ne
 8000a78:	ea90 0f01 	teqne	r0, r1
 8000a7c:	bf58      	it	pl
 8000a7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a82:	bf88      	it	hi
 8000a84:	17c8      	asrhi	r0, r1, #31
 8000a86:	bf38      	it	cc
 8000a88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a8c:	bf18      	it	ne
 8000a8e:	f040 0001 	orrne.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a98:	d102      	bne.n	8000aa0 <__cmpsf2+0x4c>
 8000a9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a9e:	d105      	bne.n	8000aac <__cmpsf2+0x58>
 8000aa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000aa4:	d1e4      	bne.n	8000a70 <__cmpsf2+0x1c>
 8000aa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000aaa:	d0e1      	beq.n	8000a70 <__cmpsf2+0x1c>
 8000aac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_cfrcmple>:
 8000ab4:	4684      	mov	ip, r0
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	4661      	mov	r1, ip
 8000aba:	e7ff      	b.n	8000abc <__aeabi_cfcmpeq>

08000abc <__aeabi_cfcmpeq>:
 8000abc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000abe:	f7ff ffc9 	bl	8000a54 <__cmpsf2>
 8000ac2:	2800      	cmp	r0, #0
 8000ac4:	bf48      	it	mi
 8000ac6:	f110 0f00 	cmnmi.w	r0, #0
 8000aca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000acc <__aeabi_fcmpeq>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff fff4 	bl	8000abc <__aeabi_cfcmpeq>
 8000ad4:	bf0c      	ite	eq
 8000ad6:	2001      	moveq	r0, #1
 8000ad8:	2000      	movne	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fcmplt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffea 	bl	8000abc <__aeabi_cfcmpeq>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_fcmple>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffe0 	bl	8000abc <__aeabi_cfcmpeq>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_fcmpge>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffd2 	bl	8000ab4 <__aeabi_cfrcmple>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fcmpgt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffc8 	bl	8000ab4 <__aeabi_cfrcmple>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_f2iz>:
 8000b30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b38:	d30f      	bcc.n	8000b5a <__aeabi_f2iz+0x2a>
 8000b3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_f2iz+0x30>
 8000b44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b50:	fa23 f002 	lsr.w	r0, r3, r2
 8000b54:	bf18      	it	ne
 8000b56:	4240      	negne	r0, r0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	4770      	bx	lr
 8000b60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b64:	d101      	bne.n	8000b6a <__aeabi_f2iz+0x3a>
 8000b66:	0242      	lsls	r2, r0, #9
 8000b68:	d105      	bne.n	8000b76 <__aeabi_f2iz+0x46>
 8000b6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b6e:	bf08      	it	eq
 8000b70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_f2uiz>:
 8000b7c:	0042      	lsls	r2, r0, #1
 8000b7e:	d20e      	bcs.n	8000b9e <__aeabi_f2uiz+0x22>
 8000b80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b84:	d30b      	bcc.n	8000b9e <__aeabi_f2uiz+0x22>
 8000b86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b8e:	d409      	bmi.n	8000ba4 <__aeabi_f2uiz+0x28>
 8000b90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b98:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9c:	4770      	bx	lr
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	4770      	bx	lr
 8000ba4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ba8:	d101      	bne.n	8000bae <__aeabi_f2uiz+0x32>
 8000baa:	0242      	lsls	r2, r0, #9
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_f2uiz+0x38>
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <Blink_Loop>:

//-----------------------------------------------------------------------------
static volatile uint16_t BlinkReg = 0;
//-----------------------------------------------------------------------------
//Процесс для мигания светодиодами.
void Blink_Loop(void){
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
	
	static uint16_t blinkCount = 0;
  //--------------------
	++blinkCount;
 8000bc0:	4b5c      	ldr	r3, [pc, #368]	; (8000d34 <Blink_Loop+0x178>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b5a      	ldr	r3, [pc, #360]	; (8000d34 <Blink_Loop+0x178>)
 8000bca:	801a      	strh	r2, [r3, #0]
	BlinkReg ^= (1 << INTERVAL_1_mS);
 8000bcc:	4b5a      	ldr	r3, [pc, #360]	; (8000d38 <Blink_Loop+0x17c>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	f083 0301 	eor.w	r3, r3, #1
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b57      	ldr	r3, [pc, #348]	; (8000d38 <Blink_Loop+0x17c>)
 8000bda:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 2)    == 0) BlinkReg ^= (1 << INTERVAL_2_mS);
 8000bdc:	4b55      	ldr	r3, [pc, #340]	; (8000d34 <Blink_Loop+0x178>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d107      	bne.n	8000bfa <Blink_Loop+0x3e>
 8000bea:	4b53      	ldr	r3, [pc, #332]	; (8000d38 <Blink_Loop+0x17c>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	f083 0302 	eor.w	r3, r3, #2
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <Blink_Loop+0x17c>)
 8000bf8:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 5)    == 0) BlinkReg ^= (1 << INTERVAL_5_mS);
 8000bfa:	4b4e      	ldr	r3, [pc, #312]	; (8000d34 <Blink_Loop+0x178>)
 8000bfc:	881a      	ldrh	r2, [r3, #0]
 8000bfe:	4b4f      	ldr	r3, [pc, #316]	; (8000d3c <Blink_Loop+0x180>)
 8000c00:	fba3 1302 	umull	r1, r3, r3, r2
 8000c04:	0899      	lsrs	r1, r3, #2
 8000c06:	460b      	mov	r3, r1
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d107      	bne.n	8000c24 <Blink_Loop+0x68>
 8000c14:	4b48      	ldr	r3, [pc, #288]	; (8000d38 <Blink_Loop+0x17c>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	f083 0304 	eor.w	r3, r3, #4
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b45      	ldr	r3, [pc, #276]	; (8000d38 <Blink_Loop+0x17c>)
 8000c22:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 10)   == 0) BlinkReg ^= (1 << INTERVAL_10_mS);
 8000c24:	4b43      	ldr	r3, [pc, #268]	; (8000d34 <Blink_Loop+0x178>)
 8000c26:	881a      	ldrh	r2, [r3, #0]
 8000c28:	4b44      	ldr	r3, [pc, #272]	; (8000d3c <Blink_Loop+0x180>)
 8000c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c2e:	08d9      	lsrs	r1, r3, #3
 8000c30:	460b      	mov	r3, r1
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d107      	bne.n	8000c50 <Blink_Loop+0x94>
 8000c40:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <Blink_Loop+0x17c>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	f083 0308 	eor.w	r3, r3, #8
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <Blink_Loop+0x17c>)
 8000c4e:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 50)   == 0) BlinkReg ^= (1 << INTERVAL_50_mS);
 8000c50:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <Blink_Loop+0x178>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	4a3a      	ldr	r2, [pc, #232]	; (8000d40 <Blink_Loop+0x184>)
 8000c56:	fba2 1203 	umull	r1, r2, r2, r3
 8000c5a:	0912      	lsrs	r2, r2, #4
 8000c5c:	2132      	movs	r1, #50	; 0x32
 8000c5e:	fb01 f202 	mul.w	r2, r1, r2
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d107      	bne.n	8000c7a <Blink_Loop+0xbe>
 8000c6a:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <Blink_Loop+0x17c>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	f083 0310 	eor.w	r3, r3, #16
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <Blink_Loop+0x17c>)
 8000c78:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 100)  == 0) BlinkReg ^= (1 << INTERVAL_100_mS);
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <Blink_Loop+0x178>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <Blink_Loop+0x184>)
 8000c80:	fba2 1203 	umull	r1, r2, r2, r3
 8000c84:	0952      	lsrs	r2, r2, #5
 8000c86:	2164      	movs	r1, #100	; 0x64
 8000c88:	fb01 f202 	mul.w	r2, r1, r2
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d107      	bne.n	8000ca4 <Blink_Loop+0xe8>
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <Blink_Loop+0x17c>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	f083 0320 	eor.w	r3, r3, #32
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <Blink_Loop+0x17c>)
 8000ca2:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 250)  == 0) BlinkReg ^= (1 << INTERVAL_250_mS);	
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <Blink_Loop+0x178>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	4a26      	ldr	r2, [pc, #152]	; (8000d44 <Blink_Loop+0x188>)
 8000caa:	fba2 1203 	umull	r1, r2, r2, r3
 8000cae:	0912      	lsrs	r2, r2, #4
 8000cb0:	21fa      	movs	r1, #250	; 0xfa
 8000cb2:	fb01 f202 	mul.w	r2, r1, r2
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d107      	bne.n	8000cce <Blink_Loop+0x112>
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <Blink_Loop+0x17c>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <Blink_Loop+0x17c>)
 8000ccc:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 500)  == 0) BlinkReg ^= (1 << INTERVAL_500_mS);
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <Blink_Loop+0x178>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <Blink_Loop+0x188>)
 8000cd4:	fba2 1203 	umull	r1, r2, r2, r3
 8000cd8:	0952      	lsrs	r2, r2, #5
 8000cda:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cde:	fb01 f202 	mul.w	r2, r1, r2
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d107      	bne.n	8000cfa <Blink_Loop+0x13e>
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <Blink_Loop+0x17c>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <Blink_Loop+0x17c>)
 8000cf8:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 1000) == 0)
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <Blink_Loop+0x178>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <Blink_Loop+0x188>)
 8000d00:	fba2 1203 	umull	r1, r2, r2, r3
 8000d04:	0992      	lsrs	r2, r2, #6
 8000d06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d0a:	fb01 f202 	mul.w	r2, r1, r2
 8000d0e:	1a9b      	subs	r3, r3, r2
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10a      	bne.n	8000d2c <Blink_Loop+0x170>
		{
			BlinkReg  ^= (1 << INTERVAL_1000_mS);
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <Blink_Loop+0x17c>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <Blink_Loop+0x17c>)
 8000d24:	801a      	strh	r2, [r3, #0]
			blinkCount = 0;
 8000d26:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <Blink_Loop+0x178>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	801a      	strh	r2, [r3, #0]
		}
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	2000002a 	.word	0x2000002a
 8000d38:	20000028 	.word	0x20000028
 8000d3c:	cccccccd 	.word	0xcccccccd
 8000d40:	51eb851f 	.word	0x51eb851f
 8000d44:	10624dd3 	.word	0x10624dd3

08000d48 <Blink>:
//-----------------------------------------------------------------------------
uint16_t Blink(BlinkIntervalEnum_t interval){
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	
	if(BlinkReg & (1 << interval)) return 0xFFFF;
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <Blink+0x34>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	fa42 f303 	asr.w	r3, r2, r3
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <Blink+0x26>
 8000d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6c:	e000      	b.n	8000d70 <Blink+0x28>
	else											     return 0;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000028 	.word	0x20000028

08000d80 <msDelay_Loop>:

//*******************************************************************************************
static volatile uint32_t msCounter = 0;
//*******************************************************************************************
//*******************************************************************************************
void msDelay_Loop(void){
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

	msCounter++;
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <msDelay_Loop+0x18>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <msDelay_Loop+0x18>)
 8000d8c:	6013      	str	r3, [r2, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000002c 	.word	0x2000002c

08000d9c <msDelay>:
//**********************************************************
void msDelay(volatile uint32_t del){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

	if(del == 0) return;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00a      	beq.n	8000dc0 <msDelay+0x24>
	msCounter = 0;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <msDelay+0x30>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
	while(msCounter < del){__NOP();};
 8000db0:	e000      	b.n	8000db4 <msDelay+0x18>
 8000db2:	bf00      	nop
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <msDelay+0x30>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d3f9      	bcc.n	8000db2 <msDelay+0x16>
 8000dbe:	e000      	b.n	8000dc2 <msDelay+0x26>
	if(del == 0) return;
 8000dc0:	bf00      	nop
}
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2000002c 	.word	0x2000002c

08000dd0 <SystemInit>:
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <SystemInit+0x5c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <SystemInit+0x5c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <SystemInit+0x5c>)
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4911      	ldr	r1, [pc, #68]	; (8000e2c <SystemInit+0x5c>)
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <SystemInit+0x60>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <SystemInit+0x5c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <SystemInit+0x5c>)
 8000df2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <SystemInit+0x5c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <SystemInit+0x5c>)
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <SystemInit+0x5c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <SystemInit+0x5c>)
 8000e0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e12:	6053      	str	r3, [r2, #4]
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SystemInit+0x5c>)
 8000e16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SystemInit+0x64>)
 8000e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	f8ff0000 	.word	0xf8ff0000
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Gpio_Init>:
static volatile uint16_t GpioAState = 0; //
static volatile uint16_t GpioBState = 0; //
static volatile uint16_t GpioCState = 0; //
//-----------------------------------------------------------------------------
//Инициализация переферии.
void Gpio_Init (void){
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  
  //Включаем тактирование порта A, B, C, D и модуля альтернативных функций.
  RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN |
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <Gpio_Init+0x5c>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <Gpio_Init+0x5c>)
 8000e42:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 8000e46:	6193      	str	r3, [r2, #24]
                   RCC_APB2ENR_IOPBEN |
                   RCC_APB2ENR_IOPCEN |
                   RCC_APB2ENR_IOPDEN |
                   RCC_APB2ENR_AFIOEN);
  //Отключение JTAG-D от порта PA15, отладка через SWD активна.
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE; 
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <Gpio_Init+0x60>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <Gpio_Init+0x60>)
 8000e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e52:	6053      	str	r3, [r2, #4]
  //RCC->CFGR |= RCC_CFGR_MCO_HSI;   //Подключение к выводу PA8 частоту HSI.
  //RCC->CFGR |= RCC_CFGR_MCO_HSE;      //Подключение к выводу PA8 частоту HSE.
  //RCC->CFGR |= RCC_CFGR_MCO_PLL;   //Подключение к выводу PA8 частоту PLL/2. 
  //--------------------
  //PC13 - Led.
  GPIOC->CRH &= ~GPIO_CRH_CNF13;//выход, режим - push-pull.
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <Gpio_Init+0x64>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <Gpio_Init+0x64>)
 8000e5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000e5e:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= GPIO_CRH_MODE13;//тактирование 50МГц.
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <Gpio_Init+0x64>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <Gpio_Init+0x64>)
 8000e66:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000e6a:	6053      	str	r3, [r2, #4]
  //--------------------
  //Управление двигателем.
  //IN1 - PA5
  //IN2 - PA4
  //IN3 - PA3
  GPIOA->CRL &= ~(GPIO_CRL_CNF5  |GPIO_CRL_CNF4   | GPIO_CRL_CNF3 |
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <Gpio_Init+0x68>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <Gpio_Init+0x68>)
 8000e72:	f023 13cc 	bic.w	r3, r3, #13369548	; 0xcc00cc
 8000e76:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 8000e7a:	6013      	str	r3, [r2, #0]
		  	  	  GPIO_CRL_CNF2  |GPIO_CRL_CNF1   | GPIO_CRL_CNF0); //выход, режим - push-pull.

  GPIOA->CRL |=  (GPIO_CRL_MODE5 | GPIO_CRL_MODE4 | GPIO_CRL_MODE3 |
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <Gpio_Init+0x68>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <Gpio_Init+0x68>)
 8000e82:	f043 1333 	orr.w	r3, r3, #3342387	; 0x330033
 8000e86:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8000e8a:	6013      	str	r3, [r2, #0]
                  GPIO_CRH_MODE12 );//тактирование 50МГц.
  GPIOD->CRL |= ( GPIO_CRL_MODE2  );
	//--------------------
	 *
	 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	40010800 	.word	0x40010800

08000ea4 <I2C_Int_Handler>:
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
}
//*******************************************************************************************
//*******************************************************************************************
static void I2C_Int_Handler(I2C_TypeDef *i2c, uint8_t slaveAddr){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t sr1 = i2c->SR1;//Чтениех этих регистров сбрасывает флаги событий I2C.
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	60fb      	str	r3, [r7, #12]
	//volatile uint32_t sr2 = i2c->SR2;
	//---------------------
	//Start condition generated. Clear: read SR1, write to DR
	if(sr1 & I2C_SR1_SB)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d008      	beq.n	8000ed2 <I2C_Int_Handler+0x2e>
		{
		  i2c->DR = I2C_ADDRESS(slaveAddr, I2C_Mode);
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <I2C_Int_Handler+0xbc>)
 8000ec6:	7812      	ldrb	r2, [r2, #0]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	461a      	mov	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	611a      	str	r2, [r3, #16]
		  return;
 8000ed0:	e042      	b.n	8000f58 <I2C_Int_Handler+0xb4>
		}
	//Address sent. Clear: read SR1, read SR2
	else if(sr1 & I2C_SR1_ADDR)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d010      	beq.n	8000efe <I2C_Int_Handler+0x5a>
	   {
	      if(I2C_Mode == I2C_MODE_WRITE)
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <I2C_Int_Handler+0xbc>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d136      	bne.n	8000f52 <I2C_Int_Handler+0xae>
			  {
	    	  	  i2c->DR = I2C_pBuf[0];
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <I2C_Int_Handler+0xc0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	611a      	str	r2, [r3, #16]
	    	  	  I2C_TxCnt++;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <I2C_Int_Handler+0xc4>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <I2C_Int_Handler+0xc4>)
 8000efa:	801a      	strh	r2, [r3, #0]
//						// не дописано! не использовать
//						I2C_NUMB->DR = (uint8_t)AddrReg;            // First byte
//						AddrReg>>=8;
//					 }
//			  }
	      return;
 8000efc:	e029      	b.n	8000f52 <I2C_Int_Handler+0xae>
//	else if(sr1 & I2C_SR1_AF)
//		{
//			I2C_TxCnt++;
//		}
	//Data Register Empty (transmitters).
	else if(sr1 & I2C_SR1_TXE)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d01f      	beq.n	8000f48 <I2C_Int_Handler+0xa4>
		{
			i2c->DR = I2C_pBuf[I2C_TxCnt];
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <I2C_Int_Handler+0xc0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <I2C_Int_Handler+0xc4>)
 8000f0e:	8812      	ldrh	r2, [r2, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	611a      	str	r2, [r3, #16]
			I2C_TxCnt++;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <I2C_Int_Handler+0xc4>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <I2C_Int_Handler+0xc4>)
 8000f24:	801a      	strh	r2, [r3, #0]
			if(I2C_TxCnt >= I2C_TxSize)
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <I2C_Int_Handler+0xc8>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <I2C_Int_Handler+0xc4>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d810      	bhi.n	8000f56 <I2C_Int_Handler+0xb2>
				{
					I2C_TxCnt = 0;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <I2C_Int_Handler+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	801a      	strh	r2, [r3, #0]
					i2c->CR1 |= I2C_CR1_STOP;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
				}
			return;
 8000f46:	e006      	b.n	8000f56 <I2C_Int_Handler+0xb2>
		}
	//Byte Transfer Finished.
	else if(sr1 & I2C_SR1_BTF)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	e002      	b.n	8000f58 <I2C_Int_Handler+0xb4>
	      return;
 8000f52:	bf00      	nop
 8000f54:	e000      	b.n	8000f58 <I2C_Int_Handler+0xb4>
			return;
 8000f56:	bf00      	nop
//	if(sr1 & I2C_SR1_TXE)
//		{
//			if(TxCounter < I2C_TxSize) i2c->DR   = I2C_pBuf[TxCounter++];
//			else		               i2c->CR1 |= I2C_CR1_STOP;
//		}
}
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000039 	.word	0x20000039
 8000f64:	20000034 	.word	0x20000034
 8000f68:	20000030 	.word	0x20000030
 8000f6c:	20000038 	.word	0x20000038

08000f70 <I2C1_EV_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание I2C1.
void I2C1_EV_IRQHandler(void){
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

//	I2C_handler(I2C1, addr);
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <I2C2_EV_IRQHandler>:
//**********************************************************
//Прерывание I2C2.
void I2C2_EV_IRQHandler(void){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

	I2C_Int_Handler(I2C2, I2C_SlaveAddr);
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <I2C2_EV_IRQHandler+0x14>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <I2C2_EV_IRQHandler+0x18>)
 8000f88:	f7ff ff8c 	bl	8000ea4 <I2C_Int_Handler>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000032 	.word	0x20000032
 8000f94:	40005800 	.word	0x40005800

08000f98 <SPI2_IRQHandler>:
	//--------------------
	return (uint8_t)SPI2->DR;
} 
//-----------------------------------------------------------------------------
//Прерываени от SPI2.
void SPI2_IRQHandler(void){
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  
  //uint16_t tmp;
  //--------------------
  //причина прерывания - окончание передачи байта
  if(SPI2->SR & SPI_SR_TXE)
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <SPI2_IRQHandler+0x34>)
 8000f9e:	689b      	ldr	r3, [r3, #8]

      //LC2SostGreenLedToggel;//Мигаем для отладки          
    }
  //--------------------
  //причина прерывания - принят байт данных
  if(SPI2->SR &= SPI_SR_RXNE)
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <SPI2_IRQHandler+0x34>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <SPI2_IRQHandler+0x34>)
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	6093      	str	r3, [r2, #8]
      //tmp = SPI1->DR;                //прочитать принятые данные
      //выполняем какие-то действия      
    }
  //--------------------
  //причина прерывания - ошибка режима ведущего
  if(SPI2->SR &= SPI_SR_MODF)
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <SPI2_IRQHandler+0x34>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <SPI2_IRQHandler+0x34>)
 8000fb2:	f003 0320 	and.w	r3, r3, #32
 8000fb6:	6093      	str	r3, [r2, #8]
    {
      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
    }
  //--------------------
  //причина прерывания - переполнение приемника данных
  if(SPI2->SR &= SPI_SR_OVR)
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SPI2_IRQHandler+0x34>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <SPI2_IRQHandler+0x34>)
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	6093      	str	r3, [r2, #8]
//  if(SPI2->SR &= SSPI_SR_CRCERR)
//    {
//      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
//    }
  //--------------------
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40003800 	.word	0x40003800

08000fd0 <Init_RCC>:
#include "sys_ST.h"

//**********************************************************************************************
//**********************************************************************************************
//Настройка тактирования 72МГц. Внешний кварц 8 МГц.
static uint32_t Init_RCC(void){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
	//--------------------
	//SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/        
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);//Enable HSE.
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <Init_RCC+0xf8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <Init_RCC+0xf8>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready and if Time out is reached exit */
	do{
			HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <Init_RCC+0xf8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	603b      	str	r3, [r7, #0]
			StartUpCounter++;  
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
	  }
	while((HSEStatus == 0) && (StartUpCounter != 0xFFFF));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d104      	bne.n	800100a <Init_RCC+0x3a>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001006:	4293      	cmp	r3, r2
 8001008:	d1ef      	bne.n	8000fea <Init_RCC+0x1a>
	//--------------------
	if ((RCC->CR & RCC_CR_HSERDY) != 0) HSEStatus = (uint32_t)0x01;
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <Init_RCC+0xf8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <Init_RCC+0x4c>
 8001016:	2301      	movs	r3, #1
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	e001      	b.n	8001020 <Init_RCC+0x50>
	else                                HSEStatus = (uint32_t)0x00;
 800101c:	2300      	movs	r3, #0
 800101e:	603b      	str	r3, [r7, #0]
	//--------------------
	if(HSEStatus == (uint32_t)0x01)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d149      	bne.n	80010ba <Init_RCC+0xea>
		{
			/* Enable Prefetch Buffer */
			FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <Init_RCC+0xfc>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a28      	ldr	r2, [pc, #160]	; (80010cc <Init_RCC+0xfc>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6013      	str	r3, [r2, #0]
			/* Flash 2 wait state */
			FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <Init_RCC+0xfc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a25      	ldr	r2, [pc, #148]	; (80010cc <Init_RCC+0xfc>)
 8001038:	f023 0307 	bic.w	r3, r3, #7
 800103c:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;  
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <Init_RCC+0xfc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a22      	ldr	r2, [pc, #136]	; (80010cc <Init_RCC+0xfc>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6013      	str	r3, [r2, #0]
			//--------------------
			//Настройка тактирования шин AHB, APB1 и APB2.
			RCC->CFGR |= (uint32_t)(RCC_CFGR_HPRE_DIV1  | // AHB prescaler. SYSCLK not divided
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <Init_RCC+0xf8>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <Init_RCC+0xf8>)
 8001050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001054:	6053      	str	r3, [r2, #4]
									RCC_CFGR_PPRE2_DIV1 | // APB2 = AHB. APB2 Fmax = 72MHz.
									RCC_CFGR_PPRE1_DIV2); // APB1 = (AHB / 2). APB1 Fmax = 36MHz.
			//--------------------
			//PLL configuration: = HSE * 9 = 72 MHz */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <Init_RCC+0xf8>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <Init_RCC+0xf8>)
 800105c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001060:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_Msk        |  // HSE oscillator clock selected as PLL input clock
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <Init_RCC+0xf8>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <Init_RCC+0xf8>)
 8001068:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800106c:	6053      	str	r3, [r2, #4]
															//RCC_CFGR_PLLXTPRE_HSE_Div2 |  // HSE clock divided by 2                                
															RCC_CFGR_PLLMULL9);
			/* Enable PLL */
			RCC->CR |= RCC_CR_PLLON;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <Init_RCC+0xf8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <Init_RCC+0xf8>)
 8001074:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001078:	6013      	str	r3, [r2, #0]
			/* Wait till PLL is ready */
			while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 800107a:	bf00      	nop
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <Init_RCC+0xf8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f9      	beq.n	800107c <Init_RCC+0xac>
			/* Select PLL as system clock source */
			RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <Init_RCC+0xf8>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <Init_RCC+0xf8>)
 800108e:	f023 0303 	bic.w	r3, r3, #3
 8001092:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <Init_RCC+0xf8>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <Init_RCC+0xf8>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	6053      	str	r3, [r2, #4]
			/* Wait till PLL is used as system clock source */
			while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)  {}        
 80010a0:	bf00      	nop
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <Init_RCC+0xf8>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d1f9      	bne.n	80010a2 <Init_RCC+0xd2>
			RCC->CR |= RCC_CR_CSSON; //Включаем защиту HSE от сбоев - CSS.
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <Init_RCC+0xf8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <Init_RCC+0xf8>)
 80010b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010b8:	6013      	str	r3, [r2, #0]
	else
		{
				/* If HSE fails to start-up, the application will have wrong clock 
				 configuration. User can add here some code to deal with this error */
		} 
	return HSEStatus;
 80010ba:	683b      	ldr	r3, [r7, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40022000 	.word	0x40022000

080010d0 <Sys_Init>:
//*****************************************************************************
void Sys_Init(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	
  //Reset the RCC clock configuration to the default reset state(for debug purpose).
  RCC->CR 	|= (uint32_t)0x00000001;	/* Set HSION bit */
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <Sys_Init+0x54>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a12      	ldr	r2, [pc, #72]	; (8001124 <Sys_Init+0x54>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF0FF0000;	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <Sys_Init+0x54>)
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	490f      	ldr	r1, [pc, #60]	; (8001124 <Sys_Init+0x54>)
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <Sys_Init+0x58>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
  RCC->CR 	&= (uint32_t)0xFEF6FFFF;  /* Reset HSEON, CSSON and PLLON bits */
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <Sys_Init+0x54>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <Sys_Init+0x54>)
 80010f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fa:	6013      	str	r3, [r2, #0]
  RCC->CR 	&= (uint32_t)0xFFFBFFFF;  /* Reset HSEBYP bit */
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <Sys_Init+0x54>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a08      	ldr	r2, [pc, #32]	; (8001124 <Sys_Init+0x54>)
 8001102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001106:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <Sys_Init+0x54>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a05      	ldr	r2, [pc, #20]	; (8001124 <Sys_Init+0x54>)
 800110e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001112:	6053      	str	r3, [r2, #4]
  RCC->CIR 	 = 0x009F0000;  				  /* Disable all interrupts and clear pending bits  */
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <Sys_Init+0x54>)
 8001116:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800111a:	609a      	str	r2, [r3, #8]
  //RCC->CFGR2 = 0x00000000;      			/* Reset CFGR2 register */  
	
  Init_RCC();//Настройка тактирования микроконтроллера. Внешний кварц 8 МГц.
 800111c:	f7ff ff58 	bl	8000fd0 <Init_RCC>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	f0ff0000 	.word	0xf0ff0000

0800112c <NMI_Handler>:
	return (*(__IO uint32_t*)address);
}
//**********************************************************************************************
//**********************************************************************************************
//Прерываени блока CSS. Возникает при сбое тактирования HSE.
void NMI_Handler( void){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  //RCC->CIR |= RCC_CIR_CSSC;//Очищаем флаг прерывания CSS иначе прерывание будет генерироваться бесконечно.
	//NVIC_SystemReset();
  //LC1SostRedLedOn;
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <HardFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void HardFault_Handler( void){
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
//  if(SCB->HFSR & SCB_HFSR_FORCED)   LC1SostRedLedOn();
//  if(SCB->HFSR & SCB_HFSR_DEBUGEVT) LC2SostRedLedOn();
	
//	LC1SostRedLedOn();
//	LC2SostRedLedOn();
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <MemManage_Handler>:
//*****************************************************************************
//*****************************************************************************
void MemManage_Handler( void){
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

//  LC2SostRedLedOn();
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <BusFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void BusFault_Handler( void){
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

//  LC2SostGreenLedOn();
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <UsageFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void UsageFault_Handler( void){
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <SVC_Handler>:
//*****************************************************************************
//*****************************************************************************
void SVC_Handler( void){
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <SysTick_Init>:

#include "sys_tick_ST.h"

//-----------------------------------------------------------------------------
//Инициализация системного таймера SysTick.
void SysTick_Init(void){
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

	SysTick->LOAD = TimerTick;	//Загрузка значения.
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SysTick_Init+0x20>)
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <SysTick_Init+0x24>)
 800117c:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = TimerTick;	//Обнуление таймера. 
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SysTick_Init+0x20>)
 8001180:	4a05      	ldr	r2, [pc, #20]	; (8001198 <SysTick_Init+0x24>)
 8001182:	609a      	str	r2, [r3, #8]
                              //При записи любого значения этот регист обнуляется, с обнулением флага COUNTFLAG. 
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | //Тактирование частотой процессора (24МГц).
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <SysTick_Init+0x20>)
 8001186:	2207      	movs	r2, #7
 8001188:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk   | //Рразрешение прерывания.
					SysTick_CTRL_ENABLE_Msk;     //Резрешение таймеру считать.
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010
 8001198:	0001193f 	.word	0x0001193f

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4906      	ldr	r1, [pc, #24]	; (80011d0 <__NVIC_EnableIRQ+0x34>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <TIM1_InitForPWM>:

#include "timers_ST.h"

//*******************************************************************************************
//*******************************************************************************************
void TIM1_InitForPWM(uint32_t ARRval){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	//Включение тактирования таймера.
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <TIM1_InitForPWM+0xbc>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <TIM1_InitForPWM+0xbc>)
 8001236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800123a:	6193      	str	r3, [r2, #24]
	//Прескаллер.
	//APB2_CLK = 72MHz, TIM1_CLK = APB2_CLK * 1 = 72MHz.
	TIM1->PSC = 0;                //PSC[15:0]: Prescaler value.
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 800123e:	2200      	movs	r2, #0
 8001240:	629a      	str	r2, [r3, #40]	; 0x28
								  //The counter clock frequency (CK_CNT) is equal to fCK_PSC / (PSC[15:0] + 1).
								  //таймер будет тактироваться с частотой 72МГц/(PSC[15:0] + 1) = 72MГц.
	TIM1->ARR = ARRval;//(3600 - 1);       //Auto reload register. - это значение, до которого будет считать таймер.
 8001242:	4a29      	ldr	r2, [pc, #164]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	62d3      	str	r3, [r2, #44]	; 0x2c

	TIM1->CR1  |= TIM_CR1_ARPE;   //Включен режим предварительной записи регистра автоперезагрузки
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 800124e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001252:	6013      	str	r3, [r2, #0]
	TIM1->CCER |= TIM_CCER_CC1E | //Enable CC1 - включение первого канала
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 800125a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6213      	str	r3, [r2, #32]
				  TIM_CCER_CC2E | //Enable CC2 - включение второго канала
				  TIM_CCER_CC3E;  //Enable CC3 - включение третьего канала.
	//Задаем режим работы канала 1 - PWM mode on OC1
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | //OC1M : Output compare 1 mode - 110: PWM mode 1.
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 800126a:	f043 036c 	orr.w	r3, r3, #108	; 0x6c
 800126e:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC1PE  |					 //OC1PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.
				   TIM_CCMR1_OC1FE;						 //OC1FE: Output Compare 1 fast enable.
	//Задаем режим работы канала 2 - PWM mode on OC2
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | //OC2M : Output compare 1 mode - 110: PWM mode 1.
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 8001276:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 800127a:	6193      	str	r3, [r2, #24]
				   TIM_CCMR1_OC2PE  |					 //OC2PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.
				   TIM_CCMR1_OC2FE;						 //OC2FE: Output Compare 1 fast enable.
	//Задаем режим работы канала 3 - PWM mode on OC3
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | //OC3M : Output compare 1 mode - 110: PWM mode 1.
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 8001282:	f043 036c 	orr.w	r3, r3, #108	; 0x6c
 8001286:	61d3      	str	r3, [r2, #28]
				   TIM_CCMR2_OC3PE  |					 //OC3PE: Output compare 1 preload enable. 1: Preload register on TIMx_CCR1 enabled.
				   TIM_CCMR2_OC3FE;						 //OC3FE: Output Compare 1 fast enable.

	//Режимы работы ШИМ. CMS[1:0]: Center-aligned mode selection
	TIM1->CR1 &= ~(TIM_CR1_CMS_0 | TIM_CR1_CMS_1);
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 800128e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001292:	6013      	str	r3, [r2, #0]
	//TIM1->CR1 |=   TIM_CR1_CMS_0; 			   // выравнивания по центру - Режим 1.
	//TIM1->CR1 |=   TIM_CR1_CMS_1;				   // выравнивания по центру - Режим 2.
	//TIM1->CR1 |=   TIM_CR1_CMS_0 | TIM_CR1_CMS_1;// выравнивания по центру - Режим 3.

	//TIM1->BDTR |= TIM_BDTR_MOE;// MOE: Main output enable. Разрешаем вывод сигнала на выводы
	TIM1->BDTR |= TIM_BDTR_AOE;//AOE: Automatic output enable
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 800129a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129e:	6453      	str	r3, [r2, #68]	; 0x44
	//TIM1->BDTR |= (7 << 5);         // Мертвое время. Константа расчитана из задержек конкретного железа.

	//Настройка ножки микроконтроллера.
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;	//Включение тактирования PORTA.
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <TIM1_InitForPWM+0xbc>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <TIM1_InitForPWM+0xbc>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]

	GPIOA->CRH |= GPIO_CRH_CNF8_1 | //PA8(TIM1_CH1)  - выход, альтернативный режим push-pull.
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <TIM1_InitForPWM+0xc4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <TIM1_InitForPWM+0xc4>)
 80012b2:	f443 6308 	orr.w	r3, r3, #2176	; 0x880
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6053      	str	r3, [r2, #4]
			      GPIO_CRH_CNF9_1 | //PA9(TIM1_CH2)  - выход, альтернативный режим push-pull.
				  GPIO_CRH_CNF10_1; //PA10(TIM1_CH3) - выход, альтернативный режим push-pull.

	GPIOA->CRH |= GPIO_CRH_MODE8 |  //PA8(TIM1_CH1)  - тактирование 50МГц.
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <TIM1_InitForPWM+0xc4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <TIM1_InitForPWM+0xc4>)
 80012c2:	f443 734c 	orr.w	r3, r3, #816	; 0x330
 80012c6:	f043 0303 	orr.w	r3, r3, #3
 80012ca:	6053      	str	r3, [r2, #4]
				  GPIO_CRH_MODE9 |  //PA9(TIM1_CH2)  - тактирование 50МГц.
				  GPIO_CRH_MODE10;  //PA10(TIM1_CH3) - тактирование 50МГц.
	//Включение таймера
	TIM1->CR1 |= TIM_CR1_CEN;//CEN: Counter enable
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <TIM1_InitForPWM+0xc0>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40012c00 	.word	0x40012c00
 80012ec:	40010800 	.word	0x40010800

080012f0 <TIM4_Init>:
	//Включение таймера
	TIM3->CR1 |= TIM_CR1_CEN;
}
//*******************************************************************************************
//*******************************************************************************************
void TIM4_Init(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

	//Включение тактирования таймера.
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <TIM4_Init+0x40>)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <TIM4_Init+0x40>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	61d3      	str	r3, [r2, #28]

	//Прескаллер.
	//APB1_CLK = 36MHz, TIM4_CLK = APB1_CLK * 2 = 72MHz.
	TIM4->PSC = (72 - 1);  	   //таймер будет тактироваться с частотой 72МГц/72 = 1МГц.
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <TIM4_Init+0x44>)
 8001302:	2247      	movs	r2, #71	; 0x47
 8001304:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = (100000 - 1);//Auto reload register - это значение, до которого будет считать таймер.
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <TIM4_Init+0x44>)
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <TIM4_Init+0x48>)
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->DIER |= TIM_DIER_UIE; //Update interrupt enable
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <TIM4_Init+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <TIM4_Init+0x44>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	60d3      	str	r3, [r2, #12]
	TIM4->CR1   = TIM_CR1_ARPE |//Auto-reload preload enable
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <TIM4_Init+0x44>)
 800131a:	2281      	movs	r2, #129	; 0x81
 800131c:	601a      	str	r2, [r3, #0]
				  TIM_CR1_CEN;  //Counter enable
	//Разрешение прерывания от TIM4.
	NVIC_SetPriority(TIM4_IRQn, 15);
 800131e:	210f      	movs	r1, #15
 8001320:	201e      	movs	r0, #30
 8001322:	f7ff ff57 	bl	80011d4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 8001326:	201e      	movs	r0, #30
 8001328:	f7ff ff38 	bl	800119c <__NVIC_EnableIRQ>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000
 8001334:	40000800 	.word	0x40000800
 8001338:	0001869f 	.word	0x0001869f

0800133c <Led_Blink>:
	riseReg  = (oldState ^ event) & event;
	oldState = event;
	if(riseReg) (*var)--;
}
//************************************************************
void Led_Blink(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

	if(Blink(INTERVAL_50_mS)) Led_PC13_On();
 8001340:	2004      	movs	r0, #4
 8001342:	f7ff fd01 	bl	8000d48 <Blink>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <Led_Blink+0x1a>
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <Led_Blink+0x28>)
 800134e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001352:	611a      	str	r2, [r3, #16]
	else					  Led_PC13_Off();
}
 8001354:	e003      	b.n	800135e <Led_Blink+0x22>
	else					  Led_PC13_Off();
 8001356:	4b03      	ldr	r3, [pc, #12]	; (8001364 <Led_Blink+0x28>)
 8001358:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800135c:	611a      	str	r2, [r3, #16]
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40011000 	.word	0x40011000

08001368 <FillSinTable>:

static uint16_t sin_arr[STEPS_NUM][3];

//************************************************************
//************************************************************
void FillSinTable(void){
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0

	float arg = (PI / STEPS_NUM);
 800136e:	4b50      	ldr	r3, [pc, #320]	; (80014b0 <FillSinTable+0x148>)
 8001370:	603b      	str	r3, [r7, #0]
	//--------------------------
	for(uint16_t i = 0; i < STEPS_NUM; i++)
 8001372:	2300      	movs	r3, #0
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	e08b      	b.n	8001490 <FillSinTable+0x128>
		{
			sin_arr[i][0] = (uint16_t)(PWM_MAX_VALUE * fabsf(sinf(i * arg)));
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f9be 	bl	80006fc <__aeabi_i2f>
 8001380:	4603      	mov	r3, r0
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fa0d 	bl	80007a4 <__aeabi_fmul>
 800138a:	4603      	mov	r3, r0
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fa5d 	bl	800184c <sinf>
 8001392:	4603      	mov	r3, r0
 8001394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001398:	4946      	ldr	r1, [pc, #280]	; (80014b4 <FillSinTable+0x14c>)
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fa02 	bl	80007a4 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	88fc      	ldrh	r4, [r7, #6]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fbe9 	bl	8000b7c <__aeabi_f2uiz>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b299      	uxth	r1, r3
 80013ae:	4a42      	ldr	r2, [pc, #264]	; (80014b8 <FillSinTable+0x150>)
 80013b0:	4623      	mov	r3, r4
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4423      	add	r3, r4
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	460a      	mov	r2, r1
 80013bc:	801a      	strh	r2, [r3, #0]
			sin_arr[i][1] = (uint16_t)(PWM_MAX_VALUE * fabsf(sinf(i * arg + DEGREES_120)));
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f99b 	bl	80006fc <__aeabi_i2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f9ea 	bl	80007a4 <__aeabi_fmul>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f830 	bl	8000438 <__aeabi_f2d>
 80013d8:	a331      	add	r3, pc, #196	; (adr r3, 80014a0 <FillSinTable+0x138>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7fe fecd 	bl	800017c <__adddf3>
 80013e2:	4603      	mov	r3, r0
 80013e4:	460c      	mov	r4, r1
 80013e6:	4618      	mov	r0, r3
 80013e8:	4621      	mov	r1, r4
 80013ea:	f7ff f87d 	bl	80004e8 <__aeabi_d2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fa2b 	bl	800184c <sinf>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013fc:	492d      	ldr	r1, [pc, #180]	; (80014b4 <FillSinTable+0x14c>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f9d0 	bl	80007a4 <__aeabi_fmul>
 8001404:	4603      	mov	r3, r0
 8001406:	88fc      	ldrh	r4, [r7, #6]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fbb7 	bl	8000b7c <__aeabi_f2uiz>
 800140e:	4603      	mov	r3, r0
 8001410:	b299      	uxth	r1, r3
 8001412:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <FillSinTable+0x150>)
 8001414:	4623      	mov	r3, r4
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4423      	add	r3, r4
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	3302      	adds	r3, #2
 8001420:	460a      	mov	r2, r1
 8001422:	801a      	strh	r2, [r3, #0]
			sin_arr[i][2] = (uint16_t)(PWM_MAX_VALUE * fabsf(sinf(i * arg + DEGREES_240)));
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f968 	bl	80006fc <__aeabi_i2f>
 800142c:	4603      	mov	r3, r0
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f9b7 	bl	80007a4 <__aeabi_fmul>
 8001436:	4603      	mov	r3, r0
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe fffd 	bl	8000438 <__aeabi_f2d>
 800143e:	a31a      	add	r3, pc, #104	; (adr r3, 80014a8 <FillSinTable+0x140>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7fe fe9a 	bl	800017c <__adddf3>
 8001448:	4603      	mov	r3, r0
 800144a:	460c      	mov	r4, r1
 800144c:	4618      	mov	r0, r3
 800144e:	4621      	mov	r1, r4
 8001450:	f7ff f84a 	bl	80004e8 <__aeabi_d2f>
 8001454:	4603      	mov	r3, r0
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f9f8 	bl	800184c <sinf>
 800145c:	4603      	mov	r3, r0
 800145e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001462:	4914      	ldr	r1, [pc, #80]	; (80014b4 <FillSinTable+0x14c>)
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f99d 	bl	80007a4 <__aeabi_fmul>
 800146a:	4603      	mov	r3, r0
 800146c:	88fc      	ldrh	r4, [r7, #6]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fb84 	bl	8000b7c <__aeabi_f2uiz>
 8001474:	4603      	mov	r3, r0
 8001476:	b299      	uxth	r1, r3
 8001478:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <FillSinTable+0x150>)
 800147a:	4623      	mov	r3, r4
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4423      	add	r3, r4
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	3304      	adds	r3, #4
 8001486:	460a      	mov	r2, r1
 8001488:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < STEPS_NUM; i++)
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	3301      	adds	r3, #1
 800148e:	80fb      	strh	r3, [r7, #6]
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	2bc7      	cmp	r3, #199	; 0xc7
 8001494:	f67f af70 	bls.w	8001378 <FillSinTable+0x10>
//		{
//			sin_arr[i][0] = (uint16_t)(PWM_MAX_VALUE/2 + PWM_MAX_VALUE * sinf(i * arg));
//			sin_arr[i][1] = (uint16_t)(PWM_MAX_VALUE/2 + PWM_MAX_VALUE * sinf(i * arg + DEGREES_120));
//			sin_arr[i][2] = (uint16_t)(PWM_MAX_VALUE/2 + PWM_MAX_VALUE * sinf(i * arg + DEGREES_240));
//		}
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	c985f06f 	.word	0xc985f06f
 80014a4:	4000c154 	.word	0x4000c154
 80014a8:	2a6f3f53 	.word	0x2a6f3f53
 80014ac:	4010c152 	.word	0x4010c152
 80014b0:	3c80adfd 	.word	0x3c80adfd
 80014b4:	44e10000 	.word	0x44e10000
 80014b8:	2000003c 	.word	0x2000003c

080014bc <main>:
//*******************************************************************************************
//*******************************************************************************************

int main(void){
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0


	//--------------------------
	//Drivers.
	Sys_Init();
 80014c0:	f7ff fe06 	bl	80010d0 <Sys_Init>
	Gpio_Init();
 80014c4:	f7ff fcb8 	bl	8000e38 <Gpio_Init>
	SysTick_Init();
 80014c8:	f7ff fe54 	bl	8001174 <SysTick_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80014cc:	b662      	cpsie	i
	__enable_irq();
	//***********************************************
	TIM1_InitForPWM(PWM_MAX_VALUE);
 80014ce:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80014d2:	f7ff fea9 	bl	8001228 <TIM1_InitForPWM>
	//TIM3_InitForPWM();//TIM3 генерирует ШИМ для трех каналов.
	TIM4_Init();        //TIM4 настривается для периодической генерации прерывания.
 80014d6:	f7ff ff0b 	bl	80012f0 <TIM4_Init>

	//Заполнение таблицы сиинуса.
	FillSinTable();
 80014da:	f7ff ff45 	bl	8001368 <FillSinTable>

	//Настройка DMA для работы с таймером.
	//DMA1_ChX_Init(DMA1_Channel4, pwm_value, (sizeof(pwm_value) / sizeof(pwm_value[0])) );

	//__disable_irq();
	msDelay(500);
 80014de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e2:	f7ff fc5b 	bl	8000d9c <msDelay>
	while(1)
		{
			//msDelay(10);
			//***********************************************
			//Мигание светодиодами.
			Led_Blink();
 80014e6:	f7ff ff29 	bl	800133c <Led_Blink>
 80014ea:	e7fc      	b.n	80014e6 <main+0x2a>

080014ec <SysTick_Handler>:
	//************************************************************************************
}
//*******************************************************************************************
//*******************************************************************************************
//Прерывание каждую милисекунду.
void SysTick_Handler(void){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
//		{
//			msCountForDS18B20 = 0;
//			FlagsStr.DS18B20  = 1;
//		}
	//--------------------------
	msDelay_Loop();
 80014f0:	f7ff fc46 	bl	8000d80 <msDelay_Loop>
	Blink_Loop();
 80014f4:	f7ff fb62 	bl	8000bbc <Blink_Loop>
	Encoder()->Loop();
 80014f8:	f000 f950 	bl	800179c <Encoder>
 80014fc:	4603      	mov	r3, r0
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4798      	blx	r3
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <TIM4_IRQHandler>:
#define PMSM_PWM  1000//Коэфф-т заполнения от 0 до 1800



//Прерывание TIM4.
void TIM4_IRQHandler(void){
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0

	uint16_t pwm1, pwm2, pwm3;
	//--------------------------
	TIM4->SR &= ~TIM_SR_UIF;//Сброс флага прерывания.
 800150e:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <TIM4_IRQHandler+0xe0>)
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	4a35      	ldr	r2, [pc, #212]	; (80015e8 <TIM4_IRQHandler+0xe0>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6113      	str	r3, [r2, #16]
	//Установка скорости вращения производится изменением частоты срабатывания
	//таймера TIM4

	//--------------------------
	// Calculate PWM for 3-phase
	pwm1 = (uint16_t)((uint32_t)(PMSM_PWM * PMSM_SINTABLE[sinTableIndex][0]) / 255);
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <TIM4_IRQHandler+0xe4>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	4619      	mov	r1, r3
 8001520:	4a33      	ldr	r2, [pc, #204]	; (80015f0 <TIM4_IRQHandler+0xe8>)
 8001522:	460b      	mov	r3, r1
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	440b      	add	r3, r1
 8001528:	4413      	add	r3, r2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	fb03 f302 	mul.w	r3, r3, r2
 8001536:	461a      	mov	r2, r3
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <TIM4_IRQHandler+0xec>)
 800153a:	fba3 2302 	umull	r2, r3, r3, r2
 800153e:	09db      	lsrs	r3, r3, #7
 8001540:	80fb      	strh	r3, [r7, #6]
	pwm2 = (uint16_t)((uint32_t)(PMSM_PWM * PMSM_SINTABLE[sinTableIndex][1]) / 255);
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <TIM4_IRQHandler+0xe4>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	4a29      	ldr	r2, [pc, #164]	; (80015f0 <TIM4_IRQHandler+0xe8>)
 800154a:	460b      	mov	r3, r1
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	440b      	add	r3, r1
 8001550:	4413      	add	r3, r2
 8001552:	3301      	adds	r3, #1
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155c:	fb03 f302 	mul.w	r3, r3, r2
 8001560:	461a      	mov	r2, r3
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <TIM4_IRQHandler+0xec>)
 8001564:	fba3 2302 	umull	r2, r3, r3, r2
 8001568:	09db      	lsrs	r3, r3, #7
 800156a:	80bb      	strh	r3, [r7, #4]
	pwm3 = (uint16_t)((uint32_t)(PMSM_PWM * PMSM_SINTABLE[sinTableIndex][2]) / 255);
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <TIM4_IRQHandler+0xe4>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <TIM4_IRQHandler+0xe8>)
 8001574:	460b      	mov	r3, r1
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	440b      	add	r3, r1
 800157a:	4413      	add	r3, r2
 800157c:	3302      	adds	r3, #2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001586:	fb03 f302 	mul.w	r3, r3, r2
 800158a:	461a      	mov	r2, r3
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <TIM4_IRQHandler+0xec>)
 800158e:	fba3 2302 	umull	r2, r3, r3, r2
 8001592:	09db      	lsrs	r3, r3, #7
 8001594:	807b      	strh	r3, [r7, #2]

	//Set PWM
	TIM1->CCR1 = pwm1;
 8001596:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <TIM4_IRQHandler+0xf0>)
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = pwm2;
 800159c:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <TIM4_IRQHandler+0xf0>)
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = pwm3;
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <TIM4_IRQHandler+0xf0>)
 80015a4:	887b      	ldrh	r3, [r7, #2]
 80015a6:	63d3      	str	r3, [r2, #60]	; 0x3c
	// Increment position in sine table
	sinTableIndex++;
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <TIM4_IRQHandler+0xe4>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <TIM4_IRQHandler+0xe4>)
 80015b2:	801a      	strh	r2, [r3, #0]
	if(sinTableIndex > PMSM_SINTABLESIZE-1) sinTableIndex = 0;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <TIM4_IRQHandler+0xe4>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	2bbf      	cmp	r3, #191	; 0xbf
 80015ba:	d902      	bls.n	80015c2 <TIM4_IRQHandler+0xba>
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <TIM4_IRQHandler+0xe4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	801a      	strh	r2, [r3, #0]
//	TIM1->CCR1 = sin_arr[sinTableIndex][0];
//	TIM1->CCR2 = sin_arr[sinTableIndex][1];
//	TIM1->CCR3 = sin_arr[sinTableIndex][2];

	// Increment position in sine table
	sinTableIndex++;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <TIM4_IRQHandler+0xe4>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <TIM4_IRQHandler+0xe4>)
 80015cc:	801a      	strh	r2, [r3, #0]
	if(sinTableIndex > STEPS_NUM-1) sinTableIndex = 0;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <TIM4_IRQHandler+0xe4>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	2bc7      	cmp	r3, #199	; 0xc7
 80015d4:	d902      	bls.n	80015dc <TIM4_IRQHandler+0xd4>
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <TIM4_IRQHandler+0xe4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40000800 	.word	0x40000800
 80015ec:	2000003a 	.word	0x2000003a
 80015f0:	080023d4 	.word	0x080023d4
 80015f4:	80808081 	.word	0x80808081
 80015f8:	40012c00 	.word	0x40012c00

080015fc <Encoder_Turn>:
							   .Loop          = &Encoder_Loop,
							   .Rotation      = &Encoder_Turn};

static uint8_t EncoderStateReg = ENCODER_NO_TURN;//Регистр состияния энкодера.
//-----------------------------------------------------------------------------
static void Encoder_Turn(uint16_t *parameter, uint16_t min, uint16_t max){
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	803b      	strh	r3, [r7, #0]

	//--------------------
	switch(EncoderStateReg){
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <Encoder_Turn+0x74>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d002      	beq.n	800161a <Encoder_Turn+0x1e>
 8001614:	2b03      	cmp	r3, #3
 8001616:	d013      	beq.n	8001640 <Encoder_Turn+0x44>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
			EncoderStateReg = ENCODER_NO_TURN;
		break;
		//-----------
		default:
		break;	
 8001618:	e025      	b.n	8001666 <Encoder_Turn+0x6a>
			if ((*parameter) < max)(*parameter)++;    //Проверка на  максимум.
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	883a      	ldrh	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d906      	bls.n	8001632 <Encoder_Turn+0x36>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	801a      	strh	r2, [r3, #0]
 8001630:	e002      	b.n	8001638 <Encoder_Turn+0x3c>
			else                   (*parameter) = min;//Закольцовывание редактирования параметра.
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	887a      	ldrh	r2, [r7, #2]
 8001636:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <Encoder_Turn+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
		break;
 800163e:	e012      	b.n	8001666 <Encoder_Turn+0x6a>
			if ((*parameter) > min)(*parameter)--;    //Проверка на минимум.
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	887a      	ldrh	r2, [r7, #2]
 8001646:	429a      	cmp	r2, r3
 8001648:	d206      	bcs.n	8001658 <Encoder_Turn+0x5c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	3b01      	subs	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	801a      	strh	r2, [r3, #0]
 8001656:	e002      	b.n	800165e <Encoder_Turn+0x62>
			else                   (*parameter) = max;//Закольцовывание редактирования параметра.
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	883a      	ldrh	r2, [r7, #0]
 800165c:	801a      	strh	r2, [r3, #0]
			EncoderStateReg = ENCODER_NO_TURN;
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <Encoder_Turn+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
		break;
 8001664:	bf00      	nop
		//-----------
	}
	//--------------------	
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	200004ec 	.word	0x200004ec

08001674 <Encoder_Loop>:
//-----------------------------------------------------------------------------
/*Когда энкодер не вращают на обоих его выводах(A и В) единицы(внутряння подтяжка МК).Это состояние 3 энкодера - начальное состояние энкодера.
*Так-же начальным состоянием может быть  состояние энкодера когда А и В ровны 0.
*Когда вращаю вправо, то после состояния 3 энкодер передет в состояние 1 (А=1, В=0).
*Когда вращают влево, то после состояния 3 энкодер прердет в состояние 2 (А=0, В=1). */
static void Encoder_Loop(void){
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
	static uint8_t  cycle   = 0;
	static uint8_t  msCount = 0;
	static uint16_t but[3]  = {0, 0, 0};
	//--------------------
	//Обработка вращения энкодера.
	switch(EncoderStateReg){
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <Encoder_Loop+0x110>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <Encoder_Loop+0x12>
 8001680:	2b01      	cmp	r3, #1
 8001682:	d010      	beq.n	80016a6 <Encoder_Loop+0x32>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
				} 			
		break;
		//-----------
		default:
		break;	
 8001684:	e031      	b.n	80016ea <Encoder_Loop+0x76>
			if(!(EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 8001686:	4b40      	ldr	r3, [pc, #256]	; (8001788 <Encoder_Loop+0x114>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d128      	bne.n	80016e4 <Encoder_Loop+0x70>
 8001692:	4b3d      	ldr	r3, [pc, #244]	; (8001788 <Encoder_Loop+0x114>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800169a:	2b00      	cmp	r3, #0
 800169c:	d122      	bne.n	80016e4 <Encoder_Loop+0x70>
					EncoderStateReg = ENCODER_TURN;
 800169e:	4b39      	ldr	r3, [pc, #228]	; (8001784 <Encoder_Loop+0x110>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
		break;
 80016a4:	e01e      	b.n	80016e4 <Encoder_Loop+0x70>
			if( !(EncoderPORT->IDR & EncoderPinA) && (EncoderPORT->IDR & EncoderPinB))
 80016a6:	4b38      	ldr	r3, [pc, #224]	; (8001788 <Encoder_Loop+0x114>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <Encoder_Loop+0x50>
 80016b2:	4b35      	ldr	r3, [pc, #212]	; (8001788 <Encoder_Loop+0x114>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <Encoder_Loop+0x50>
					EncoderStateReg = ENCODER_TURN_RIGHT;//щелчок вправо.
 80016be:	4b31      	ldr	r3, [pc, #196]	; (8001784 <Encoder_Loop+0x110>)
 80016c0:	2202      	movs	r2, #2
 80016c2:	701a      	strb	r2, [r3, #0]
		  if( (EncoderPORT->IDR & EncoderPinA) && !(EncoderPORT->IDR & EncoderPinB))
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <Encoder_Loop+0x114>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00b      	beq.n	80016e8 <Encoder_Loop+0x74>
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <Encoder_Loop+0x114>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <Encoder_Loop+0x74>
			  	  	EncoderStateReg = ENCODER_TURN_LEFT;//щелчок влево.
 80016dc:	4b29      	ldr	r3, [pc, #164]	; (8001784 <Encoder_Loop+0x110>)
 80016de:	2203      	movs	r2, #3
 80016e0:	701a      	strb	r2, [r3, #0]
		break;
 80016e2:	e001      	b.n	80016e8 <Encoder_Loop+0x74>
		break;
 80016e4:	bf00      	nop
 80016e6:	e000      	b.n	80016ea <Encoder_Loop+0x76>
		break;
 80016e8:	bf00      	nop
		//-----------		
	}
	//--------------------
	//Опрос кнопки энкодера.
	if(++msCount >= ENCODER_BUTTON_TIMEOUT)
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <Encoder_Loop+0x118>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b26      	ldr	r3, [pc, #152]	; (800178c <Encoder_Loop+0x118>)
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <Encoder_Loop+0x118>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b09      	cmp	r3, #9
 80016fc:	d93d      	bls.n	800177a <Encoder_Loop+0x106>
		{
		  msCount = 0;//сброс счетчика
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <Encoder_Loop+0x118>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
		  //-----------
			if(cycle < 3)
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <Encoder_Loop+0x11c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d811      	bhi.n	8001730 <Encoder_Loop+0xbc>
				{
					but[cycle] = EncoderPORT->IDR & EncoderButtonPin;//Считывание состояние вывода.
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <Encoder_Loop+0x114>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <Encoder_Loop+0x11c>)
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171a:	b299      	uxth	r1, r3
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <Encoder_Loop+0x120>)
 800171e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					cycle++;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <Encoder_Loop+0x11c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <Encoder_Loop+0x11c>)
 800172c:	701a      	strb	r2, [r3, #0]
					else EncoderStr.ButtonIsPress = 0;
				}
			//-----------
		}
	//--------------------
}
 800172e:	e024      	b.n	800177a <Encoder_Loop+0x106>
					cycle = 0;
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <Encoder_Loop+0x11c>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
					if(~((but[0] & but[1]) | (but[1] & but[2]) | (but[0] & but[2])) & EncoderButtonPin) 
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <Encoder_Loop+0x120>)
 8001738:	885a      	ldrh	r2, [r3, #2]
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <Encoder_Loop+0x120>)
 800173c:	8819      	ldrh	r1, [r3, #0]
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <Encoder_Loop+0x120>)
 8001740:	889b      	ldrh	r3, [r3, #4]
 8001742:	430b      	orrs	r3, r1
 8001744:	b29b      	uxth	r3, r3
 8001746:	4013      	ands	r3, r2
 8001748:	b29a      	uxth	r2, r3
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <Encoder_Loop+0x120>)
 800174c:	8819      	ldrh	r1, [r3, #0]
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <Encoder_Loop+0x120>)
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	400b      	ands	r3, r1
 8001754:	b29b      	uxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b29b      	uxth	r3, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <Encoder_Loop+0xfc>
							 EncoderStr.ButtonIsPress = 1;
 8001764:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <Encoder_Loop+0x124>)
 8001766:	7813      	ldrb	r3, [r2, #0]
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	7013      	strb	r3, [r2, #0]
}
 800176e:	e004      	b.n	800177a <Encoder_Loop+0x106>
					else EncoderStr.ButtonIsPress = 0;
 8001770:	4a09      	ldr	r2, [pc, #36]	; (8001798 <Encoder_Loop+0x124>)
 8001772:	7813      	ldrb	r3, [r2, #0]
 8001774:	f36f 0300 	bfc	r3, #0, #1
 8001778:	7013      	strb	r3, [r2, #0]
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	200004ec 	.word	0x200004ec
 8001788:	40011000 	.word	0x40011000
 800178c:	200004ed 	.word	0x200004ed
 8001790:	200004ee 	.word	0x200004ee
 8001794:	200004f0 	.word	0x200004f0
 8001798:	20000000 	.word	0x20000000

0800179c <Encoder>:
	//Input pull-up
	GPIOB->CRH |= (GPIO_CRH_CNF12_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_CNF10_1);//
	GPIOB->ODR |= (GPIO_ODR_ODR12   | GPIO_ODR_ODR11   | GPIO_ODR_ODR10);	 //
}
//-----------------------------------------------------------------------------
Encoder_t* Encoder(void){
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

	return &EncoderStr;
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <Encoder+0x10>)
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000000 	.word	0x20000000

080017b0 <Reset_Handler>:
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <LoopForever+0x2>)
 80017b2:	4685      	mov	sp, r0
 80017b4:	f7ff fb0c 	bl	8000dd0 <SystemInit>
 80017b8:	480c      	ldr	r0, [pc, #48]	; (80017ec <LoopForever+0x6>)
 80017ba:	490d      	ldr	r1, [pc, #52]	; (80017f0 <LoopForever+0xa>)
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <LoopForever+0xe>)
 80017be:	2300      	movs	r3, #0
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:
 80017c2:	58d4      	ldr	r4, [r2, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:
 80017c8:	18c4      	adds	r4, r0, r3
 80017ca:	428c      	cmp	r4, r1
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <LoopForever+0x12>)
 80017d0:	4c0a      	ldr	r4, [pc, #40]	; (80017fc <LoopForever+0x16>)
 80017d2:	2300      	movs	r3, #0
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:
 80017da:	42a2      	cmp	r2, r4
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>
 80017de:	f000 f811 	bl	8001804 <__libc_init_array>
 80017e2:	f7ff fe6b 	bl	80014bc <main>

080017e6 <LoopForever>:
 80017e6:	e7fe      	b.n	80017e6 <LoopForever>
 80017e8:	20005000 	.word	0x20005000
 80017ec:	20000000 	.word	0x20000000
 80017f0:	2000000c 	.word	0x2000000c
 80017f4:	080029ec 	.word	0x080029ec
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	200004f8 	.word	0x200004f8

08001800 <ADC1_2_IRQHandler>:
 8001800:	e7fe      	b.n	8001800 <ADC1_2_IRQHandler>
	...

08001804 <__libc_init_array>:
 8001804:	b570      	push	{r4, r5, r6, lr}
 8001806:	2500      	movs	r5, #0
 8001808:	4e0c      	ldr	r6, [pc, #48]	; (800183c <__libc_init_array+0x38>)
 800180a:	4c0d      	ldr	r4, [pc, #52]	; (8001840 <__libc_init_array+0x3c>)
 800180c:	1ba4      	subs	r4, r4, r6
 800180e:	10a4      	asrs	r4, r4, #2
 8001810:	42a5      	cmp	r5, r4
 8001812:	d109      	bne.n	8001828 <__libc_init_array+0x24>
 8001814:	f000 fdd2 	bl	80023bc <_init>
 8001818:	2500      	movs	r5, #0
 800181a:	4e0a      	ldr	r6, [pc, #40]	; (8001844 <__libc_init_array+0x40>)
 800181c:	4c0a      	ldr	r4, [pc, #40]	; (8001848 <__libc_init_array+0x44>)
 800181e:	1ba4      	subs	r4, r4, r6
 8001820:	10a4      	asrs	r4, r4, #2
 8001822:	42a5      	cmp	r5, r4
 8001824:	d105      	bne.n	8001832 <__libc_init_array+0x2e>
 8001826:	bd70      	pop	{r4, r5, r6, pc}
 8001828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800182c:	4798      	blx	r3
 800182e:	3501      	adds	r5, #1
 8001830:	e7ee      	b.n	8001810 <__libc_init_array+0xc>
 8001832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001836:	4798      	blx	r3
 8001838:	3501      	adds	r5, #1
 800183a:	e7f2      	b.n	8001822 <__libc_init_array+0x1e>
 800183c:	080029e4 	.word	0x080029e4
 8001840:	080029e4 	.word	0x080029e4
 8001844:	080029e4 	.word	0x080029e4
 8001848:	080029e8 	.word	0x080029e8

0800184c <sinf>:
 800184c:	b507      	push	{r0, r1, r2, lr}
 800184e:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <sinf+0x68>)
 8001850:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8001854:	4293      	cmp	r3, r2
 8001856:	4601      	mov	r1, r0
 8001858:	dc04      	bgt.n	8001864 <sinf+0x18>
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	f000 fca1 	bl	80021a4 <__kernel_sinf>
 8001862:	e004      	b.n	800186e <sinf+0x22>
 8001864:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8001868:	db04      	blt.n	8001874 <sinf+0x28>
 800186a:	f7fe fe91 	bl	8000590 <__aeabi_fsub>
 800186e:	b003      	add	sp, #12
 8001870:	f85d fb04 	ldr.w	pc, [sp], #4
 8001874:	4669      	mov	r1, sp
 8001876:	f000 f81f 	bl	80018b8 <__ieee754_rem_pio2f>
 800187a:	f000 0003 	and.w	r0, r0, #3
 800187e:	2801      	cmp	r0, #1
 8001880:	d006      	beq.n	8001890 <sinf+0x44>
 8001882:	2802      	cmp	r0, #2
 8001884:	d009      	beq.n	800189a <sinf+0x4e>
 8001886:	b980      	cbnz	r0, 80018aa <sinf+0x5e>
 8001888:	2201      	movs	r2, #1
 800188a:	9901      	ldr	r1, [sp, #4]
 800188c:	9800      	ldr	r0, [sp, #0]
 800188e:	e7e6      	b.n	800185e <sinf+0x12>
 8001890:	9901      	ldr	r1, [sp, #4]
 8001892:	9800      	ldr	r0, [sp, #0]
 8001894:	f000 f968 	bl	8001b68 <__kernel_cosf>
 8001898:	e7e9      	b.n	800186e <sinf+0x22>
 800189a:	2201      	movs	r2, #1
 800189c:	9901      	ldr	r1, [sp, #4]
 800189e:	9800      	ldr	r0, [sp, #0]
 80018a0:	f000 fc80 	bl	80021a4 <__kernel_sinf>
 80018a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80018a8:	e7e1      	b.n	800186e <sinf+0x22>
 80018aa:	9901      	ldr	r1, [sp, #4]
 80018ac:	9800      	ldr	r0, [sp, #0]
 80018ae:	f000 f95b 	bl	8001b68 <__kernel_cosf>
 80018b2:	e7f7      	b.n	80018a4 <sinf+0x58>
 80018b4:	3f490fd8 	.word	0x3f490fd8

080018b8 <__ieee754_rem_pio2f>:
 80018b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018bc:	4a9d      	ldr	r2, [pc, #628]	; (8001b34 <__ieee754_rem_pio2f+0x27c>)
 80018be:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80018c2:	4295      	cmp	r5, r2
 80018c4:	b087      	sub	sp, #28
 80018c6:	460c      	mov	r4, r1
 80018c8:	4607      	mov	r7, r0
 80018ca:	dc04      	bgt.n	80018d6 <__ieee754_rem_pio2f+0x1e>
 80018cc:	2300      	movs	r3, #0
 80018ce:	6020      	str	r0, [r4, #0]
 80018d0:	604b      	str	r3, [r1, #4]
 80018d2:	2600      	movs	r6, #0
 80018d4:	e01a      	b.n	800190c <__ieee754_rem_pio2f+0x54>
 80018d6:	4a98      	ldr	r2, [pc, #608]	; (8001b38 <__ieee754_rem_pio2f+0x280>)
 80018d8:	4295      	cmp	r5, r2
 80018da:	dc4b      	bgt.n	8001974 <__ieee754_rem_pio2f+0xbc>
 80018dc:	2800      	cmp	r0, #0
 80018de:	f025 050f 	bic.w	r5, r5, #15
 80018e2:	4996      	ldr	r1, [pc, #600]	; (8001b3c <__ieee754_rem_pio2f+0x284>)
 80018e4:	4e96      	ldr	r6, [pc, #600]	; (8001b40 <__ieee754_rem_pio2f+0x288>)
 80018e6:	dd23      	ble.n	8001930 <__ieee754_rem_pio2f+0x78>
 80018e8:	f7fe fe52 	bl	8000590 <__aeabi_fsub>
 80018ec:	42b5      	cmp	r5, r6
 80018ee:	4607      	mov	r7, r0
 80018f0:	d010      	beq.n	8001914 <__ieee754_rem_pio2f+0x5c>
 80018f2:	4994      	ldr	r1, [pc, #592]	; (8001b44 <__ieee754_rem_pio2f+0x28c>)
 80018f4:	f7fe fe4c 	bl	8000590 <__aeabi_fsub>
 80018f8:	4601      	mov	r1, r0
 80018fa:	6020      	str	r0, [r4, #0]
 80018fc:	4638      	mov	r0, r7
 80018fe:	f7fe fe47 	bl	8000590 <__aeabi_fsub>
 8001902:	4990      	ldr	r1, [pc, #576]	; (8001b44 <__ieee754_rem_pio2f+0x28c>)
 8001904:	f7fe fe44 	bl	8000590 <__aeabi_fsub>
 8001908:	2601      	movs	r6, #1
 800190a:	6060      	str	r0, [r4, #4]
 800190c:	4630      	mov	r0, r6
 800190e:	b007      	add	sp, #28
 8001910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001914:	498c      	ldr	r1, [pc, #560]	; (8001b48 <__ieee754_rem_pio2f+0x290>)
 8001916:	f7fe fe3b 	bl	8000590 <__aeabi_fsub>
 800191a:	498c      	ldr	r1, [pc, #560]	; (8001b4c <__ieee754_rem_pio2f+0x294>)
 800191c:	4605      	mov	r5, r0
 800191e:	f7fe fe37 	bl	8000590 <__aeabi_fsub>
 8001922:	4601      	mov	r1, r0
 8001924:	6020      	str	r0, [r4, #0]
 8001926:	4628      	mov	r0, r5
 8001928:	f7fe fe32 	bl	8000590 <__aeabi_fsub>
 800192c:	4987      	ldr	r1, [pc, #540]	; (8001b4c <__ieee754_rem_pio2f+0x294>)
 800192e:	e7e9      	b.n	8001904 <__ieee754_rem_pio2f+0x4c>
 8001930:	f7fe fe30 	bl	8000594 <__addsf3>
 8001934:	42b5      	cmp	r5, r6
 8001936:	4607      	mov	r7, r0
 8001938:	d00e      	beq.n	8001958 <__ieee754_rem_pio2f+0xa0>
 800193a:	4982      	ldr	r1, [pc, #520]	; (8001b44 <__ieee754_rem_pio2f+0x28c>)
 800193c:	f7fe fe2a 	bl	8000594 <__addsf3>
 8001940:	4601      	mov	r1, r0
 8001942:	6020      	str	r0, [r4, #0]
 8001944:	4638      	mov	r0, r7
 8001946:	f7fe fe23 	bl	8000590 <__aeabi_fsub>
 800194a:	497e      	ldr	r1, [pc, #504]	; (8001b44 <__ieee754_rem_pio2f+0x28c>)
 800194c:	f7fe fe22 	bl	8000594 <__addsf3>
 8001950:	f04f 36ff 	mov.w	r6, #4294967295
 8001954:	6060      	str	r0, [r4, #4]
 8001956:	e7d9      	b.n	800190c <__ieee754_rem_pio2f+0x54>
 8001958:	497b      	ldr	r1, [pc, #492]	; (8001b48 <__ieee754_rem_pio2f+0x290>)
 800195a:	f7fe fe1b 	bl	8000594 <__addsf3>
 800195e:	497b      	ldr	r1, [pc, #492]	; (8001b4c <__ieee754_rem_pio2f+0x294>)
 8001960:	4605      	mov	r5, r0
 8001962:	f7fe fe17 	bl	8000594 <__addsf3>
 8001966:	4601      	mov	r1, r0
 8001968:	6020      	str	r0, [r4, #0]
 800196a:	4628      	mov	r0, r5
 800196c:	f7fe fe10 	bl	8000590 <__aeabi_fsub>
 8001970:	4976      	ldr	r1, [pc, #472]	; (8001b4c <__ieee754_rem_pio2f+0x294>)
 8001972:	e7eb      	b.n	800194c <__ieee754_rem_pio2f+0x94>
 8001974:	4a76      	ldr	r2, [pc, #472]	; (8001b50 <__ieee754_rem_pio2f+0x298>)
 8001976:	4295      	cmp	r5, r2
 8001978:	f300 808c 	bgt.w	8001a94 <__ieee754_rem_pio2f+0x1dc>
 800197c:	f000 fc88 	bl	8002290 <fabsf>
 8001980:	4974      	ldr	r1, [pc, #464]	; (8001b54 <__ieee754_rem_pio2f+0x29c>)
 8001982:	4680      	mov	r8, r0
 8001984:	f7fe ff0e 	bl	80007a4 <__aeabi_fmul>
 8001988:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800198c:	f7fe fe02 	bl	8000594 <__addsf3>
 8001990:	f7ff f8ce 	bl	8000b30 <__aeabi_f2iz>
 8001994:	4606      	mov	r6, r0
 8001996:	f7fe feb1 	bl	80006fc <__aeabi_i2f>
 800199a:	4968      	ldr	r1, [pc, #416]	; (8001b3c <__ieee754_rem_pio2f+0x284>)
 800199c:	4682      	mov	sl, r0
 800199e:	f7fe ff01 	bl	80007a4 <__aeabi_fmul>
 80019a2:	4601      	mov	r1, r0
 80019a4:	4640      	mov	r0, r8
 80019a6:	f7fe fdf3 	bl	8000590 <__aeabi_fsub>
 80019aa:	4966      	ldr	r1, [pc, #408]	; (8001b44 <__ieee754_rem_pio2f+0x28c>)
 80019ac:	4680      	mov	r8, r0
 80019ae:	4650      	mov	r0, sl
 80019b0:	f7fe fef8 	bl	80007a4 <__aeabi_fmul>
 80019b4:	2e1f      	cmp	r6, #31
 80019b6:	4681      	mov	r9, r0
 80019b8:	dc0c      	bgt.n	80019d4 <__ieee754_rem_pio2f+0x11c>
 80019ba:	4a67      	ldr	r2, [pc, #412]	; (8001b58 <__ieee754_rem_pio2f+0x2a0>)
 80019bc:	1e71      	subs	r1, r6, #1
 80019be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80019c2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d004      	beq.n	80019d4 <__ieee754_rem_pio2f+0x11c>
 80019ca:	4649      	mov	r1, r9
 80019cc:	4640      	mov	r0, r8
 80019ce:	f7fe fddf 	bl	8000590 <__aeabi_fsub>
 80019d2:	e009      	b.n	80019e8 <__ieee754_rem_pio2f+0x130>
 80019d4:	4649      	mov	r1, r9
 80019d6:	4640      	mov	r0, r8
 80019d8:	f7fe fdda 	bl	8000590 <__aeabi_fsub>
 80019dc:	15ed      	asrs	r5, r5, #23
 80019de:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80019e2:	1aeb      	subs	r3, r5, r3
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	dc01      	bgt.n	80019ec <__ieee754_rem_pio2f+0x134>
 80019e8:	6020      	str	r0, [r4, #0]
 80019ea:	e024      	b.n	8001a36 <__ieee754_rem_pio2f+0x17e>
 80019ec:	4956      	ldr	r1, [pc, #344]	; (8001b48 <__ieee754_rem_pio2f+0x290>)
 80019ee:	4650      	mov	r0, sl
 80019f0:	f7fe fed8 	bl	80007a4 <__aeabi_fmul>
 80019f4:	4681      	mov	r9, r0
 80019f6:	4601      	mov	r1, r0
 80019f8:	4640      	mov	r0, r8
 80019fa:	f7fe fdc9 	bl	8000590 <__aeabi_fsub>
 80019fe:	4601      	mov	r1, r0
 8001a00:	4683      	mov	fp, r0
 8001a02:	4640      	mov	r0, r8
 8001a04:	f7fe fdc4 	bl	8000590 <__aeabi_fsub>
 8001a08:	4649      	mov	r1, r9
 8001a0a:	f7fe fdc1 	bl	8000590 <__aeabi_fsub>
 8001a0e:	4680      	mov	r8, r0
 8001a10:	494e      	ldr	r1, [pc, #312]	; (8001b4c <__ieee754_rem_pio2f+0x294>)
 8001a12:	4650      	mov	r0, sl
 8001a14:	f7fe fec6 	bl	80007a4 <__aeabi_fmul>
 8001a18:	4641      	mov	r1, r8
 8001a1a:	f7fe fdb9 	bl	8000590 <__aeabi_fsub>
 8001a1e:	4601      	mov	r1, r0
 8001a20:	4681      	mov	r9, r0
 8001a22:	4658      	mov	r0, fp
 8001a24:	f7fe fdb4 	bl	8000590 <__aeabi_fsub>
 8001a28:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8001a2c:	1aed      	subs	r5, r5, r3
 8001a2e:	2d19      	cmp	r5, #25
 8001a30:	dc15      	bgt.n	8001a5e <__ieee754_rem_pio2f+0x1a6>
 8001a32:	46d8      	mov	r8, fp
 8001a34:	6020      	str	r0, [r4, #0]
 8001a36:	6825      	ldr	r5, [r4, #0]
 8001a38:	4640      	mov	r0, r8
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	f7fe fda8 	bl	8000590 <__aeabi_fsub>
 8001a40:	4649      	mov	r1, r9
 8001a42:	f7fe fda5 	bl	8000590 <__aeabi_fsub>
 8001a46:	2f00      	cmp	r7, #0
 8001a48:	6060      	str	r0, [r4, #4]
 8001a4a:	f6bf af5f 	bge.w	800190c <__ieee754_rem_pio2f+0x54>
 8001a4e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8001a52:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8001a56:	6025      	str	r5, [r4, #0]
 8001a58:	6060      	str	r0, [r4, #4]
 8001a5a:	4276      	negs	r6, r6
 8001a5c:	e756      	b.n	800190c <__ieee754_rem_pio2f+0x54>
 8001a5e:	493f      	ldr	r1, [pc, #252]	; (8001b5c <__ieee754_rem_pio2f+0x2a4>)
 8001a60:	4650      	mov	r0, sl
 8001a62:	f7fe fe9f 	bl	80007a4 <__aeabi_fmul>
 8001a66:	4605      	mov	r5, r0
 8001a68:	4601      	mov	r1, r0
 8001a6a:	4658      	mov	r0, fp
 8001a6c:	f7fe fd90 	bl	8000590 <__aeabi_fsub>
 8001a70:	4601      	mov	r1, r0
 8001a72:	4680      	mov	r8, r0
 8001a74:	4658      	mov	r0, fp
 8001a76:	f7fe fd8b 	bl	8000590 <__aeabi_fsub>
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7fe fd88 	bl	8000590 <__aeabi_fsub>
 8001a80:	4605      	mov	r5, r0
 8001a82:	4937      	ldr	r1, [pc, #220]	; (8001b60 <__ieee754_rem_pio2f+0x2a8>)
 8001a84:	4650      	mov	r0, sl
 8001a86:	f7fe fe8d 	bl	80007a4 <__aeabi_fmul>
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f7fe fd80 	bl	8000590 <__aeabi_fsub>
 8001a90:	4681      	mov	r9, r0
 8001a92:	e79a      	b.n	80019ca <__ieee754_rem_pio2f+0x112>
 8001a94:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8001a98:	db05      	blt.n	8001aa6 <__ieee754_rem_pio2f+0x1ee>
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	f7fe fd78 	bl	8000590 <__aeabi_fsub>
 8001aa0:	6060      	str	r0, [r4, #4]
 8001aa2:	6020      	str	r0, [r4, #0]
 8001aa4:	e715      	b.n	80018d2 <__ieee754_rem_pio2f+0x1a>
 8001aa6:	15ee      	asrs	r6, r5, #23
 8001aa8:	3e86      	subs	r6, #134	; 0x86
 8001aaa:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f7ff f83e 	bl	8000b30 <__aeabi_f2iz>
 8001ab4:	f7fe fe22 	bl	80006fc <__aeabi_i2f>
 8001ab8:	4601      	mov	r1, r0
 8001aba:	9003      	str	r0, [sp, #12]
 8001abc:	4628      	mov	r0, r5
 8001abe:	f7fe fd67 	bl	8000590 <__aeabi_fsub>
 8001ac2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001ac6:	f7fe fe6d 	bl	80007a4 <__aeabi_fmul>
 8001aca:	4680      	mov	r8, r0
 8001acc:	f7ff f830 	bl	8000b30 <__aeabi_f2iz>
 8001ad0:	f7fe fe14 	bl	80006fc <__aeabi_i2f>
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	9004      	str	r0, [sp, #16]
 8001ad8:	4605      	mov	r5, r0
 8001ada:	4640      	mov	r0, r8
 8001adc:	f7fe fd58 	bl	8000590 <__aeabi_fsub>
 8001ae0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001ae4:	f7fe fe5e 	bl	80007a4 <__aeabi_fmul>
 8001ae8:	2100      	movs	r1, #0
 8001aea:	9005      	str	r0, [sp, #20]
 8001aec:	f7fe ffee 	bl	8000acc <__aeabi_fcmpeq>
 8001af0:	b1e8      	cbz	r0, 8001b2e <__ieee754_rem_pio2f+0x276>
 8001af2:	2100      	movs	r1, #0
 8001af4:	4628      	mov	r0, r5
 8001af6:	f7fe ffe9 	bl	8000acc <__aeabi_fcmpeq>
 8001afa:	2800      	cmp	r0, #0
 8001afc:	bf14      	ite	ne
 8001afe:	2301      	movne	r3, #1
 8001b00:	2302      	moveq	r3, #2
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <__ieee754_rem_pio2f+0x2ac>)
 8001b04:	4621      	mov	r1, r4
 8001b06:	9201      	str	r2, [sp, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	a803      	add	r0, sp, #12
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	4632      	mov	r2, r6
 8001b10:	f000 f8aa 	bl	8001c68 <__kernel_rem_pio2f>
 8001b14:	2f00      	cmp	r7, #0
 8001b16:	4606      	mov	r6, r0
 8001b18:	f6bf aef8 	bge.w	800190c <__ieee754_rem_pio2f+0x54>
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001b22:	6023      	str	r3, [r4, #0]
 8001b24:	6863      	ldr	r3, [r4, #4]
 8001b26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001b2a:	6063      	str	r3, [r4, #4]
 8001b2c:	e795      	b.n	8001a5a <__ieee754_rem_pio2f+0x1a2>
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e7e7      	b.n	8001b02 <__ieee754_rem_pio2f+0x24a>
 8001b32:	bf00      	nop
 8001b34:	3f490fd8 	.word	0x3f490fd8
 8001b38:	4016cbe3 	.word	0x4016cbe3
 8001b3c:	3fc90f80 	.word	0x3fc90f80
 8001b40:	3fc90fd0 	.word	0x3fc90fd0
 8001b44:	37354443 	.word	0x37354443
 8001b48:	37354400 	.word	0x37354400
 8001b4c:	2e85a308 	.word	0x2e85a308
 8001b50:	43490f80 	.word	0x43490f80
 8001b54:	3f22f984 	.word	0x3f22f984
 8001b58:	08002614 	.word	0x08002614
 8001b5c:	2e85a300 	.word	0x2e85a300
 8001b60:	248d3132 	.word	0x248d3132
 8001b64:	08002694 	.word	0x08002694

08001b68 <__kernel_cosf>:
 8001b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b6c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8001b70:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8001b74:	4606      	mov	r6, r0
 8001b76:	4688      	mov	r8, r1
 8001b78:	da03      	bge.n	8001b82 <__kernel_cosf+0x1a>
 8001b7a:	f7fe ffd9 	bl	8000b30 <__aeabi_f2iz>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d05c      	beq.n	8001c3c <__kernel_cosf+0xd4>
 8001b82:	4631      	mov	r1, r6
 8001b84:	4630      	mov	r0, r6
 8001b86:	f7fe fe0d 	bl	80007a4 <__aeabi_fmul>
 8001b8a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001b8e:	4605      	mov	r5, r0
 8001b90:	f7fe fe08 	bl	80007a4 <__aeabi_fmul>
 8001b94:	492b      	ldr	r1, [pc, #172]	; (8001c44 <__kernel_cosf+0xdc>)
 8001b96:	4607      	mov	r7, r0
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f7fe fe03 	bl	80007a4 <__aeabi_fmul>
 8001b9e:	492a      	ldr	r1, [pc, #168]	; (8001c48 <__kernel_cosf+0xe0>)
 8001ba0:	f7fe fcf8 	bl	8000594 <__addsf3>
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f7fe fdfd 	bl	80007a4 <__aeabi_fmul>
 8001baa:	4928      	ldr	r1, [pc, #160]	; (8001c4c <__kernel_cosf+0xe4>)
 8001bac:	f7fe fcf0 	bl	8000590 <__aeabi_fsub>
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7fe fdf7 	bl	80007a4 <__aeabi_fmul>
 8001bb6:	4926      	ldr	r1, [pc, #152]	; (8001c50 <__kernel_cosf+0xe8>)
 8001bb8:	f7fe fcec 	bl	8000594 <__addsf3>
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	f7fe fdf1 	bl	80007a4 <__aeabi_fmul>
 8001bc2:	4924      	ldr	r1, [pc, #144]	; (8001c54 <__kernel_cosf+0xec>)
 8001bc4:	f7fe fce4 	bl	8000590 <__aeabi_fsub>
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fdeb 	bl	80007a4 <__aeabi_fmul>
 8001bce:	4922      	ldr	r1, [pc, #136]	; (8001c58 <__kernel_cosf+0xf0>)
 8001bd0:	f7fe fce0 	bl	8000594 <__addsf3>
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	f7fe fde5 	bl	80007a4 <__aeabi_fmul>
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fde2 	bl	80007a4 <__aeabi_fmul>
 8001be0:	4641      	mov	r1, r8
 8001be2:	4605      	mov	r5, r0
 8001be4:	4630      	mov	r0, r6
 8001be6:	f7fe fddd 	bl	80007a4 <__aeabi_fmul>
 8001bea:	4601      	mov	r1, r0
 8001bec:	4628      	mov	r0, r5
 8001bee:	f7fe fccf 	bl	8000590 <__aeabi_fsub>
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <__kernel_cosf+0xf4>)
 8001bf4:	4605      	mov	r5, r0
 8001bf6:	429c      	cmp	r4, r3
 8001bf8:	dc0a      	bgt.n	8001c10 <__kernel_cosf+0xa8>
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	f7fe fcc7 	bl	8000590 <__aeabi_fsub>
 8001c02:	4601      	mov	r1, r0
 8001c04:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001c08:	f7fe fcc2 	bl	8000590 <__aeabi_fsub>
 8001c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <__kernel_cosf+0xf8>)
 8001c12:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001c16:	429c      	cmp	r4, r3
 8001c18:	bfcc      	ite	gt
 8001c1a:	4c12      	ldrgt	r4, [pc, #72]	; (8001c64 <__kernel_cosf+0xfc>)
 8001c1c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8001c20:	4621      	mov	r1, r4
 8001c22:	f7fe fcb5 	bl	8000590 <__aeabi_fsub>
 8001c26:	4621      	mov	r1, r4
 8001c28:	4606      	mov	r6, r0
 8001c2a:	4638      	mov	r0, r7
 8001c2c:	f7fe fcb0 	bl	8000590 <__aeabi_fsub>
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fcad 	bl	8000590 <__aeabi_fsub>
 8001c36:	4601      	mov	r1, r0
 8001c38:	4630      	mov	r0, r6
 8001c3a:	e7e5      	b.n	8001c08 <__kernel_cosf+0xa0>
 8001c3c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001c40:	e7e4      	b.n	8001c0c <__kernel_cosf+0xa4>
 8001c42:	bf00      	nop
 8001c44:	ad47d74e 	.word	0xad47d74e
 8001c48:	310f74f6 	.word	0x310f74f6
 8001c4c:	3493f27c 	.word	0x3493f27c
 8001c50:	37d00d01 	.word	0x37d00d01
 8001c54:	3ab60b61 	.word	0x3ab60b61
 8001c58:	3d2aaaab 	.word	0x3d2aaaab
 8001c5c:	3e999999 	.word	0x3e999999
 8001c60:	3f480000 	.word	0x3f480000
 8001c64:	3e900000 	.word	0x3e900000

08001c68 <__kernel_rem_pio2f>:
 8001c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c6c:	b0d9      	sub	sp, #356	; 0x164
 8001c6e:	9304      	str	r3, [sp, #16]
 8001c70:	9101      	str	r1, [sp, #4]
 8001c72:	4bc3      	ldr	r3, [pc, #780]	; (8001f80 <__kernel_rem_pio2f+0x318>)
 8001c74:	9962      	ldr	r1, [sp, #392]	; 0x188
 8001c76:	1ed4      	subs	r4, r2, #3
 8001c78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c7c:	2500      	movs	r5, #0
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	9b04      	ldr	r3, [sp, #16]
 8001c82:	f04f 0a00 	mov.w	sl, #0
 8001c86:	3b01      	subs	r3, #1
 8001c88:	9303      	str	r3, [sp, #12]
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	fb94 f4f3 	sdiv	r4, r4, r3
 8001c90:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8001c94:	1c66      	adds	r6, r4, #1
 8001c96:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8001c9a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8001c9e:	eb03 0802 	add.w	r8, r3, r2
 8001ca2:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8001ca4:	1aa7      	subs	r7, r4, r2
 8001ca6:	9005      	str	r0, [sp, #20]
 8001ca8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8001cac:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8001cb0:	4545      	cmp	r5, r8
 8001cb2:	dd7f      	ble.n	8001db4 <__kernel_rem_pio2f+0x14c>
 8001cb4:	f04f 0800 	mov.w	r8, #0
 8001cb8:	f04f 0a00 	mov.w	sl, #0
 8001cbc:	f06f 0b03 	mvn.w	fp, #3
 8001cc0:	9b04      	ldr	r3, [sp, #16]
 8001cc2:	aa1c      	add	r2, sp, #112	; 0x70
 8001cc4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8001cc8:	ab44      	add	r3, sp, #272	; 0x110
 8001cca:	9a02      	ldr	r2, [sp, #8]
 8001ccc:	4590      	cmp	r8, r2
 8001cce:	f340 8097 	ble.w	8001e00 <__kernel_rem_pio2f+0x198>
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	aa08      	add	r2, sp, #32
 8001cd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001cda:	9307      	str	r3, [sp, #28]
 8001cdc:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8001cde:	9f02      	ldr	r7, [sp, #8]
 8001ce0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001ce4:	9306      	str	r3, [sp, #24]
 8001ce6:	46ba      	mov	sl, r7
 8001ce8:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8001cec:	ab58      	add	r3, sp, #352	; 0x160
 8001cee:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8001cf2:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8001cf6:	ad07      	add	r5, sp, #28
 8001cf8:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8001cfc:	f1ba 0f00 	cmp.w	sl, #0
 8001d00:	f300 8081 	bgt.w	8001e06 <__kernel_rem_pio2f+0x19e>
 8001d04:	4631      	mov	r1, r6
 8001d06:	4620      	mov	r0, r4
 8001d08:	f000 fb06 	bl	8002318 <scalbnf>
 8001d0c:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8001d10:	4604      	mov	r4, r0
 8001d12:	f7fe fd47 	bl	80007a4 <__aeabi_fmul>
 8001d16:	f000 fabf 	bl	8002298 <floorf>
 8001d1a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001d1e:	f7fe fd41 	bl	80007a4 <__aeabi_fmul>
 8001d22:	4601      	mov	r1, r0
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7fe fc33 	bl	8000590 <__aeabi_fsub>
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	f7fe ff00 	bl	8000b30 <__aeabi_f2iz>
 8001d30:	4681      	mov	r9, r0
 8001d32:	f7fe fce3 	bl	80006fc <__aeabi_i2f>
 8001d36:	4601      	mov	r1, r0
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7fe fc29 	bl	8000590 <__aeabi_fsub>
 8001d3e:	2e00      	cmp	r6, #0
 8001d40:	4604      	mov	r4, r0
 8001d42:	dd7e      	ble.n	8001e42 <__kernel_rem_pio2f+0x1da>
 8001d44:	1e7b      	subs	r3, r7, #1
 8001d46:	aa08      	add	r2, sp, #32
 8001d48:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8001d4c:	f1c6 0208 	rsb	r2, r6, #8
 8001d50:	fa45 f002 	asr.w	r0, r5, r2
 8001d54:	4481      	add	r9, r0
 8001d56:	4090      	lsls	r0, r2
 8001d58:	1a2d      	subs	r5, r5, r0
 8001d5a:	aa08      	add	r2, sp, #32
 8001d5c:	f1c6 0007 	rsb	r0, r6, #7
 8001d60:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8001d64:	4105      	asrs	r5, r0
 8001d66:	2d00      	cmp	r5, #0
 8001d68:	dd79      	ble.n	8001e5e <__kernel_rem_pio2f+0x1f6>
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4690      	mov	r8, r2
 8001d6e:	f109 0901 	add.w	r9, r9, #1
 8001d72:	4297      	cmp	r7, r2
 8001d74:	f300 80ae 	bgt.w	8001ed4 <__kernel_rem_pio2f+0x26c>
 8001d78:	2e00      	cmp	r6, #0
 8001d7a:	dd05      	ble.n	8001d88 <__kernel_rem_pio2f+0x120>
 8001d7c:	2e01      	cmp	r6, #1
 8001d7e:	f000 80c0 	beq.w	8001f02 <__kernel_rem_pio2f+0x29a>
 8001d82:	2e02      	cmp	r6, #2
 8001d84:	f000 80c7 	beq.w	8001f16 <__kernel_rem_pio2f+0x2ae>
 8001d88:	2d02      	cmp	r5, #2
 8001d8a:	d168      	bne.n	8001e5e <__kernel_rem_pio2f+0x1f6>
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001d92:	f7fe fbfd 	bl	8000590 <__aeabi_fsub>
 8001d96:	4604      	mov	r4, r0
 8001d98:	f1b8 0f00 	cmp.w	r8, #0
 8001d9c:	d05f      	beq.n	8001e5e <__kernel_rem_pio2f+0x1f6>
 8001d9e:	4631      	mov	r1, r6
 8001da0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001da4:	f000 fab8 	bl	8002318 <scalbnf>
 8001da8:	4601      	mov	r1, r0
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7fe fbf0 	bl	8000590 <__aeabi_fsub>
 8001db0:	4604      	mov	r4, r0
 8001db2:	e054      	b.n	8001e5e <__kernel_rem_pio2f+0x1f6>
 8001db4:	42ef      	cmn	r7, r5
 8001db6:	d407      	bmi.n	8001dc8 <__kernel_rem_pio2f+0x160>
 8001db8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8001dbc:	f7fe fc9e 	bl	80006fc <__aeabi_i2f>
 8001dc0:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8001dc4:	3501      	adds	r5, #1
 8001dc6:	e773      	b.n	8001cb0 <__kernel_rem_pio2f+0x48>
 8001dc8:	4650      	mov	r0, sl
 8001dca:	e7f9      	b.n	8001dc0 <__kernel_rem_pio2f+0x158>
 8001dcc:	fb0b 5207 	mla	r2, fp, r7, r5
 8001dd0:	9306      	str	r3, [sp, #24]
 8001dd2:	9b05      	ldr	r3, [sp, #20]
 8001dd4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8001dd8:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8001ddc:	f7fe fce2 	bl	80007a4 <__aeabi_fmul>
 8001de0:	4601      	mov	r1, r0
 8001de2:	4648      	mov	r0, r9
 8001de4:	f7fe fbd6 	bl	8000594 <__addsf3>
 8001de8:	4681      	mov	r9, r0
 8001dea:	9b06      	ldr	r3, [sp, #24]
 8001dec:	3701      	adds	r7, #1
 8001dee:	9a03      	ldr	r2, [sp, #12]
 8001df0:	4297      	cmp	r7, r2
 8001df2:	ddeb      	ble.n	8001dcc <__kernel_rem_pio2f+0x164>
 8001df4:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 8001df8:	3504      	adds	r5, #4
 8001dfa:	f108 0801 	add.w	r8, r8, #1
 8001dfe:	e764      	b.n	8001cca <__kernel_rem_pio2f+0x62>
 8001e00:	46d1      	mov	r9, sl
 8001e02:	2700      	movs	r7, #0
 8001e04:	e7f3      	b.n	8001dee <__kernel_rem_pio2f+0x186>
 8001e06:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7fe fcca 	bl	80007a4 <__aeabi_fmul>
 8001e10:	f7fe fe8e 	bl	8000b30 <__aeabi_f2iz>
 8001e14:	f7fe fc72 	bl	80006fc <__aeabi_i2f>
 8001e18:	4641      	mov	r1, r8
 8001e1a:	4683      	mov	fp, r0
 8001e1c:	f7fe fcc2 	bl	80007a4 <__aeabi_fmul>
 8001e20:	4601      	mov	r1, r0
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7fe fbb4 	bl	8000590 <__aeabi_fsub>
 8001e28:	f7fe fe82 	bl	8000b30 <__aeabi_f2iz>
 8001e2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001e30:	f845 0f04 	str.w	r0, [r5, #4]!
 8001e34:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8001e38:	4658      	mov	r0, fp
 8001e3a:	f7fe fbab 	bl	8000594 <__addsf3>
 8001e3e:	4604      	mov	r4, r0
 8001e40:	e75c      	b.n	8001cfc <__kernel_rem_pio2f+0x94>
 8001e42:	d105      	bne.n	8001e50 <__kernel_rem_pio2f+0x1e8>
 8001e44:	1e7b      	subs	r3, r7, #1
 8001e46:	aa08      	add	r2, sp, #32
 8001e48:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8001e4c:	122d      	asrs	r5, r5, #8
 8001e4e:	e78a      	b.n	8001d66 <__kernel_rem_pio2f+0xfe>
 8001e50:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001e54:	f7fe fe58 	bl	8000b08 <__aeabi_fcmpge>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d139      	bne.n	8001ed0 <__kernel_rem_pio2f+0x268>
 8001e5c:	4605      	mov	r5, r0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7fe fe33 	bl	8000acc <__aeabi_fcmpeq>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	f000 80a0 	beq.w	8001fac <__kernel_rem_pio2f+0x344>
 8001e6c:	1e7c      	subs	r4, r7, #1
 8001e6e:	4623      	mov	r3, r4
 8001e70:	2200      	movs	r2, #0
 8001e72:	9902      	ldr	r1, [sp, #8]
 8001e74:	428b      	cmp	r3, r1
 8001e76:	da55      	bge.n	8001f24 <__kernel_rem_pio2f+0x2bc>
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d07e      	beq.n	8001f7a <__kernel_rem_pio2f+0x312>
 8001e7c:	ab08      	add	r3, sp, #32
 8001e7e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001e82:	3e08      	subs	r6, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 808f 	beq.w	8001fa8 <__kernel_rem_pio2f+0x340>
 8001e8a:	4631      	mov	r1, r6
 8001e8c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001e90:	f000 fa42 	bl	8002318 <scalbnf>
 8001e94:	46a0      	mov	r8, r4
 8001e96:	4682      	mov	sl, r0
 8001e98:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8001e9c:	af44      	add	r7, sp, #272	; 0x110
 8001e9e:	f1b8 0f00 	cmp.w	r8, #0
 8001ea2:	f280 80b5 	bge.w	8002010 <__kernel_rem_pio2f+0x3a8>
 8001ea6:	f04f 0a00 	mov.w	sl, #0
 8001eaa:	2300      	movs	r3, #0
 8001eac:	00a6      	lsls	r6, r4, #2
 8001eae:	4a35      	ldr	r2, [pc, #212]	; (8001f84 <__kernel_rem_pio2f+0x31c>)
 8001eb0:	4437      	add	r7, r6
 8001eb2:	eba4 010a 	sub.w	r1, r4, sl
 8001eb6:	2900      	cmp	r1, #0
 8001eb8:	f280 80db 	bge.w	8002072 <__kernel_rem_pio2f+0x40a>
 8001ebc:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	f200 80ff 	bhi.w	80020c2 <__kernel_rem_pio2f+0x45a>
 8001ec4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001ec8:	01200102 	.word	0x01200102
 8001ecc:	00d90120 	.word	0x00d90120
 8001ed0:	2502      	movs	r5, #2
 8001ed2:	e74a      	b.n	8001d6a <__kernel_rem_pio2f+0x102>
 8001ed4:	ab08      	add	r3, sp, #32
 8001ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eda:	f1b8 0f00 	cmp.w	r8, #0
 8001ede:	d109      	bne.n	8001ef4 <__kernel_rem_pio2f+0x28c>
 8001ee0:	b12b      	cbz	r3, 8001eee <__kernel_rem_pio2f+0x286>
 8001ee2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001ee6:	a908      	add	r1, sp, #32
 8001ee8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001eec:	2301      	movs	r3, #1
 8001eee:	3201      	adds	r2, #1
 8001ef0:	4698      	mov	r8, r3
 8001ef2:	e73e      	b.n	8001d72 <__kernel_rem_pio2f+0x10a>
 8001ef4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001ef8:	a908      	add	r1, sp, #32
 8001efa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001efe:	4643      	mov	r3, r8
 8001f00:	e7f5      	b.n	8001eee <__kernel_rem_pio2f+0x286>
 8001f02:	1e7a      	subs	r2, r7, #1
 8001f04:	ab08      	add	r3, sp, #32
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f0e:	a908      	add	r1, sp, #32
 8001f10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001f14:	e738      	b.n	8001d88 <__kernel_rem_pio2f+0x120>
 8001f16:	1e7a      	subs	r2, r7, #1
 8001f18:	ab08      	add	r3, sp, #32
 8001f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f22:	e7f4      	b.n	8001f0e <__kernel_rem_pio2f+0x2a6>
 8001f24:	a908      	add	r1, sp, #32
 8001f26:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	e7a0      	b.n	8001e72 <__kernel_rem_pio2f+0x20a>
 8001f30:	3301      	adds	r3, #1
 8001f32:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8001f36:	2900      	cmp	r1, #0
 8001f38:	d0fa      	beq.n	8001f30 <__kernel_rem_pio2f+0x2c8>
 8001f3a:	f06f 0803 	mvn.w	r8, #3
 8001f3e:	9a04      	ldr	r2, [sp, #16]
 8001f40:	1c7d      	adds	r5, r7, #1
 8001f42:	18bc      	adds	r4, r7, r2
 8001f44:	aa1c      	add	r2, sp, #112	; 0x70
 8001f46:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8001f4a:	441f      	add	r7, r3
 8001f4c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8001f50:	42af      	cmp	r7, r5
 8001f52:	f6ff aec8 	blt.w	8001ce6 <__kernel_rem_pio2f+0x7e>
 8001f56:	9b06      	ldr	r3, [sp, #24]
 8001f58:	f04f 0a00 	mov.w	sl, #0
 8001f5c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001f60:	f7fe fbcc 	bl	80006fc <__aeabi_i2f>
 8001f64:	f04f 0b00 	mov.w	fp, #0
 8001f68:	6020      	str	r0, [r4, #0]
 8001f6a:	9b03      	ldr	r3, [sp, #12]
 8001f6c:	459a      	cmp	sl, r3
 8001f6e:	dd0b      	ble.n	8001f88 <__kernel_rem_pio2f+0x320>
 8001f70:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8001f74:	3404      	adds	r4, #4
 8001f76:	3501      	adds	r5, #1
 8001f78:	e7ea      	b.n	8001f50 <__kernel_rem_pio2f+0x2e8>
 8001f7a:	9a07      	ldr	r2, [sp, #28]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e7d8      	b.n	8001f32 <__kernel_rem_pio2f+0x2ca>
 8001f80:	080029d8 	.word	0x080029d8
 8001f84:	080029ac 	.word	0x080029ac
 8001f88:	fb08 f30a 	mul.w	r3, r8, sl
 8001f8c:	9a05      	ldr	r2, [sp, #20]
 8001f8e:	58e0      	ldr	r0, [r4, r3]
 8001f90:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8001f94:	f7fe fc06 	bl	80007a4 <__aeabi_fmul>
 8001f98:	4601      	mov	r1, r0
 8001f9a:	4658      	mov	r0, fp
 8001f9c:	f7fe fafa 	bl	8000594 <__addsf3>
 8001fa0:	f10a 0a01 	add.w	sl, sl, #1
 8001fa4:	4683      	mov	fp, r0
 8001fa6:	e7e0      	b.n	8001f6a <__kernel_rem_pio2f+0x302>
 8001fa8:	3c01      	subs	r4, #1
 8001faa:	e767      	b.n	8001e7c <__kernel_rem_pio2f+0x214>
 8001fac:	4271      	negs	r1, r6
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f000 f9b2 	bl	8002318 <scalbnf>
 8001fb4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001fb8:	4604      	mov	r4, r0
 8001fba:	f7fe fda5 	bl	8000b08 <__aeabi_fcmpge>
 8001fbe:	b1f8      	cbz	r0, 8002000 <__kernel_rem_pio2f+0x398>
 8001fc0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7fe fbed 	bl	80007a4 <__aeabi_fmul>
 8001fca:	f7fe fdb1 	bl	8000b30 <__aeabi_f2iz>
 8001fce:	f7fe fb95 	bl	80006fc <__aeabi_i2f>
 8001fd2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001fd6:	4680      	mov	r8, r0
 8001fd8:	f7fe fbe4 	bl	80007a4 <__aeabi_fmul>
 8001fdc:	4601      	mov	r1, r0
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7fe fad6 	bl	8000590 <__aeabi_fsub>
 8001fe4:	f7fe fda4 	bl	8000b30 <__aeabi_f2iz>
 8001fe8:	ab08      	add	r3, sp, #32
 8001fea:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8001fee:	4640      	mov	r0, r8
 8001ff0:	f7fe fd9e 	bl	8000b30 <__aeabi_f2iz>
 8001ff4:	1c7c      	adds	r4, r7, #1
 8001ff6:	ab08      	add	r3, sp, #32
 8001ff8:	3608      	adds	r6, #8
 8001ffa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8001ffe:	e744      	b.n	8001e8a <__kernel_rem_pio2f+0x222>
 8002000:	4620      	mov	r0, r4
 8002002:	f7fe fd95 	bl	8000b30 <__aeabi_f2iz>
 8002006:	ab08      	add	r3, sp, #32
 8002008:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800200c:	463c      	mov	r4, r7
 800200e:	e73c      	b.n	8001e8a <__kernel_rem_pio2f+0x222>
 8002010:	ab08      	add	r3, sp, #32
 8002012:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002016:	f7fe fb71 	bl	80006fc <__aeabi_i2f>
 800201a:	4651      	mov	r1, sl
 800201c:	f7fe fbc2 	bl	80007a4 <__aeabi_fmul>
 8002020:	4631      	mov	r1, r6
 8002022:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8002026:	4650      	mov	r0, sl
 8002028:	f7fe fbbc 	bl	80007a4 <__aeabi_fmul>
 800202c:	f108 38ff 	add.w	r8, r8, #4294967295
 8002030:	4682      	mov	sl, r0
 8002032:	e734      	b.n	8001e9e <__kernel_rem_pio2f+0x236>
 8002034:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8002038:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800203c:	9304      	str	r3, [sp, #16]
 800203e:	9203      	str	r2, [sp, #12]
 8002040:	f7fe fbb0 	bl	80007a4 <__aeabi_fmul>
 8002044:	4601      	mov	r1, r0
 8002046:	4658      	mov	r0, fp
 8002048:	f7fe faa4 	bl	8000594 <__addsf3>
 800204c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8002050:	4683      	mov	fp, r0
 8002052:	f108 0801 	add.w	r8, r8, #1
 8002056:	9902      	ldr	r1, [sp, #8]
 8002058:	4588      	cmp	r8, r1
 800205a:	dc01      	bgt.n	8002060 <__kernel_rem_pio2f+0x3f8>
 800205c:	45c2      	cmp	sl, r8
 800205e:	dae9      	bge.n	8002034 <__kernel_rem_pio2f+0x3cc>
 8002060:	a958      	add	r1, sp, #352	; 0x160
 8002062:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8002066:	f841 bca0 	str.w	fp, [r1, #-160]
 800206a:	f10a 0a01 	add.w	sl, sl, #1
 800206e:	3f04      	subs	r7, #4
 8002070:	e71f      	b.n	8001eb2 <__kernel_rem_pio2f+0x24a>
 8002072:	469b      	mov	fp, r3
 8002074:	f04f 0800 	mov.w	r8, #0
 8002078:	e7ed      	b.n	8002056 <__kernel_rem_pio2f+0x3ee>
 800207a:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800207e:	4456      	add	r6, sl
 8002080:	4637      	mov	r7, r6
 8002082:	46a0      	mov	r8, r4
 8002084:	f1b8 0f00 	cmp.w	r8, #0
 8002088:	dc4a      	bgt.n	8002120 <__kernel_rem_pio2f+0x4b8>
 800208a:	4627      	mov	r7, r4
 800208c:	2f01      	cmp	r7, #1
 800208e:	dc60      	bgt.n	8002152 <__kernel_rem_pio2f+0x4ea>
 8002090:	2000      	movs	r0, #0
 8002092:	2c01      	cmp	r4, #1
 8002094:	dc74      	bgt.n	8002180 <__kernel_rem_pio2f+0x518>
 8002096:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8002098:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800209a:	2d00      	cmp	r5, #0
 800209c:	d176      	bne.n	800218c <__kernel_rem_pio2f+0x524>
 800209e:	9901      	ldr	r1, [sp, #4]
 80020a0:	600a      	str	r2, [r1, #0]
 80020a2:	460a      	mov	r2, r1
 80020a4:	604b      	str	r3, [r1, #4]
 80020a6:	6090      	str	r0, [r2, #8]
 80020a8:	e00b      	b.n	80020c2 <__kernel_rem_pio2f+0x45a>
 80020aa:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80020ae:	f7fe fa71 	bl	8000594 <__addsf3>
 80020b2:	3c01      	subs	r4, #1
 80020b4:	2c00      	cmp	r4, #0
 80020b6:	daf8      	bge.n	80020aa <__kernel_rem_pio2f+0x442>
 80020b8:	b10d      	cbz	r5, 80020be <__kernel_rem_pio2f+0x456>
 80020ba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80020be:	9b01      	ldr	r3, [sp, #4]
 80020c0:	6018      	str	r0, [r3, #0]
 80020c2:	f009 0007 	and.w	r0, r9, #7
 80020c6:	b059      	add	sp, #356	; 0x164
 80020c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020cc:	2000      	movs	r0, #0
 80020ce:	ae30      	add	r6, sp, #192	; 0xc0
 80020d0:	e7f0      	b.n	80020b4 <__kernel_rem_pio2f+0x44c>
 80020d2:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80020d6:	f7fe fa5d 	bl	8000594 <__addsf3>
 80020da:	3e01      	subs	r6, #1
 80020dc:	2e00      	cmp	r6, #0
 80020de:	daf8      	bge.n	80020d2 <__kernel_rem_pio2f+0x46a>
 80020e0:	b1b5      	cbz	r5, 8002110 <__kernel_rem_pio2f+0x4a8>
 80020e2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80020e6:	9a01      	ldr	r2, [sp, #4]
 80020e8:	af58      	add	r7, sp, #352	; 0x160
 80020ea:	4601      	mov	r1, r0
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 80020f2:	f7fe fa4d 	bl	8000590 <__aeabi_fsub>
 80020f6:	2601      	movs	r6, #1
 80020f8:	42b4      	cmp	r4, r6
 80020fa:	da0b      	bge.n	8002114 <__kernel_rem_pio2f+0x4ac>
 80020fc:	b10d      	cbz	r5, 8002102 <__kernel_rem_pio2f+0x49a>
 80020fe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002102:	9b01      	ldr	r3, [sp, #4]
 8002104:	6058      	str	r0, [r3, #4]
 8002106:	e7dc      	b.n	80020c2 <__kernel_rem_pio2f+0x45a>
 8002108:	4626      	mov	r6, r4
 800210a:	2000      	movs	r0, #0
 800210c:	af30      	add	r7, sp, #192	; 0xc0
 800210e:	e7e5      	b.n	80020dc <__kernel_rem_pio2f+0x474>
 8002110:	4603      	mov	r3, r0
 8002112:	e7e8      	b.n	80020e6 <__kernel_rem_pio2f+0x47e>
 8002114:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8002118:	f7fe fa3c 	bl	8000594 <__addsf3>
 800211c:	3601      	adds	r6, #1
 800211e:	e7eb      	b.n	80020f8 <__kernel_rem_pio2f+0x490>
 8002120:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8002124:	f108 38ff 	add.w	r8, r8, #4294967295
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	9303      	str	r3, [sp, #12]
 8002130:	9202      	str	r2, [sp, #8]
 8002132:	f7fe fa2f 	bl	8000594 <__addsf3>
 8002136:	9a02      	ldr	r2, [sp, #8]
 8002138:	4601      	mov	r1, r0
 800213a:	4683      	mov	fp, r0
 800213c:	4610      	mov	r0, r2
 800213e:	f7fe fa27 	bl	8000590 <__aeabi_fsub>
 8002142:	9b03      	ldr	r3, [sp, #12]
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fa25 	bl	8000594 <__addsf3>
 800214a:	f8c7 b000 	str.w	fp, [r7]
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	e798      	b.n	8002084 <__kernel_rem_pio2f+0x41c>
 8002152:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8002156:	3f01      	subs	r7, #1
 8002158:	f8d6 b004 	ldr.w	fp, [r6, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	4659      	mov	r1, fp
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	f7fe fa17 	bl	8000594 <__addsf3>
 8002166:	9b02      	ldr	r3, [sp, #8]
 8002168:	4601      	mov	r1, r0
 800216a:	4680      	mov	r8, r0
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fa0f 	bl	8000590 <__aeabi_fsub>
 8002172:	4659      	mov	r1, fp
 8002174:	f7fe fa0e 	bl	8000594 <__addsf3>
 8002178:	f8c6 8000 	str.w	r8, [r6]
 800217c:	6070      	str	r0, [r6, #4]
 800217e:	e785      	b.n	800208c <__kernel_rem_pio2f+0x424>
 8002180:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8002184:	f7fe fa06 	bl	8000594 <__addsf3>
 8002188:	3c01      	subs	r4, #1
 800218a:	e782      	b.n	8002092 <__kernel_rem_pio2f+0x42a>
 800218c:	9901      	ldr	r1, [sp, #4]
 800218e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8002192:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002196:	600a      	str	r2, [r1, #0]
 8002198:	604b      	str	r3, [r1, #4]
 800219a:	460a      	mov	r2, r1
 800219c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80021a0:	e781      	b.n	80020a6 <__kernel_rem_pio2f+0x43e>
 80021a2:	bf00      	nop

080021a4 <__kernel_sinf>:
 80021a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021a8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80021ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80021b0:	4604      	mov	r4, r0
 80021b2:	460f      	mov	r7, r1
 80021b4:	4691      	mov	r9, r2
 80021b6:	da03      	bge.n	80021c0 <__kernel_sinf+0x1c>
 80021b8:	f7fe fcba 	bl	8000b30 <__aeabi_f2iz>
 80021bc:	2800      	cmp	r0, #0
 80021be:	d035      	beq.n	800222c <__kernel_sinf+0x88>
 80021c0:	4621      	mov	r1, r4
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7fe faee 	bl	80007a4 <__aeabi_fmul>
 80021c8:	4605      	mov	r5, r0
 80021ca:	4601      	mov	r1, r0
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7fe fae9 	bl	80007a4 <__aeabi_fmul>
 80021d2:	4929      	ldr	r1, [pc, #164]	; (8002278 <__kernel_sinf+0xd4>)
 80021d4:	4606      	mov	r6, r0
 80021d6:	4628      	mov	r0, r5
 80021d8:	f7fe fae4 	bl	80007a4 <__aeabi_fmul>
 80021dc:	4927      	ldr	r1, [pc, #156]	; (800227c <__kernel_sinf+0xd8>)
 80021de:	f7fe f9d7 	bl	8000590 <__aeabi_fsub>
 80021e2:	4629      	mov	r1, r5
 80021e4:	f7fe fade 	bl	80007a4 <__aeabi_fmul>
 80021e8:	4925      	ldr	r1, [pc, #148]	; (8002280 <__kernel_sinf+0xdc>)
 80021ea:	f7fe f9d3 	bl	8000594 <__addsf3>
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fe fad8 	bl	80007a4 <__aeabi_fmul>
 80021f4:	4923      	ldr	r1, [pc, #140]	; (8002284 <__kernel_sinf+0xe0>)
 80021f6:	f7fe f9cb 	bl	8000590 <__aeabi_fsub>
 80021fa:	4629      	mov	r1, r5
 80021fc:	f7fe fad2 	bl	80007a4 <__aeabi_fmul>
 8002200:	4921      	ldr	r1, [pc, #132]	; (8002288 <__kernel_sinf+0xe4>)
 8002202:	f7fe f9c7 	bl	8000594 <__addsf3>
 8002206:	4680      	mov	r8, r0
 8002208:	f1b9 0f00 	cmp.w	r9, #0
 800220c:	d111      	bne.n	8002232 <__kernel_sinf+0x8e>
 800220e:	4601      	mov	r1, r0
 8002210:	4628      	mov	r0, r5
 8002212:	f7fe fac7 	bl	80007a4 <__aeabi_fmul>
 8002216:	491d      	ldr	r1, [pc, #116]	; (800228c <__kernel_sinf+0xe8>)
 8002218:	f7fe f9ba 	bl	8000590 <__aeabi_fsub>
 800221c:	4631      	mov	r1, r6
 800221e:	f7fe fac1 	bl	80007a4 <__aeabi_fmul>
 8002222:	4601      	mov	r1, r0
 8002224:	4620      	mov	r0, r4
 8002226:	f7fe f9b5 	bl	8000594 <__addsf3>
 800222a:	4604      	mov	r4, r0
 800222c:	4620      	mov	r0, r4
 800222e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002232:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002236:	4638      	mov	r0, r7
 8002238:	f7fe fab4 	bl	80007a4 <__aeabi_fmul>
 800223c:	4641      	mov	r1, r8
 800223e:	4681      	mov	r9, r0
 8002240:	4630      	mov	r0, r6
 8002242:	f7fe faaf 	bl	80007a4 <__aeabi_fmul>
 8002246:	4601      	mov	r1, r0
 8002248:	4648      	mov	r0, r9
 800224a:	f7fe f9a1 	bl	8000590 <__aeabi_fsub>
 800224e:	4629      	mov	r1, r5
 8002250:	f7fe faa8 	bl	80007a4 <__aeabi_fmul>
 8002254:	4639      	mov	r1, r7
 8002256:	f7fe f99b 	bl	8000590 <__aeabi_fsub>
 800225a:	490c      	ldr	r1, [pc, #48]	; (800228c <__kernel_sinf+0xe8>)
 800225c:	4605      	mov	r5, r0
 800225e:	4630      	mov	r0, r6
 8002260:	f7fe faa0 	bl	80007a4 <__aeabi_fmul>
 8002264:	4601      	mov	r1, r0
 8002266:	4628      	mov	r0, r5
 8002268:	f7fe f994 	bl	8000594 <__addsf3>
 800226c:	4601      	mov	r1, r0
 800226e:	4620      	mov	r0, r4
 8002270:	f7fe f98e 	bl	8000590 <__aeabi_fsub>
 8002274:	e7d9      	b.n	800222a <__kernel_sinf+0x86>
 8002276:	bf00      	nop
 8002278:	2f2ec9d3 	.word	0x2f2ec9d3
 800227c:	32d72f34 	.word	0x32d72f34
 8002280:	3638ef1b 	.word	0x3638ef1b
 8002284:	39500d01 	.word	0x39500d01
 8002288:	3c088889 	.word	0x3c088889
 800228c:	3e2aaaab 	.word	0x3e2aaaab

08002290 <fabsf>:
 8002290:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002294:	4770      	bx	lr
	...

08002298 <floorf>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800229e:	0df5      	lsrs	r5, r6, #23
 80022a0:	3d7f      	subs	r5, #127	; 0x7f
 80022a2:	2d16      	cmp	r5, #22
 80022a4:	4601      	mov	r1, r0
 80022a6:	4604      	mov	r4, r0
 80022a8:	dc26      	bgt.n	80022f8 <floorf+0x60>
 80022aa:	2d00      	cmp	r5, #0
 80022ac:	da0e      	bge.n	80022cc <floorf+0x34>
 80022ae:	4917      	ldr	r1, [pc, #92]	; (800230c <floorf+0x74>)
 80022b0:	f7fe f970 	bl	8000594 <__addsf3>
 80022b4:	2100      	movs	r1, #0
 80022b6:	f7fe fc31 	bl	8000b1c <__aeabi_fcmpgt>
 80022ba:	b128      	cbz	r0, 80022c8 <floorf+0x30>
 80022bc:	2c00      	cmp	r4, #0
 80022be:	da23      	bge.n	8002308 <floorf+0x70>
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <floorf+0x78>)
 80022c2:	2e00      	cmp	r6, #0
 80022c4:	bf18      	it	ne
 80022c6:	461c      	movne	r4, r3
 80022c8:	4621      	mov	r1, r4
 80022ca:	e01b      	b.n	8002304 <floorf+0x6c>
 80022cc:	4e11      	ldr	r6, [pc, #68]	; (8002314 <floorf+0x7c>)
 80022ce:	412e      	asrs	r6, r5
 80022d0:	4230      	tst	r0, r6
 80022d2:	d017      	beq.n	8002304 <floorf+0x6c>
 80022d4:	490d      	ldr	r1, [pc, #52]	; (800230c <floorf+0x74>)
 80022d6:	f7fe f95d 	bl	8000594 <__addsf3>
 80022da:	2100      	movs	r1, #0
 80022dc:	f7fe fc1e 	bl	8000b1c <__aeabi_fcmpgt>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	d0f1      	beq.n	80022c8 <floorf+0x30>
 80022e4:	2c00      	cmp	r4, #0
 80022e6:	bfbe      	ittt	lt
 80022e8:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80022ec:	fa43 f505 	asrlt.w	r5, r3, r5
 80022f0:	1964      	addlt	r4, r4, r5
 80022f2:	ea24 0406 	bic.w	r4, r4, r6
 80022f6:	e7e7      	b.n	80022c8 <floorf+0x30>
 80022f8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80022fc:	d302      	bcc.n	8002304 <floorf+0x6c>
 80022fe:	f7fe f949 	bl	8000594 <__addsf3>
 8002302:	4601      	mov	r1, r0
 8002304:	4608      	mov	r0, r1
 8002306:	bd70      	pop	{r4, r5, r6, pc}
 8002308:	2400      	movs	r4, #0
 800230a:	e7dd      	b.n	80022c8 <floorf+0x30>
 800230c:	7149f2ca 	.word	0x7149f2ca
 8002310:	bf800000 	.word	0xbf800000
 8002314:	007fffff 	.word	0x007fffff

08002318 <scalbnf>:
 8002318:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800231c:	b510      	push	{r4, lr}
 800231e:	4602      	mov	r2, r0
 8002320:	460c      	mov	r4, r1
 8002322:	4601      	mov	r1, r0
 8002324:	d027      	beq.n	8002376 <scalbnf+0x5e>
 8002326:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800232a:	d303      	bcc.n	8002334 <scalbnf+0x1c>
 800232c:	f7fe f932 	bl	8000594 <__addsf3>
 8002330:	4602      	mov	r2, r0
 8002332:	e020      	b.n	8002376 <scalbnf+0x5e>
 8002334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002338:	d215      	bcs.n	8002366 <scalbnf+0x4e>
 800233a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800233e:	f7fe fa31 	bl	80007a4 <__aeabi_fmul>
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <scalbnf+0x8c>)
 8002344:	4602      	mov	r2, r0
 8002346:	429c      	cmp	r4, r3
 8002348:	db22      	blt.n	8002390 <scalbnf+0x78>
 800234a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800234e:	3b19      	subs	r3, #25
 8002350:	4423      	add	r3, r4
 8002352:	2bfe      	cmp	r3, #254	; 0xfe
 8002354:	dd09      	ble.n	800236a <scalbnf+0x52>
 8002356:	4611      	mov	r1, r2
 8002358:	4813      	ldr	r0, [pc, #76]	; (80023a8 <scalbnf+0x90>)
 800235a:	f000 f829 	bl	80023b0 <copysignf>
 800235e:	4912      	ldr	r1, [pc, #72]	; (80023a8 <scalbnf+0x90>)
 8002360:	f7fe fa20 	bl	80007a4 <__aeabi_fmul>
 8002364:	e7e4      	b.n	8002330 <scalbnf+0x18>
 8002366:	0ddb      	lsrs	r3, r3, #23
 8002368:	e7f2      	b.n	8002350 <scalbnf+0x38>
 800236a:	2b00      	cmp	r3, #0
 800236c:	dd05      	ble.n	800237a <scalbnf+0x62>
 800236e:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8002372:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8002376:	4610      	mov	r0, r2
 8002378:	bd10      	pop	{r4, pc}
 800237a:	f113 0f16 	cmn.w	r3, #22
 800237e:	da09      	bge.n	8002394 <scalbnf+0x7c>
 8002380:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002384:	429c      	cmp	r4, r3
 8002386:	4611      	mov	r1, r2
 8002388:	dce6      	bgt.n	8002358 <scalbnf+0x40>
 800238a:	4808      	ldr	r0, [pc, #32]	; (80023ac <scalbnf+0x94>)
 800238c:	f000 f810 	bl	80023b0 <copysignf>
 8002390:	4906      	ldr	r1, [pc, #24]	; (80023ac <scalbnf+0x94>)
 8002392:	e7e5      	b.n	8002360 <scalbnf+0x48>
 8002394:	3319      	adds	r3, #25
 8002396:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800239a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800239e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80023a2:	e7dd      	b.n	8002360 <scalbnf+0x48>
 80023a4:	ffff3cb0 	.word	0xffff3cb0
 80023a8:	7149f2ca 	.word	0x7149f2ca
 80023ac:	0da24260 	.word	0x0da24260

080023b0 <copysignf>:
 80023b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80023b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80023b8:	4308      	orrs	r0, r1
 80023ba:	4770      	bx	lr

080023bc <_init>:
 80023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023be:	bf00      	nop
 80023c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c2:	bc08      	pop	{r3}
 80023c4:	469e      	mov	lr, r3
 80023c6:	4770      	bx	lr

080023c8 <_fini>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	bf00      	nop
 80023cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ce:	bc08      	pop	{r3}
 80023d0:	469e      	mov	lr, r3
 80023d2:	4770      	bx	lr
